
AUTO_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f2  00800100  00001756  000017ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001756  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b7  008001f2  008001f2  000018dc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001938  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002297  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011fc  00000000  00000000  00003e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014b6  00000000  00000000  00005063  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000060c  00000000  00000000  0000651c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000095e  00000000  00000000  00006b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001254  00000000  00000000  00007486  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  000086da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
       2:	00 00       	nop
       4:	95 c0       	rjmp	.+298    	; 0x130 <__bad_interrupt>
       6:	00 00       	nop
       8:	93 c0       	rjmp	.+294    	; 0x130 <__bad_interrupt>
       a:	00 00       	nop
       c:	91 c0       	rjmp	.+290    	; 0x130 <__bad_interrupt>
       e:	00 00       	nop
      10:	8f c0       	rjmp	.+286    	; 0x130 <__bad_interrupt>
      12:	00 00       	nop
      14:	6f c5       	rjmp	.+2782   	; 0xaf4 <__vector_5>
      16:	00 00       	nop
      18:	f5 c5       	rjmp	.+3050   	; 0xc04 <__vector_6>
      1a:	00 00       	nop
      1c:	7b c6       	rjmp	.+3318   	; 0xd14 <__vector_7>
      1e:	00 00       	nop
      20:	87 c0       	rjmp	.+270    	; 0x130 <__bad_interrupt>
      22:	00 00       	nop
      24:	85 c0       	rjmp	.+266    	; 0x130 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c5       	rjmp	.+2716   	; 0xac6 <__vector_10>
      2a:	00 00       	nop
      2c:	81 c0       	rjmp	.+258    	; 0x130 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7f c0       	rjmp	.+254    	; 0x130 <__bad_interrupt>
      32:	00 00       	nop
      34:	7d c0       	rjmp	.+250    	; 0x130 <__bad_interrupt>
      36:	00 00       	nop
      38:	7b c0       	rjmp	.+246    	; 0x130 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	79 c0       	rjmp	.+242    	; 0x130 <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c2       	rjmp	.+1484   	; 0x60e <__vector_16>
      42:	00 00       	nop
      44:	75 c0       	rjmp	.+234    	; 0x130 <__bad_interrupt>
      46:	00 00       	nop
      48:	50 c4       	rjmp	.+2208   	; 0x8ea <__vector_18>
      4a:	00 00       	nop
      4c:	71 c0       	rjmp	.+226    	; 0x130 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6f c0       	rjmp	.+222    	; 0x130 <__bad_interrupt>
      52:	00 00       	nop
      54:	6d c0       	rjmp	.+218    	; 0x130 <__bad_interrupt>
      56:	00 00       	nop
      58:	6b c0       	rjmp	.+214    	; 0x130 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	69 c0       	rjmp	.+210    	; 0x130 <__bad_interrupt>
      5e:	00 00       	nop
      60:	67 c0       	rjmp	.+206    	; 0x130 <__bad_interrupt>
      62:	00 00       	nop
      64:	65 c0       	rjmp	.+202    	; 0x130 <__bad_interrupt>
      66:	00 00       	nop
      68:	63 c0       	rjmp	.+198    	; 0x130 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	61 c0       	rjmp	.+194    	; 0x130 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5f c0       	rjmp	.+190    	; 0x130 <__bad_interrupt>
      72:	00 00       	nop
      74:	5d c0       	rjmp	.+186    	; 0x130 <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c4       	rjmp	.+2452   	; 0xa0e <__vector_30>
      7a:	00 00       	nop
      7c:	59 c0       	rjmp	.+178    	; 0x130 <__bad_interrupt>
      7e:	00 00       	nop
      80:	57 c0       	rjmp	.+174    	; 0x130 <__bad_interrupt>
      82:	00 00       	nop
      84:	55 c0       	rjmp	.+170    	; 0x130 <__bad_interrupt>
      86:	00 00       	nop
      88:	53 c0       	rjmp	.+166    	; 0x130 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d7 01       	movw	r26, r14
      8e:	10 02       	muls	r17, r16
      90:	ff 01       	movw	r30, r30
      92:	10 02       	muls	r17, r16
      94:	d2 01       	movw	r26, r4
      96:	10 02       	muls	r17, r16
      98:	10 02       	muls	r17, r16
      9a:	10 02       	muls	r17, r16
      9c:	10 02       	muls	r17, r16
      9e:	10 02       	muls	r17, r16
      a0:	de 01       	movw	r26, r28
      a2:	10 02       	muls	r17, r16
      a4:	10 02       	muls	r17, r16
      a6:	10 02       	muls	r17, r16
      a8:	10 02       	muls	r17, r16
      aa:	10 02       	muls	r17, r16
      ac:	e5 01       	movw	r28, r10
      ae:	10 02       	muls	r17, r16
      b0:	10 02       	muls	r17, r16
      b2:	ec 01       	movw	r28, r24
      b4:	10 02       	muls	r17, r16
      b6:	10 02       	muls	r17, r16
      b8:	10 02       	muls	r17, r16
      ba:	10 02       	muls	r17, r16
      bc:	10 02       	muls	r17, r16
      be:	10 02       	muls	r17, r16
      c0:	10 02       	muls	r17, r16
      c2:	10 02       	muls	r17, r16
      c4:	10 02       	muls	r17, r16
      c6:	10 02       	muls	r17, r16
      c8:	10 02       	muls	r17, r16
      ca:	10 02       	muls	r17, r16
      cc:	d7 01       	movw	r26, r14
      ce:	10 02       	muls	r17, r16
      d0:	ff 01       	movw	r30, r30
      d2:	10 02       	muls	r17, r16
      d4:	d2 01       	movw	r26, r4
      d6:	10 02       	muls	r17, r16
      d8:	10 02       	muls	r17, r16
      da:	10 02       	muls	r17, r16
      dc:	10 02       	muls	r17, r16
      de:	10 02       	muls	r17, r16
      e0:	de 01       	movw	r26, r28
      e2:	10 02       	muls	r17, r16
      e4:	10 02       	muls	r17, r16
      e6:	10 02       	muls	r17, r16
      e8:	10 02       	muls	r17, r16
      ea:	10 02       	muls	r17, r16
      ec:	e5 01       	movw	r28, r10
      ee:	10 02       	muls	r17, r16
      f0:	10 02       	muls	r17, r16
      f2:	ec 01       	movw	r28, r24

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	d0 e1       	ldi	r29, 0x10	; 16
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_copy_data>:
     100:	11 e0       	ldi	r17, 0x01	; 1
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b1 e0       	ldi	r27, 0x01	; 1
     106:	e6 e5       	ldi	r30, 0x56	; 86
     108:	f7 e1       	ldi	r31, 0x17	; 23
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a2 3f       	cpi	r26, 0xF2	; 242
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
     11a:	23 e0       	ldi	r18, 0x03	; 3
     11c:	a2 ef       	ldi	r26, 0xF2	; 242
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	a9 3a       	cpi	r26, 0xA9	; 169
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	99 d2       	rcall	.+1330   	; 0x65e <main>
     12c:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <_exit>

00000130 <__bad_interrupt>:
     130:	67 cf       	rjmp	.-306    	; 0x0 <__vectors>

00000132 <init_button>:
 

                                                
void init_button(void)
{
	BUTTON_DDR &= ~( 1 << BUTTON0PIN);
     132:	d3 98       	cbi	0x1a, 3	; 26
     134:	08 95       	ret

00000136 <get_button>:
	static unsigned char button_status[BUTTON_NUMER] =
	{BUTTON_RELEASE};
	// 	지역 변수에 static을 쓰면 전역 변수처럼 함수를 빠져 나갔다 다시 들어 와도 값을 유지 한다.  
	int currtn_state;
	
	currtn_state = BUTTON_PIN & (1 << button_pin);   // 버튼을 읽는다. 
     136:	49 b3       	in	r20, 0x19	; 25
	if (currtn_state && button_status[button_num] == BUTTON_RELEASE)  // 버튼이 처음 눌려진 noise high 
     138:	21 e0       	ldi	r18, 0x01	; 1
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	02 c0       	rjmp	.+4      	; 0x142 <get_button+0xc>
     13e:	22 0f       	add	r18, r18
     140:	33 1f       	adc	r19, r19
     142:	6a 95       	dec	r22
     144:	e2 f7       	brpl	.-8      	; 0x13e <get_button+0x8>
     146:	50 e0       	ldi	r21, 0x00	; 0
     148:	24 23       	and	r18, r20
     14a:	35 23       	and	r19, r21
     14c:	23 2b       	or	r18, r19
     14e:	b9 f0       	breq	.+46     	; 0x17e <get_button+0x48>
     150:	fc 01       	movw	r30, r24
     152:	ee 50       	subi	r30, 0x0E	; 14
     154:	fe 4f       	sbci	r31, 0xFE	; 254
     156:	20 81       	ld	r18, Z
     158:	21 11       	cpse	r18, r1
     15a:	27 c0       	rjmp	.+78     	; 0x1aa <get_button+0x74>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15c:	2f ef       	ldi	r18, 0xFF	; 255
     15e:	3d ee       	ldi	r19, 0xED	; 237
     160:	42 e0       	ldi	r20, 0x02	; 2
     162:	21 50       	subi	r18, 0x01	; 1
     164:	30 40       	sbci	r19, 0x00	; 0
     166:	40 40       	sbci	r20, 0x00	; 0
     168:	e1 f7       	brne	.-8      	; 0x162 <get_button+0x2c>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <get_button+0x36>
     16c:	00 00       	nop
	{
		_delay_ms(60);   // noise가 지나가기를 기다린다. 
		button_status[button_num] = BUTTON_PRESS;   // noise가 지나간 상태의 High 상태 
     16e:	fc 01       	movw	r30, r24
     170:	ee 50       	subi	r30, 0x0E	; 14
     172:	fe 4f       	sbci	r31, 0xFE	; 254
     174:	21 e0       	ldi	r18, 0x01	; 1
     176:	20 83       	st	Z, r18
		return 0;   // 아직은 완전히 눌렸다 떼어진 상태가 아니다. 
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	08 95       	ret
	}
	else if (currtn_state==BUTTON_RELEASE && button_status[button_num] == BUTTON_PRESS)
     17e:	fc 01       	movw	r30, r24
     180:	ee 50       	subi	r30, 0x0E	; 14
     182:	fe 4f       	sbci	r31, 0xFE	; 254
     184:	20 81       	ld	r18, Z
     186:	21 30       	cpi	r18, 0x01	; 1
     188:	99 f4       	brne	.+38     	; 0x1b0 <get_button+0x7a>
     18a:	2f ef       	ldi	r18, 0xFF	; 255
     18c:	3d ee       	ldi	r19, 0xED	; 237
     18e:	42 e0       	ldi	r20, 0x02	; 2
     190:	21 50       	subi	r18, 0x01	; 1
     192:	30 40       	sbci	r19, 0x00	; 0
     194:	40 40       	sbci	r20, 0x00	; 0
     196:	e1 f7       	brne	.-8      	; 0x190 <get_button+0x5a>
     198:	00 c0       	rjmp	.+0      	; 0x19a <get_button+0x64>
     19a:	00 00       	nop
	{
		_delay_ms(60);
		button_status[button_num] = BUTTON_RELEASE;   // 다음 버튼 체크를 위해서 초기화
     19c:	fc 01       	movw	r30, r24
     19e:	ee 50       	subi	r30, 0x0E	; 14
     1a0:	fe 4f       	sbci	r31, 0xFE	; 254
     1a2:	10 82       	st	Z, r1
		return 1;   // 완전히 1번 눌렸다 떼어진 상태로 인정		
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	08 95       	ret
	}
	
	return 0;   // 버튼이 open상태 
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	08 95       	ret
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	08 95       	ret

000001b6 <init_fnd>:
 */ 
#include "fnd.h"

void init_fnd(void)
{
	FND_DATA_DDR = 0xff;  // 출력 모드로 설정
     1b6:	9f ef       	ldi	r25, 0xFF	; 255
     1b8:	94 bb       	out	0x14, r25	; 20
	
	// FND_DIGIT_DDR |= 0xf0;   // 자릿수 선택 7654 
	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 | 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4; 
     1ba:	8a b3       	in	r24, 0x1a	; 26
     1bc:	80 6f       	ori	r24, 0xF0	; 240
     1be:	8a bb       	out	0x1a, r24	; 26
	
	// fnd를 all off 
	FND_DATA_PORT = ~0x00;
     1c0:	95 bb       	out	0x15, r25	; 21
     1c2:	08 95       	ret

000001c4 <fnd_display_0>:
}

// fnd0에 문자 하나 출력
void fnd_display_0(int c)
{
	FND_DIGIT_PORT |= 1 << FND_DIGIT_D1;
     1c4:	dc 9a       	sbi	0x1b, 4	; 27
	FND_DATA_PORT = c;
     1c6:	85 bb       	out	0x15, r24	; 21
     1c8:	08 95       	ret

000001ca <I2C_init>:
 */ 
#include <avr/io.h>
#include "I2C.h"

void I2C_init(unsigned int baud){
	TWBR = baud;
     1ca:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     1ce:	08 95       	ret

000001d0 <I2C_start>:
}

void I2C_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     1d0:	84 ea       	ldi	r24, 0xA4	; 164
     1d2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));  // 시작 완료 대기
     1d6:	e4 e7       	ldi	r30, 0x74	; 116
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	80 81       	ld	r24, Z
     1dc:	88 23       	and	r24, r24
     1de:	ec f7       	brge	.-6      	; 0x1da <I2C_start+0xa>
}
     1e0:	08 95       	ret

000001e2 <I2C_transmit>:

void I2C_transmit(uint8_t data)
{
	TWDR = data;
     1e2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
     1e6:	84 e8       	ldi	r24, 0x84	; 132
     1e8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
     1ec:	e4 e7       	ldi	r30, 0x74	; 116
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	88 23       	and	r24, r24
     1f4:	ec f7       	brge	.-6      	; 0x1f0 <I2C_transmit+0xe>
}
     1f6:	08 95       	ret

000001f8 <I2C_write_byte>:

void I2C_write_byte(uint8_t address, uint8_t data)
{
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	d8 2f       	mov	r29, r24
     1fe:	c6 2f       	mov	r28, r22
	I2C_start();
     200:	e7 df       	rcall	.-50     	; 0x1d0 <I2C_start>
	I2C_transmit(address);
     202:	8d 2f       	mov	r24, r29
     204:	ee df       	rcall	.-36     	; 0x1e2 <I2C_transmit>
	I2C_transmit(data);
     206:	8c 2f       	mov	r24, r28
     208:	ec df       	rcall	.-40     	; 0x1e2 <I2C_transmit>
     20a:	84 e9       	ldi	r24, 0x94	; 148
	I2C_stop();
}

void I2C_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     20c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     210:	df 91       	pop	r29
{
	I2C_start();
	I2C_transmit(address);
	I2C_transmit(data);
	I2C_stop();
}
     212:	cf 91       	pop	r28
     214:	08 95       	ret

00000216 <I2C_LCD_write_data>:
     216:	ef 92       	push	r14
	//}
#endif 
}
// 1byte를 write
void I2C_LCD_write_data(uint8_t data)
{
     218:	ff 92       	push	r15
     21a:	0f 93       	push	r16
     21c:	1f 93       	push	r17
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	00 d0       	rcall	.+0      	; 0x224 <I2C_LCD_write_data+0xe>
     224:	00 d0       	rcall	.+0      	; 0x226 <I2C_LCD_write_data+0x10>
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
	char data_u, data_l;
	uint8_t data_t[4] = {0,};
		
	data_u = (data&0xf0);      // 상위 4bit 데이터
     22a:	28 2f       	mov	r18, r24
     22c:	20 7f       	andi	r18, 0xF0	; 240
	data_l = ((data<<4)&0xf0); // 하위 4bit 데이터
     22e:	30 e1       	ldi	r19, 0x10	; 16
     230:	83 9f       	mul	r24, r19
     232:	c0 01       	movw	r24, r0
     234:	11 24       	eor	r1, r1
	data_t[0] = data_u|0x0D;   //en=1, rs=1           |D7|D6|D5|D4|X|E|RW|RS|
     236:	92 2f       	mov	r25, r18
     238:	9d 60       	ori	r25, 0x0D	; 13
     23a:	99 83       	std	Y+1, r25	; 0x01
	data_t[1] = data_u|0x09;   //en=0, rs=1
     23c:	29 60       	ori	r18, 0x09	; 9
     23e:	2a 83       	std	Y+2, r18	; 0x02
	data_t[2] = data_l|0x0D;   //en=1, rs=1
     240:	98 2f       	mov	r25, r24
     242:	9d 60       	ori	r25, 0x0D	; 13
     244:	9b 83       	std	Y+3, r25	; 0x03
	data_t[3] = data_l|0x09;   //en=0, rs=1
     246:	89 60       	ori	r24, 0x09	; 9
     248:	8c 83       	std	Y+4, r24	; 0x04
     24a:	8e 01       	movw	r16, r28
     24c:	0f 5f       	subi	r16, 0xFF	; 255
     24e:	1f 4f       	sbci	r17, 0xFF	; 255
     250:	7e 01       	movw	r14, r28
     252:	85 e0       	ldi	r24, 0x05	; 5
     254:	e8 0e       	add	r14, r24
     256:	f1 1c       	adc	r15, r1

	for(char i=0;i<4;i++){
		I2C_write_byte(SLA_W, data_t[i]);
     258:	f8 01       	movw	r30, r16
     25a:	61 91       	ld	r22, Z+
     25c:	8f 01       	movw	r16, r30
     25e:	8e e4       	ldi	r24, 0x4E	; 78
     260:	cb df       	rcall	.-106    	; 0x1f8 <I2C_write_byte>
	data_t[0] = data_u|0x0D;   //en=1, rs=1           |D7|D6|D5|D4|X|E|RW|RS|
	data_t[1] = data_u|0x09;   //en=0, rs=1
	data_t[2] = data_l|0x0D;   //en=1, rs=1
	data_t[3] = data_l|0x09;   //en=0, rs=1

	for(char i=0;i<4;i++){
     262:	0e 15       	cp	r16, r14
     264:	1f 05       	cpc	r17, r15
     266:	c1 f7       	brne	.-16     	; 0x258 <I2C_LCD_write_data+0x42>
		I2C_write_byte(SLA_W, data_t[i]);
	}
}
     268:	0f 90       	pop	r0
     26a:	0f 90       	pop	r0
     26c:	0f 90       	pop	r0
     26e:	0f 90       	pop	r0
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	1f 91       	pop	r17
     276:	0f 91       	pop	r16
     278:	ff 90       	pop	r15
     27a:	ef 90       	pop	r14
     27c:	08 95       	ret

0000027e <I2C_LCD_write_command>:

void I2C_LCD_write_command(uint8_t command)
{
     27e:	ef 92       	push	r14
     280:	ff 92       	push	r15
     282:	0f 93       	push	r16
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	00 d0       	rcall	.+0      	; 0x28c <I2C_LCD_write_command+0xe>
     28c:	00 d0       	rcall	.+0      	; 0x28e <I2C_LCD_write_command+0x10>
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (command&0xf0);      // command의 상위 4bit 저장
     292:	28 2f       	mov	r18, r24
     294:	20 7f       	andi	r18, 0xF0	; 240
	data_l = ((command<<4)&0xf0); // command의 하위 4bit 저장
     296:	30 e1       	ldi	r19, 0x10	; 16
     298:	83 9f       	mul	r24, r19
     29a:	c0 01       	movw	r24, r0
     29c:	11 24       	eor	r1, r1
	data_t[0] = data_u|0x0C;  //en=1, rs=0           |D7|D6|D5|D4|X|E|RW|RS|
     29e:	92 2f       	mov	r25, r18
     2a0:	9c 60       	ori	r25, 0x0C	; 12
     2a2:	99 83       	std	Y+1, r25	; 0x01
	data_t[1] = data_u|0x08;  //en=0, rs=0
     2a4:	28 60       	ori	r18, 0x08	; 8
     2a6:	2a 83       	std	Y+2, r18	; 0x02
	data_t[2] = data_l|0x0C;  //en=1, rs=0
     2a8:	98 2f       	mov	r25, r24
     2aa:	9c 60       	ori	r25, 0x0C	; 12
     2ac:	9b 83       	std	Y+3, r25	; 0x03
	data_t[3] = data_l|0x08;  //en=0, rs=0
     2ae:	88 60       	ori	r24, 0x08	; 8
     2b0:	8c 83       	std	Y+4, r24	; 0x04
     2b2:	8e 01       	movw	r16, r28
     2b4:	0f 5f       	subi	r16, 0xFF	; 255
     2b6:	1f 4f       	sbci	r17, 0xFF	; 255
     2b8:	7e 01       	movw	r14, r28
     2ba:	85 e0       	ldi	r24, 0x05	; 5
     2bc:	e8 0e       	add	r14, r24
     2be:	f1 1c       	adc	r15, r1
	
	for(char i=0;i<4;i++){
		I2C_write_byte(SLA_W, data_t[i]);
     2c0:	f8 01       	movw	r30, r16
     2c2:	61 91       	ld	r22, Z+
     2c4:	8f 01       	movw	r16, r30
     2c6:	8e e4       	ldi	r24, 0x4E	; 78
     2c8:	97 df       	rcall	.-210    	; 0x1f8 <I2C_write_byte>
	data_t[0] = data_u|0x0C;  //en=1, rs=0           |D7|D6|D5|D4|X|E|RW|RS|
	data_t[1] = data_u|0x08;  //en=0, rs=0
	data_t[2] = data_l|0x0C;  //en=1, rs=0
	data_t[3] = data_l|0x08;  //en=0, rs=0
	
	for(char i=0;i<4;i++){
     2ca:	0e 15       	cp	r16, r14
     2cc:	1f 05       	cpc	r17, r15
     2ce:	c1 f7       	brne	.-16     	; 0x2c0 <I2C_LCD_write_command+0x42>
		I2C_write_byte(SLA_W, data_t[i]);
	}
}
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	1f 91       	pop	r17
     2de:	0f 91       	pop	r16
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	08 95       	ret

000002e6 <I2C_LCD_clear>:

// 화면 clear
// 화면에 있는 내용만 지운다. 
void I2C_LCD_clear(void)
{
	I2C_LCD_write_command(COMMAND_CLEAR_DISPLAY);
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	ca df       	rcall	.-108    	; 0x27e <I2C_LCD_write_command>
     2ea:	8f e3       	ldi	r24, 0x3F	; 63
     2ec:	9f e1       	ldi	r25, 0x1F	; 31
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <I2C_LCD_clear+0x8>
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <I2C_LCD_clear+0xe>
     2f4:	00 00       	nop
     2f6:	08 95       	ret

000002f8 <I2C_LCD_init>:
}

// LCD를 초기화
void I2C_LCD_init(void)
{
	I2C_init(10000);
     2f8:	80 e1       	ldi	r24, 0x10	; 16
     2fa:	97 e2       	ldi	r25, 0x27	; 39
     2fc:	66 df       	rcall	.-308    	; 0x1ca <I2C_init>
     2fe:	2f ef       	ldi	r18, 0xFF	; 255
     300:	80 e7       	ldi	r24, 0x70	; 112
     302:	92 e0       	ldi	r25, 0x02	; 2
     304:	21 50       	subi	r18, 0x01	; 1
     306:	80 40       	sbci	r24, 0x00	; 0
     308:	90 40       	sbci	r25, 0x00	; 0
     30a:	e1 f7       	brne	.-8      	; 0x304 <I2C_LCD_init+0xc>
     30c:	00 c0       	rjmp	.+0      	; 0x30e <I2C_LCD_init+0x16>
     30e:	00 00       	nop
	_delay_ms(50);
	//Initialization of HD44780-based LCD (4-bit HW)
	I2C_LCD_write_command(0x33);
     310:	83 e3       	ldi	r24, 0x33	; 51
     312:	b5 df       	rcall	.-150    	; 0x27e <I2C_LCD_write_command>
	I2C_LCD_write_command(0x32);
     314:	82 e3       	ldi	r24, 0x32	; 50
     316:	b3 df       	rcall	.-154    	; 0x27e <I2C_LCD_write_command>
	I2C_LCD_write_command(0x28);   //Function Set 4-bit mode
     318:	88 e2       	ldi	r24, 0x28	; 40
     31a:	b1 df       	rcall	.-158    	; 0x27e <I2C_LCD_write_command>
	I2C_LCD_write_command(0x0c);   //Display On/Off Control
     31c:	8c e0       	ldi	r24, 0x0C	; 12
     31e:	af df       	rcall	.-162    	; 0x27e <I2C_LCD_write_command>
	I2C_LCD_write_command(0x06);   //Entry mode set
     320:	86 e0       	ldi	r24, 0x06	; 6
     322:	ad df       	rcall	.-166    	; 0x27e <I2C_LCD_write_command>
     324:	81 e0       	ldi	r24, 0x01	; 1
	I2C_LCD_write_command(0x01);   //Clear Display
     326:	ab df       	rcall	.-170    	; 0x27e <I2C_LCD_write_command>
     328:	8f e3       	ldi	r24, 0x3F	; 63
     32a:	9c e9       	ldi	r25, 0x9C	; 156
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <I2C_LCD_init+0x34>
     330:	00 c0       	rjmp	.+0      	; 0x332 <I2C_LCD_init+0x3a>
     332:	00 00       	nop
     334:	08 95       	ret

00000336 <I2C_LCD_write_string>:
     336:	0f 93       	push	r16
     338:	1f 93       	push	r17
	//Minimum delay to wait before driving LCD module
	_delay_ms(10);
}
// 현재의 xy좌표에 printf처럼 스트링 값을 출력 
void I2C_LCD_write_string(char *string)
{
     33a:	cf 93       	push	r28
     33c:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0; string[i]; i++) //"hello !!\0" 마지막 널문자에서 조건 거짓이 되어 빠져나온다.
     33e:	80 81       	ld	r24, Z
     340:	88 23       	and	r24, r24
     342:	51 f0       	breq	.+20     	; 0x358 <I2C_LCD_write_string+0x22>
     344:	8f 01       	movw	r16, r30
     346:	c0 e0       	ldi	r28, 0x00	; 0
	I2C_LCD_write_data(string[i]);
     348:	66 df       	rcall	.-308    	; 0x216 <I2C_LCD_write_data>
}
// 현재의 xy좌표에 printf처럼 스트링 값을 출력 
void I2C_LCD_write_string(char *string)
{
	uint8_t i;
	for(i=0; string[i]; i++) //"hello !!\0" 마지막 널문자에서 조건 거짓이 되어 빠져나온다.
     34a:	cf 5f       	subi	r28, 0xFF	; 255
     34c:	f8 01       	movw	r30, r16
     34e:	ec 0f       	add	r30, r28
     350:	f1 1d       	adc	r31, r1
     352:	80 81       	ld	r24, Z
     354:	81 11       	cpse	r24, r1
     356:	f8 cf       	rjmp	.-16     	; 0x348 <I2C_LCD_write_string+0x12>
	I2C_LCD_write_data(string[i]);
}
     358:	cf 91       	pop	r28
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	08 95       	ret

00000360 <I2C_LCD_goto_XY>:
	row %= 2;
	
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	I2C_LCD_write_command(command);
     360:	81 70       	andi	r24, 0x01	; 1
     362:	6f 70       	andi	r22, 0x0F	; 15
     364:	90 e4       	ldi	r25, 0x40	; 64
     366:	89 9f       	mul	r24, r25
     368:	60 0d       	add	r22, r0
     36a:	11 24       	eor	r1, r1
     36c:	86 2f       	mov	r24, r22
     36e:	80 58       	subi	r24, 0x80	; 128
     370:	86 cf       	rjmp	.-244    	; 0x27e <I2C_LCD_write_command>
     372:	08 95       	ret

00000374 <I2C_LCD_write_string_XY>:
}

// x,y좌표로 이동을 하고 string값을 출력 한다. 
void I2C_LCD_write_string_XY(uint8_t row, uint8_t col, char *string)
{
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	ea 01       	movw	r28, r20
	I2C_LCD_goto_XY(row, col);
     37a:	f2 df       	rcall	.-28     	; 0x360 <I2C_LCD_goto_XY>
	I2C_LCD_write_string(string);
     37c:	ce 01       	movw	r24, r28
     37e:	db df       	rcall	.-74     	; 0x336 <I2C_LCD_write_string>
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <moving_manual_mode>:
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
	TIMSK |= 1 << TOIE0;
}

void moving_manual_mode(t_car_info *my_car)
{
     386:	dc 01       	movw	r26, r24
		switch(bt_data)
     388:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <bt_data>
     38c:	4e 2f       	mov	r20, r30
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	fa 01       	movw	r30, r20
     392:	e2 54       	subi	r30, 0x42	; 66
     394:	f1 09       	sbc	r31, r1
     396:	e4 33       	cpi	r30, 0x34	; 52
     398:	f1 05       	cpc	r31, r1
     39a:	08 f0       	brcs	.+2      	; 0x39e <moving_manual_mode+0x18>
     39c:	41 c0       	rjmp	.+130    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     39e:	ea 5b       	subi	r30, 0xBA	; 186
     3a0:	ff 4f       	sbci	r31, 0xFF	; 255
     3a2:	ca c6       	rjmp	.+3476   	; 0x1138 <__tablejump2__>
		{
			case 'F':
			case 'f':
				my_car->state = FORWARD;
     3a4:	13 96       	adiw	r26, 0x03	; 3
     3a6:	1c 92       	st	X, r1
     3a8:	1e 92       	st	-X, r1
     3aa:	12 97       	sbiw	r26, 0x02	; 2
				(*my_car).state = FORWARD;
				break;
     3ac:	87 c0       	rjmp	.+270    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
			case 'B':
			case 'b':
				my_car->state = BACKWARD;
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	13 96       	adiw	r26, 0x03	; 3
     3b4:	9c 93       	st	X, r25
     3b6:	8e 93       	st	-X, r24
     3b8:	12 97       	sbiw	r26, 0x02	; 2
				break;
     3ba:	80 c0       	rjmp	.+256    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
			case 'L':
			case 'l':
				my_car->state = TURN_LEFT;
     3bc:	82 e0       	ldi	r24, 0x02	; 2
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	13 96       	adiw	r26, 0x03	; 3
     3c2:	9c 93       	st	X, r25
     3c4:	8e 93       	st	-X, r24
     3c6:	12 97       	sbiw	r26, 0x02	; 2
				break;
     3c8:	79 c0       	rjmp	.+242    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
			case 'R':
			case 'r':
				my_car->state = TURN_RIGHT;
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	13 96       	adiw	r26, 0x03	; 3
     3d0:	9c 93       	st	X, r25
     3d2:	8e 93       	st	-X, r24
     3d4:	12 97       	sbiw	r26, 0x02	; 2
				break;
     3d6:	72 c0       	rjmp	.+228    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
			case 'U':
			case 'u':
				(my_car->speed)++;
				my_car->speed = (my_car->speed >= SPEED_BOUNDARY_NUM) ? SPEED_BOUNDARY_NUM - 1 : my_car->speed;
     3d8:	14 96       	adiw	r26, 0x04	; 4
     3da:	8d 91       	ld	r24, X+
     3dc:	9c 91       	ld	r25, X
     3de:	15 97       	sbiw	r26, 0x05	; 5
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	8a 30       	cpi	r24, 0x0A	; 10
     3e4:	91 05       	cpc	r25, r1
     3e6:	14 f0       	brlt	.+4      	; 0x3ec <moving_manual_mode+0x66>
     3e8:	89 e0       	ldi	r24, 0x09	; 9
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	15 96       	adiw	r26, 0x05	; 5
     3ee:	9c 93       	st	X, r25
     3f0:	8e 93       	st	-X, r24
     3f2:	14 97       	sbiw	r26, 0x04	; 4
				bt_data = pre_bt_data;
     3f4:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <pre_bt_data>
     3f8:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <bt_data>
				break;
     3fc:	20 c0       	rjmp	.+64     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			case 'D':
			case 'd':
				(my_car->speed)--;
				my_car->speed = (my_car->speed < 0) ? 0 : my_car->speed;
     3fe:	14 96       	adiw	r26, 0x04	; 4
     400:	8d 91       	ld	r24, X+
     402:	9c 91       	ld	r25, X
     404:	15 97       	sbiw	r26, 0x05	; 5
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	12 f4       	brpl	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	15 96       	adiw	r26, 0x05	; 5
     410:	9c 93       	st	X, r25
     412:	8e 93       	st	-X, r24
     414:	14 97       	sbiw	r26, 0x04	; 4
				bt_data = pre_bt_data;
     416:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <pre_bt_data>
     41a:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <bt_data>
				break;
     41e:	0f c0       	rjmp	.+30     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			default:
				my_car->state = STOP;
     420:	84 e0       	ldi	r24, 0x04	; 4
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	13 96       	adiw	r26, 0x03	; 3
     426:	9c 93       	st	X, r25
     428:	8e 93       	st	-X, r24
     42a:	12 97       	sbiw	r26, 0x02	; 2
		}
		
		my_car->fnd_char = fnd_fonts[my_car->state];
     42c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_start+0x8>
     430:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_start+0x9>
     434:	1b 96       	adiw	r26, 0x0b	; 11
     436:	9c 93       	st	X, r25
     438:	8e 93       	st	-X, r24
     43a:	1a 97       	sbiw	r26, 0x0a	; 10
     43c:	21 c0       	rjmp	.+66     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     43e:	12 96       	adiw	r26, 0x02	; 2
     440:	2d 91       	ld	r18, X+
     442:	3c 91       	ld	r19, X
     444:	13 97       	sbiw	r26, 0x03	; 3
     446:	f9 01       	movw	r30, r18
     448:	ee 0f       	add	r30, r30
     44a:	ff 1f       	adc	r31, r31
     44c:	e0 50       	subi	r30, 0x00	; 0
     44e:	ff 4f       	sbci	r31, 0xFF	; 255
     450:	80 81       	ld	r24, Z
     452:	91 81       	ldd	r25, Z+1	; 0x01
     454:	1b 96       	adiw	r26, 0x0b	; 11
     456:	9c 93       	st	X, r25
     458:	8e 93       	st	-X, r24
     45a:	1a 97       	sbiw	r26, 0x0a	; 10
		if(my_car->state != STOP)
     45c:	24 30       	cpi	r18, 0x04	; 4
     45e:	31 05       	cpc	r19, r1
     460:	79 f0       	breq	.+30     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		{
			my_car->lcd_text_down = lcd_texts[my_car->speed + 2];
     462:	14 96       	adiw	r26, 0x04	; 4
     464:	ed 91       	ld	r30, X+
     466:	fc 91       	ld	r31, X
     468:	15 97       	sbiw	r26, 0x05	; 5
     46a:	ee 0f       	add	r30, r30
     46c:	ff 1f       	adc	r31, r31
     46e:	ee 5e       	subi	r30, 0xEE	; 238
     470:	fe 4f       	sbci	r31, 0xFE	; 254
     472:	80 81       	ld	r24, Z
     474:	91 81       	ldd	r25, Z+1	; 0x01
     476:	19 96       	adiw	r26, 0x09	; 9
     478:	9c 93       	st	X, r25
     47a:	8e 93       	st	-X, r24
     47c:	18 97       	sbiw	r26, 0x08	; 8
     47e:	0a c0       	rjmp	.+20     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
		}else{
			my_car->lcd_text_down = lcd_texts[12];
     480:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <lcd_texts+0x18>
     484:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <lcd_texts+0x19>
     488:	19 96       	adiw	r26, 0x09	; 9
     48a:	9c 93       	st	X, r25
     48c:	8e 93       	st	-X, r24
     48e:	18 97       	sbiw	r26, 0x08	; 8
     490:	24 e0       	ldi	r18, 0x04	; 4
     492:	30 e0       	ldi	r19, 0x00	; 0
		}
		car_move_func[my_car->state](speed_boundarys[my_car->speed]);
     494:	14 96       	adiw	r26, 0x04	; 4
     496:	0d 90       	ld	r0, X+
     498:	bc 91       	ld	r27, X
     49a:	a0 2d       	mov	r26, r0
     49c:	aa 0f       	add	r26, r26
     49e:	bb 1f       	adc	r27, r27
     4a0:	a8 5d       	subi	r26, 0xD8	; 216
     4a2:	be 4f       	sbci	r27, 0xFE	; 254
     4a4:	22 0f       	add	r18, r18
     4a6:	33 1f       	adc	r19, r19
     4a8:	f9 01       	movw	r30, r18
     4aa:	e0 5c       	subi	r30, 0xC0	; 192
     4ac:	fe 4f       	sbci	r31, 0xFE	; 254
     4ae:	01 90       	ld	r0, Z+
     4b0:	f0 81       	ld	r31, Z
     4b2:	e0 2d       	mov	r30, r0
     4b4:	8d 91       	ld	r24, X+
     4b6:	9c 91       	ld	r25, X
     4b8:	09 95       	icall
}
     4ba:	08 95       	ret
				break;
			default:
				my_car->state = STOP;
		}
		
		my_car->fnd_char = fnd_fonts[my_car->state];
     4bc:	12 96       	adiw	r26, 0x02	; 2
     4be:	2d 91       	ld	r18, X+
     4c0:	3c 91       	ld	r19, X
     4c2:	13 97       	sbiw	r26, 0x03	; 3
     4c4:	f9 01       	movw	r30, r18
     4c6:	ee 0f       	add	r30, r30
     4c8:	ff 1f       	adc	r31, r31
     4ca:	e0 50       	subi	r30, 0x00	; 0
     4cc:	ff 4f       	sbci	r31, 0xFF	; 255
     4ce:	80 81       	ld	r24, Z
     4d0:	91 81       	ldd	r25, Z+1	; 0x01
     4d2:	1b 96       	adiw	r26, 0x0b	; 11
     4d4:	9c 93       	st	X, r25
     4d6:	8e 93       	st	-X, r24
     4d8:	1a 97       	sbiw	r26, 0x0a	; 10
     4da:	c3 cf       	rjmp	.-122    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>

000004dc <moving_auto_mode>:
		}
		car_move_func[my_car->state](speed_boundarys[my_car->speed]);
}

void moving_auto_mode(t_car_info *my_car)
{
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	ec 01       	movw	r28, r24
	check_obstacle();
     4e2:	b1 d4       	rcall	.+2402   	; 0xe46 <check_obstacle>
	
	if((obstacle_info[0] && obstacle_info[1] && obstacle_info[2]))
     4e4:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <obstacle_info>
     4e8:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <obstacle_info+0x1>
     4ec:	89 2b       	or	r24, r25
     4ee:	89 f0       	breq	.+34     	; 0x512 <moving_auto_mode+0x36>
     4f0:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <obstacle_info+0x2>
     4f4:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <obstacle_info+0x3>
     4f8:	89 2b       	or	r24, r25
     4fa:	59 f0       	breq	.+22     	; 0x512 <moving_auto_mode+0x36>
     4fc:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <obstacle_info+0x4>
     500:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <obstacle_info+0x5>
     504:	89 2b       	or	r24, r25
     506:	29 f0       	breq	.+10     	; 0x512 <moving_auto_mode+0x36>
	{
		//my_car->state = STOP;
		my_car->state = BACK_RIGHT;
     508:	86 e0       	ldi	r24, 0x06	; 6
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	9b 83       	std	Y+3, r25	; 0x03
     50e:	8a 83       	std	Y+2, r24	; 0x02
     510:	57 c0       	rjmp	.+174    	; 0x5c0 <moving_auto_mode+0xe4>
	}else if(!obstacle_info[0] && obstacle_info[1] && !obstacle_info[2])
     512:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <obstacle_info>
     516:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <obstacle_info+0x1>
     51a:	89 2b       	or	r24, r25
     51c:	a9 f4       	brne	.+42     	; 0x548 <moving_auto_mode+0x6c>
     51e:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <obstacle_info+0x2>
     522:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <obstacle_info+0x3>
     526:	89 2b       	or	r24, r25
     528:	79 f0       	breq	.+30     	; 0x548 <moving_auto_mode+0x6c>
     52a:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <obstacle_info+0x4>
     52e:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <obstacle_info+0x5>
     532:	89 2b       	or	r24, r25
     534:	49 f4       	brne	.+18     	; 0x548 <moving_auto_mode+0x6c>
	{
		my_car->speed = 9;
     536:	89 e0       	ldi	r24, 0x09	; 9
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	9d 83       	std	Y+5, r25	; 0x05
     53c:	8c 83       	std	Y+4, r24	; 0x04
		my_car->state = TURN_RIGHT;
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	9b 83       	std	Y+3, r25	; 0x03
     544:	8a 83       	std	Y+2, r24	; 0x02
     546:	3c c0       	rjmp	.+120    	; 0x5c0 <moving_auto_mode+0xe4>
	}else if((obstacle_info[0] && obstacle_info[1]) || obstacle_info[0])
     548:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <obstacle_info>
     54c:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <obstacle_info+0x1>
     550:	89 2b       	or	r24, r25
     552:	31 f0       	breq	.+12     	; 0x560 <moving_auto_mode+0x84>
     554:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <obstacle_info+0x2>
     558:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <obstacle_info+0x3>
     55c:	89 2b       	or	r24, r25
     55e:	31 f4       	brne	.+12     	; 0x56c <moving_auto_mode+0x90>
     560:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <obstacle_info>
     564:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <obstacle_info+0x1>
     568:	89 2b       	or	r24, r25
     56a:	49 f0       	breq	.+18     	; 0x57e <moving_auto_mode+0xa2>
	{
		my_car->speed = 9;
     56c:	89 e0       	ldi	r24, 0x09	; 9
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	9d 83       	std	Y+5, r25	; 0x05
     572:	8c 83       	std	Y+4, r24	; 0x04
		my_car->state = TURN_RIGHT;
     574:	83 e0       	ldi	r24, 0x03	; 3
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	9b 83       	std	Y+3, r25	; 0x03
     57a:	8a 83       	std	Y+2, r24	; 0x02
     57c:	21 c0       	rjmp	.+66     	; 0x5c0 <moving_auto_mode+0xe4>
	}else if((obstacle_info[1] && obstacle_info[2]) || obstacle_info[2])
     57e:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <obstacle_info+0x2>
     582:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <obstacle_info+0x3>
     586:	89 2b       	or	r24, r25
     588:	31 f0       	breq	.+12     	; 0x596 <moving_auto_mode+0xba>
     58a:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <obstacle_info+0x4>
     58e:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <obstacle_info+0x5>
     592:	89 2b       	or	r24, r25
     594:	31 f4       	brne	.+12     	; 0x5a2 <moving_auto_mode+0xc6>
     596:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <obstacle_info+0x4>
     59a:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <obstacle_info+0x5>
     59e:	89 2b       	or	r24, r25
     5a0:	49 f0       	breq	.+18     	; 0x5b4 <moving_auto_mode+0xd8>
	{
		my_car->speed = 9;
     5a2:	89 e0       	ldi	r24, 0x09	; 9
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	9d 83       	std	Y+5, r25	; 0x05
     5a8:	8c 83       	std	Y+4, r24	; 0x04
		my_car->state = TURN_LEFT;
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	9b 83       	std	Y+3, r25	; 0x03
     5b0:	8a 83       	std	Y+2, r24	; 0x02
     5b2:	06 c0       	rjmp	.+12     	; 0x5c0 <moving_auto_mode+0xe4>
	}else{
		my_car->speed = 2;
     5b4:	82 e0       	ldi	r24, 0x02	; 2
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	9d 83       	std	Y+5, r25	; 0x05
     5ba:	8c 83       	std	Y+4, r24	; 0x04
		my_car->state = FORWARD;
     5bc:	1b 82       	std	Y+3, r1	; 0x03
     5be:	1a 82       	std	Y+2, r1	; 0x02
	}
	
	my_car->fnd_char = fnd_fonts[my_car->state];
     5c0:	2a 81       	ldd	r18, Y+2	; 0x02
     5c2:	3b 81       	ldd	r19, Y+3	; 0x03
     5c4:	22 0f       	add	r18, r18
     5c6:	33 1f       	adc	r19, r19
     5c8:	f9 01       	movw	r30, r18
     5ca:	e0 50       	subi	r30, 0x00	; 0
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	80 81       	ld	r24, Z
     5d0:	91 81       	ldd	r25, Z+1	; 0x01
     5d2:	9b 87       	std	Y+11, r25	; 0x0b
     5d4:	8a 87       	std	Y+10, r24	; 0x0a
	if(my_car->state != STOP)
	{
		my_car->lcd_text_down = lcd_texts[my_car->speed + 2];
     5d6:	8c 81       	ldd	r24, Y+4	; 0x04
     5d8:	9d 81       	ldd	r25, Y+5	; 0x05
     5da:	fc 01       	movw	r30, r24
     5dc:	ee 0f       	add	r30, r30
     5de:	ff 1f       	adc	r31, r31
     5e0:	ee 5e       	subi	r30, 0xEE	; 238
     5e2:	fe 4f       	sbci	r31, 0xFE	; 254
     5e4:	40 81       	ld	r20, Z
     5e6:	51 81       	ldd	r21, Z+1	; 0x01
     5e8:	59 87       	std	Y+9, r21	; 0x09
     5ea:	48 87       	std	Y+8, r20	; 0x08
	}else{
		my_car->lcd_text_down = lcd_texts[12];
	}
	
	car_move_func[my_car->state](speed_boundarys[my_car->speed]);
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	dc 01       	movw	r26, r24
     5f2:	a8 5d       	subi	r26, 0xD8	; 216
     5f4:	be 4f       	sbci	r27, 0xFE	; 254
     5f6:	f9 01       	movw	r30, r18
     5f8:	e0 5c       	subi	r30, 0xC0	; 192
     5fa:	fe 4f       	sbci	r31, 0xFE	; 254
     5fc:	01 90       	ld	r0, Z+
     5fe:	f0 81       	ld	r31, Z
     600:	e0 2d       	mov	r30, r0
     602:	8d 91       	ld	r24, X+
     604:	9c 91       	ld	r25, X
     606:	09 95       	icall
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret

0000060e <__vector_16>:
	0x83,	// b
	0x83	// b
};

ISR(TIMER0_OVF_vect)
{
     60e:	1f 92       	push	r1
     610:	0f 92       	push	r0
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	0f 92       	push	r0
     616:	11 24       	eor	r1, r1
     618:	8f 93       	push	r24
     61a:	9f 93       	push	r25
	TCNT0 = 6; // 6 ~ 256으로 돌리기 위해
     61c:	86 e0       	ldi	r24, 0x06	; 6
     61e:	82 bf       	out	0x32, r24	; 50
	msec_count++;
     620:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <msec_count>
     624:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <msec_count+0x1>
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <msec_count+0x1>
     62e:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <msec_count>
	
	monitor_shoot = 1;
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <monitor_shoot+0x1>
     63a:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <monitor_shoot>
}
     63e:	9f 91       	pop	r25
     640:	8f 91       	pop	r24
     642:	0f 90       	pop	r0
     644:	0f be       	out	0x3f, r0	; 63
     646:	0f 90       	pop	r0
     648:	1f 90       	pop	r1
     64a:	18 95       	reti

0000064c <init_timer0>:
    }
}

void init_timer0(void)
{
	TCNT0 = 6;
     64c:	86 e0       	ldi	r24, 0x06	; 6
     64e:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     650:	83 b7       	in	r24, 0x33	; 51
     652:	84 60       	ori	r24, 0x04	; 4
     654:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
     656:	87 b7       	in	r24, 0x37	; 55
     658:	81 60       	ori	r24, 0x01	; 1
     65a:	87 bf       	out	0x37, r24	; 55
     65c:	08 95       	ret

0000065e <main>:
	
	monitor_shoot = 1;
}

int main(void)
{
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	2c 97       	sbiw	r28, 0x0c	; 12
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	de bf       	out	0x3e, r29	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	cd bf       	out	0x3d, r28	; 61
	// TODO
    // 각종 초기화
	init_timer0();
     672:	ec df       	rcall	.-40     	; 0x64c <init_timer0>
	init_timer1();
     674:	bf d0       	rcall	.+382    	; 0x7f4 <init_timer1>
	init_L298N();
     676:	cf d0       	rcall	.+414    	; 0x816 <init_L298N>
	init_uart1();
     678:	de d1       	rcall	.+956    	; 0xa36 <init_uart1>
	init_uart0();
     67a:	af d1       	rcall	.+862    	; 0x9da <init_uart0>
	init_ultrasonic();
     67c:	d1 d3       	rcall	.+1954   	; 0xe20 <init_ultrasonic>
     67e:	59 dd       	rcall	.-1358   	; 0x132 <init_button>
	init_button();
     680:	3b de       	rcall	.-906    	; 0x2f8 <I2C_LCD_init>
     682:	99 dd       	rcall	.-1230   	; 0x1b6 <init_fnd>
	I2C_LCD_init();
     684:	78 94       	sei
     686:	8e e4       	ldi	r24, 0x4E	; 78
	init_fnd();
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	90 93 a6 03 	sts	0x03A6, r25	; 0x8003a6 <__iob+0x3>
	sei();
	stdout = &OUTPUT;
     68e:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <__iob+0x2>
     692:	1a 82       	std	Y+2, r1	; 0x02
     694:	19 82       	std	Y+1, r1	; 0x01
     696:	84 e0       	ldi	r24, 0x04	; 4
     698:	90 e0       	ldi	r25, 0x00	; 0
	
	t_car_info my_car;
	my_car.mode = MANUAL_MODE;
     69a:	9c 83       	std	Y+4, r25	; 0x04
     69c:	8b 83       	std	Y+3, r24	; 0x03
	my_car.state = STOP;
     69e:	83 e0       	ldi	r24, 0x03	; 3
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	9e 83       	std	Y+6, r25	; 0x06
     6a4:	8d 83       	std	Y+5, r24	; 0x05
	my_car.speed = 3;
     6a6:	ee e0       	ldi	r30, 0x0E	; 14
     6a8:	f1 e0       	ldi	r31, 0x01	; 1
     6aa:	80 81       	ld	r24, Z
     6ac:	91 81       	ldd	r25, Z+1	; 0x01
	my_car.lcd_text_up = lcd_texts[0];
     6ae:	98 87       	std	Y+8, r25	; 0x08
     6b0:	8f 83       	std	Y+7, r24	; 0x07
     6b2:	82 85       	ldd	r24, Z+10	; 0x0a
     6b4:	93 85       	ldd	r25, Z+11	; 0x0b
     6b6:	9a 87       	std	Y+10, r25	; 0x0a
     6b8:	89 87       	std	Y+9, r24	; 0x09
	my_car.lcd_text_down = lcd_texts[my_car.speed + 2];
     6ba:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_start+0x8>
     6be:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_start+0x9>
	my_car.fnd_char = fnd_fonts[STOP];
     6c2:	9c 87       	std	Y+12, r25	; 0x0c
     6c4:	8b 87       	std	Y+11, r24	; 0x0b
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	b6 d0       	rcall	.+364    	; 0x838 <motor_stop>
	
	motor_stop(0);
     6cc:	0f 2e       	mov	r0, r31
     6ce:	f4 e6       	ldi	r31, 0x64	; 100
     6d0:	cf 2e       	mov	r12, r31
     6d2:	d1 2c       	mov	r13, r1
		
		if(monitor_shoot)
		{
			monitor_shoot = 0;
			fnd_display_0(my_car.fnd_char);
			if(msec_count % 100 == 0)
     6d4:	f0 2d       	mov	r31, r0
     6d6:	0e e0       	ldi	r16, 0x0E	; 14
     6d8:	11 e0       	ldi	r17, 0x01	; 1
     6da:	0f 2e       	mov	r0, r31
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
			{
				bt_data = 0;
				my_car.mode = MANUAL_MODE;
				my_car.state = STOP;
				my_car.speed = 3;
				my_car.lcd_text_up = lcd_texts[0];
     6de:	ef 2e       	mov	r14, r31
     6e0:	f1 e0       	ldi	r31, 0x01	; 1
				my_car.lcd_text_down = lcd_texts[12];
				my_car.fnd_char = fnd_fonts[STOP];
     6e2:	ff 2e       	mov	r15, r31
     6e4:	f0 2d       	mov	r31, r0
     6e6:	68 94       	set
     6e8:	88 24       	eor	r8, r8
     6ea:	81 f8       	bld	r8, 1
     6ec:	91 2c       	mov	r9, r1
		{
			if(my_car.mode == MANUAL_MODE)
			{
				my_car.mode = AUTO_MODE;
				my_car.state = FORWARD;
				my_car.speed = 2;
     6ee:	68 94       	set
     6f0:	66 24       	eor	r6, r6
     6f2:	62 f8       	bld	r6, 2
     6f4:	71 2c       	mov	r7, r1
				my_car.fnd_char = fnd_fonts[FORWARD];
			}else if(my_car.mode == AUTO_MODE)
			{
				bt_data = 0;
				my_car.mode = MANUAL_MODE;
				my_car.state = STOP;
     6f6:	aa 24       	eor	r10, r10
     6f8:	a3 94       	inc	r10
     6fa:	b1 2c       	mov	r11, r1
     6fc:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <monitor_shoot>
		
		if(get_button(BUTTON0, BUTTON0PIN))
		{
			if(my_car.mode == MANUAL_MODE)
			{
				my_car.mode = AUTO_MODE;
     700:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <monitor_shoot+0x1>
		// LED 제어하기
		// LCD 제어하기
		// FND 제어하기
		// 부저 제어하기
		
		if(monitor_shoot)
     704:	89 2b       	or	r24, r25
     706:	d1 f0       	breq	.+52     	; 0x73c <main+0xde>
     708:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <monitor_shoot+0x1>
     70c:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <monitor_shoot>
		{
			monitor_shoot = 0;
     710:	8b 85       	ldd	r24, Y+11	; 0x0b
     712:	9c 85       	ldd	r25, Y+12	; 0x0c
			fnd_display_0(my_car.fnd_char);
     714:	57 dd       	rcall	.-1362   	; 0x1c4 <fnd_display_0>
     716:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <msec_count>
			if(msec_count % 100 == 0)
     71a:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <msec_count+0x1>
     71e:	b6 01       	movw	r22, r12
     720:	f8 d4       	rcall	.+2544   	; 0x1112 <__divmodhi4>
     722:	89 2b       	or	r24, r25
     724:	59 f4       	brne	.+22     	; 0x73c <main+0xde>
     726:	df dd       	rcall	.-1090   	; 0x2e6 <I2C_LCD_clear>
			{
				I2C_LCD_clear();
     728:	4f 81       	ldd	r20, Y+7	; 0x07
     72a:	58 85       	ldd	r21, Y+8	; 0x08
				I2C_LCD_write_string_XY(0,0,my_car.lcd_text_up);
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	21 de       	rcall	.-958    	; 0x374 <I2C_LCD_write_string_XY>
     732:	49 85       	ldd	r20, Y+9	; 0x09
     734:	5a 85       	ldd	r21, Y+10	; 0x0a
				I2C_LCD_write_string_XY(1,0,my_car.lcd_text_down);
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	1c de       	rcall	.-968    	; 0x374 <I2C_LCD_write_string_XY>
     73c:	63 e0       	ldi	r22, 0x03	; 3
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	80 e0       	ldi	r24, 0x00	; 0
			}
			
		}
		
		if(get_button(BUTTON0, BUTTON0PIN))
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	f8 dc       	rcall	.-1552   	; 0x136 <get_button>
     746:	89 2b       	or	r24, r25
     748:	99 f1       	breq	.+102    	; 0x7b0 <main+0x152>
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	9a 81       	ldd	r25, Y+2	; 0x02
     74e:	00 97       	sbiw	r24, 0x00	; 0
     750:	a9 f4       	brne	.+42     	; 0x77c <main+0x11e>
		{
			if(my_car.mode == MANUAL_MODE)
     752:	ba 82       	std	Y+2, r11	; 0x02
     754:	a9 82       	std	Y+1, r10	; 0x01
     756:	1c 82       	std	Y+4, r1	; 0x04
     758:	1b 82       	std	Y+3, r1	; 0x03
			{
				my_car.mode = AUTO_MODE;
     75a:	9e 82       	std	Y+6, r9	; 0x06
     75c:	8d 82       	std	Y+5, r8	; 0x05
				my_car.state = FORWARD;
     75e:	f8 01       	movw	r30, r16
     760:	82 81       	ldd	r24, Z+2	; 0x02
				my_car.speed = 2;
     762:	93 81       	ldd	r25, Z+3	; 0x03
     764:	98 87       	std	Y+8, r25	; 0x08
				my_car.lcd_text_up = lcd_texts[1];
     766:	8f 83       	std	Y+7, r24	; 0x07
     768:	86 81       	ldd	r24, Z+6	; 0x06
     76a:	97 81       	ldd	r25, Z+7	; 0x07
     76c:	9a 87       	std	Y+10, r25	; 0x0a
     76e:	89 87       	std	Y+9, r24	; 0x09
				my_car.lcd_text_down = lcd_texts[3];
     770:	f7 01       	movw	r30, r14
     772:	80 81       	ld	r24, Z
     774:	91 81       	ldd	r25, Z+1	; 0x01
     776:	9c 87       	std	Y+12, r25	; 0x0c
				my_car.fnd_char = fnd_fonts[FORWARD];
     778:	8b 87       	std	Y+11, r24	; 0x0b
     77a:	1a c0       	rjmp	.+52     	; 0x7b0 <main+0x152>
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	c1 f4       	brne	.+48     	; 0x7b0 <main+0x152>
     780:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <bt_data>
			}else if(my_car.mode == AUTO_MODE)
     784:	1a 82       	std	Y+2, r1	; 0x02
     786:	19 82       	std	Y+1, r1	; 0x01
			{
				bt_data = 0;
     788:	7c 82       	std	Y+4, r7	; 0x04
     78a:	6b 82       	std	Y+3, r6	; 0x03
				my_car.mode = MANUAL_MODE;
     78c:	83 e0       	ldi	r24, 0x03	; 3
     78e:	90 e0       	ldi	r25, 0x00	; 0
				my_car.state = STOP;
     790:	9e 83       	std	Y+6, r25	; 0x06
     792:	8d 83       	std	Y+5, r24	; 0x05
				my_car.speed = 3;
     794:	f8 01       	movw	r30, r16
     796:	80 81       	ld	r24, Z
     798:	91 81       	ldd	r25, Z+1	; 0x01
     79a:	98 87       	std	Y+8, r25	; 0x08
				my_car.lcd_text_up = lcd_texts[0];
     79c:	8f 83       	std	Y+7, r24	; 0x07
     79e:	80 8d       	ldd	r24, Z+24	; 0x18
     7a0:	91 8d       	ldd	r25, Z+25	; 0x19
     7a2:	9a 87       	std	Y+10, r25	; 0x0a
     7a4:	89 87       	std	Y+9, r24	; 0x09
				my_car.lcd_text_down = lcd_texts[12];
     7a6:	f7 01       	movw	r30, r14
     7a8:	80 85       	ldd	r24, Z+8	; 0x08
     7aa:	91 85       	ldd	r25, Z+9	; 0x09
     7ac:	9c 87       	std	Y+12, r25	; 0x0c
				my_car.fnd_char = fnd_fonts[STOP];
     7ae:	8b 87       	std	Y+11, r24	; 0x0b
     7b0:	e9 81       	ldd	r30, Y+1	; 0x01
     7b2:	fa 81       	ldd	r31, Y+2	; 0x02
     7b4:	ee 0f       	add	r30, r30
     7b6:	ff 1f       	adc	r31, r31
			}
			
		}
		
		car_program_modes[my_car.mode](&my_car);
     7b8:	e4 5c       	subi	r30, 0xC4	; 196
     7ba:	fe 4f       	sbci	r31, 0xFE	; 254
     7bc:	01 90       	ld	r0, Z+
     7be:	f0 81       	ld	r31, Z
     7c0:	e0 2d       	mov	r30, r0
     7c2:	ce 01       	movw	r24, r28
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	09 95       	icall
     7c8:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <msec_count>
     7cc:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <msec_count+0x1>
		
		if(msec_count > 1000)
     7d0:	89 3e       	cpi	r24, 0xE9	; 233
     7d2:	93 40       	sbci	r25, 0x03	; 3
     7d4:	0c f4       	brge	.+2      	; 0x7d8 <main+0x17a>
     7d6:	92 cf       	rjmp	.-220    	; 0x6fc <main+0x9e>
     7d8:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <msec_count+0x1>
     7dc:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <msec_count>
		{
			msec_count = 0;
     7e0:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <sec_count>
     7e4:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <sec_count+0x1>
			sec_count++;
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <sec_count+0x1>
     7ee:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <sec_count>
     7f2:	84 cf       	rjmp	.-248    	; 0x6fc <main+0x9e>

000007f4 <init_timer1>:


void init_timer1(void)
{
	// 분주비 설정 (64)
	TCCR1B |= 0 << CS12 | 1 << CS11 | 1 << CS10;
     7f4:	8e b5       	in	r24, 0x2e	; 46
     7f6:	83 60       	ori	r24, 0x03	; 3
     7f8:	8e bd       	out	0x2e, r24	; 46
	
	// 모드설정 : 14번 (ICR1이 TOP인 고속 PWM)
	TCCR1A |= 0 << WGM10 | 1 << WGM11;
     7fa:	8f b5       	in	r24, 0x2f	; 47
     7fc:	82 60       	ori	r24, 0x02	; 2
     7fe:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << WGM12 | 1 << WGM13;
     800:	8e b5       	in	r24, 0x2e	; 46
     802:	88 61       	ori	r24, 0x18	; 24
     804:	8e bd       	out	0x2e, r24	; 46
	
	// 비반전 모드 (TOP : ICR1레지스터)
	TCCR1A |= 1 << COM1A1 | 1 << COM1B1;
     806:	8f b5       	in	r24, 0x2f	; 47
     808:	80 6a       	ori	r24, 0xA0	; 160
     80a:	8f bd       	out	0x2f, r24	; 47
	
	// ICR1레지스터 설정 (TOP 1023으로 설정, TOP까지 4ms로 설정함)
	ICR1 = 0x3ff;
     80c:	8f ef       	ldi	r24, 0xFF	; 255
     80e:	93 e0       	ldi	r25, 0x03	; 3
     810:	97 bd       	out	0x27, r25	; 39
     812:	86 bd       	out	0x26, r24	; 38
     814:	08 95       	ret

00000816 <init_L298N>:
}

void init_L298N(void)
{
	// DDR 출력모드 (PWM, 방향)
	MOTOR_PWM_DDR |= 1 << MOTOR_LEFT_PORT_DDR_NUM | 1 << MOTOR_RIGHT_PORT_DDR_NUM;
     816:	87 b3       	in	r24, 0x17	; 23
     818:	80 66       	ori	r24, 0x60	; 96
     81a:	87 bb       	out	0x17, r24	; 23
	MOTOR_DRIVER_DIRECTION_DDR |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
     81c:	e1 e6       	ldi	r30, 0x61	; 97
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	8f 60       	ori	r24, 0x0F	; 15
     824:	80 83       	st	Z, r24
								  1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM;
	
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
     826:	e2 e6       	ldi	r30, 0x62	; 98
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	80 7f       	andi	r24, 0xF0	; 240
     82e:	80 83       	st	Z, r24
									 1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
	
	// direction 전진모드 설정 (정회전)
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN3_NUM;
     830:	80 81       	ld	r24, Z
     832:	85 60       	ori	r24, 0x05	; 5
     834:	80 83       	st	Z, r24
     836:	08 95       	ret

00000838 <motor_stop>:

// motor driver IN값을 전부 1로 set한다
void motor_stop(int speed)
{
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
     838:	e2 e6       	ldi	r30, 0x62	; 98
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	80 81       	ld	r24, Z
     83e:	80 7f       	andi	r24, 0xF0	; 240
     840:	80 83       	st	Z, r24
								     1 <<MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
	
	// direction port set
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
     842:	80 81       	ld	r24, Z
     844:	8f 60       	ori	r24, 0x0F	; 15
     846:	80 83       	st	Z, r24
     848:	08 95       	ret

0000084a <motor_direction_forward>:
								   1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM;
}

void motor_direction_forward(int speed)
{
     84a:	9c 01       	movw	r18, r24
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
     84c:	e2 e6       	ldi	r30, 0x62	; 98
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	90 81       	ld	r25, Z
     852:	90 7f       	andi	r25, 0xF0	; 240
     854:	90 83       	st	Z, r25
									 1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
		
	// direction 전진모드 설정 (정회전)
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN3_NUM;
     856:	90 81       	ld	r25, Z
     858:	95 60       	ori	r25, 0x05	; 5
     85a:	90 83       	st	Z, r25
	
	// 속도 적용 (양쪽 바퀴에 같은 속도)
	MOTOR_LEFT_PWM = MOTOR_RIGHT_PWM = speed;
     85c:	39 bd       	out	0x29, r19	; 41
     85e:	28 bd       	out	0x28, r18	; 40
     860:	3b bd       	out	0x2b, r19	; 43
     862:	2a bd       	out	0x2a, r18	; 42
     864:	08 95       	ret

00000866 <motor_direction_backward>:
}

void motor_direction_backward(int speed)
{
     866:	9c 01       	movw	r18, r24
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
     868:	e2 e6       	ldi	r30, 0x62	; 98
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	90 81       	ld	r25, Z
     86e:	90 7f       	andi	r25, 0xF0	; 240
     870:	90 83       	st	Z, r25
									 1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
		
	// direction 후진모드 설정 (역회전)
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN2_NUM | 1 << MOTOR_DRIVER_IN4_NUM;
     872:	90 81       	ld	r25, Z
     874:	9a 60       	ori	r25, 0x0A	; 10
     876:	90 83       	st	Z, r25
	
	// 속도 적용 (양쪽 바퀴에 같은 속도)
	MOTOR_LEFT_PWM = MOTOR_RIGHT_PWM = speed;
     878:	39 bd       	out	0x29, r19	; 41
     87a:	28 bd       	out	0x28, r18	; 40
     87c:	3b bd       	out	0x2b, r19	; 43
     87e:	2a bd       	out	0x2a, r18	; 42
     880:	08 95       	ret

00000882 <motor_turn_left>:
}

void motor_turn_left(int speed)
{
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	ec 01       	movw	r28, r24
	motor_direction_forward(0); // 전진모드 설정
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	de df       	rcall	.-68     	; 0x84a <motor_direction_forward>
	
	MOTOR_LEFT_PWM = 0;
     88e:	1b bc       	out	0x2b, r1	; 43
     890:	1a bc       	out	0x2a, r1	; 42
	MOTOR_RIGHT_PWM = speed;
     892:	d9 bd       	out	0x29, r29	; 41
     894:	c8 bd       	out	0x28, r28	; 40
}
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <motor_turn_right>:

void motor_turn_right(int speed)
{
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	ec 01       	movw	r28, r24
	motor_direction_forward(0); // 전진모드 설정
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	d1 df       	rcall	.-94     	; 0x84a <motor_direction_forward>
	MOTOR_LEFT_PWM = speed;
     8a8:	db bd       	out	0x2b, r29	; 43
     8aa:	ca bd       	out	0x2a, r28	; 42
	MOTOR_RIGHT_PWM = 0;
     8ac:	19 bc       	out	0x29, r1	; 41
     8ae:	18 bc       	out	0x28, r1	; 40
}
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <motor_backward_left>:

void motor_backward_left(int speed)
{
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	motor_direction_backward(0); // 후진모드
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	d2 df       	rcall	.-92     	; 0x866 <motor_direction_backward>
	MOTOR_LEFT_PWM = 0;
     8c2:	1b bc       	out	0x2b, r1	; 43
     8c4:	1a bc       	out	0x2a, r1	; 42
	MOTOR_RIGHT_PWM = speed;
     8c6:	d9 bd       	out	0x29, r29	; 41
     8c8:	c8 bd       	out	0x28, r28	; 40
}
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <motor_backward_right>:

void motor_backward_right(int speed)
{
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	ec 01       	movw	r28, r24
	motor_direction_backward(0);
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	c5 df       	rcall	.-118    	; 0x866 <motor_direction_backward>
	MOTOR_LEFT_PWM = speed;
     8dc:	db bd       	out	0x2b, r29	; 43
     8de:	ca bd       	out	0x2a, r28	; 42
	MOTOR_RIGHT_PWM = 0;
     8e0:	19 bc       	out	0x29, r1	; 41
     8e2:	18 bc       	out	0x28, r1	; 40
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <__vector_18>:
PC omportmaster로 부터 1byte가 들어오면 (즉, stop bit가 감지되면) RX complete인터럽트가 호출된다
== 한 바이트마다 인터럽트 처리를 해야하는것!
*/

ISR(USART0_RX_vect)
{
     8ea:	1f 92       	push	r1
     8ec:	0f 92       	push	r0
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	0f 92       	push	r0
     8f2:	11 24       	eor	r1, r1
     8f4:	0b b6       	in	r0, 0x3b	; 59
     8f6:	0f 92       	push	r0
     8f8:	2f 93       	push	r18
     8fa:	3f 93       	push	r19
     8fc:	4f 93       	push	r20
     8fe:	5f 93       	push	r21
     900:	6f 93       	push	r22
     902:	7f 93       	push	r23
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
     908:	af 93       	push	r26
     90a:	bf 93       	push	r27
     90c:	ef 93       	push	r30
     90e:	ff 93       	push	r31
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	1f 92       	push	r1
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t rx_data;
	volatile static int i = 0;	// buffer의 index
	
	rx_data = UDR0; // uart0 하드웨어로 들어온 문자 읽어오기
     91a:	8c b1       	in	r24, 0x0c	; 12
     91c:	89 83       	std	Y+1, r24	; 0x01
					// 이렇게 assign연산자로 UDR0값을 읽어오는 순간, UDR0는 empty가됨 (자동)
	
	if(rx_data == '\n')
     91e:	89 81       	ldd	r24, Y+1	; 0x01
     920:	8a 30       	cpi	r24, 0x0A	; 10
     922:	49 f5       	brne	.+82     	; 0x976 <__vector_18+0x8c>
	{
		rx_buff[rear++][i] = 0; // 문장의 끝은 항상 0
     924:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <rear>
     928:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <rear+0x1>
     92c:	c9 01       	movw	r24, r18
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <rear+0x1>
     934:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <rear>
     938:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <i.2087>
     93c:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <i.2087+0x1>
     940:	48 e2       	ldi	r20, 0x28	; 40
     942:	42 9f       	mul	r20, r18
     944:	f0 01       	movw	r30, r0
     946:	43 9f       	mul	r20, r19
     948:	f0 0d       	add	r31, r0
     94a:	11 24       	eor	r1, r1
     94c:	ef 5e       	subi	r30, 0xEF	; 239
     94e:	fd 4f       	sbci	r31, 0xFD	; 253
     950:	e8 0f       	add	r30, r24
     952:	f9 1f       	adc	r31, r25
     954:	10 82       	st	Z, r1
		rear %= COMMAND_NUMBER; // 원형큐
     956:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <rear>
     95a:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <rear+0x1>
     95e:	6a e0       	ldi	r22, 0x0A	; 10
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	d7 d3       	rcall	.+1966   	; 0x1112 <__divmodhi4>
     964:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <rear+0x1>
     968:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <rear>
		i = 0; // 새로오는건 버퍼에 새롭게 채워야함 (다른 메시지니까!)
     96c:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <i.2087+0x1>
     970:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <i.2087>
     974:	1c c0       	rjmp	.+56     	; 0x9ae <__vector_18+0xc4>
		// 큐 full 여부 확인
	}
	else
	{
		// 그냥 버퍼에 넣기 (push)
		rx_buff[rear][i++] = rx_data;
     976:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <rear>
     97a:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <rear+0x1>
     97e:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <i.2087>
     982:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <i.2087+0x1>
     986:	9c 01       	movw	r18, r24
     988:	2f 5f       	subi	r18, 0xFF	; 255
     98a:	3f 4f       	sbci	r19, 0xFF	; 255
     98c:	30 93 fa 01 	sts	0x01FA, r19	; 0x8001fa <i.2087+0x1>
     990:	20 93 f9 01 	sts	0x01F9, r18	; 0x8001f9 <i.2087>
     994:	49 81       	ldd	r20, Y+1	; 0x01
     996:	58 e2       	ldi	r21, 0x28	; 40
     998:	56 9f       	mul	r21, r22
     99a:	90 01       	movw	r18, r0
     99c:	57 9f       	mul	r21, r23
     99e:	30 0d       	add	r19, r0
     9a0:	11 24       	eor	r1, r1
     9a2:	2f 5e       	subi	r18, 0xEF	; 239
     9a4:	3d 4f       	sbci	r19, 0xFD	; 253
     9a6:	f9 01       	movw	r30, r18
     9a8:	e8 0f       	add	r30, r24
     9aa:	f9 1f       	adc	r31, r25
     9ac:	40 83       	st	Z, r20
		// command length 확인
	}
}
     9ae:	0f 90       	pop	r0
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	ff 91       	pop	r31
     9b6:	ef 91       	pop	r30
     9b8:	bf 91       	pop	r27
     9ba:	af 91       	pop	r26
     9bc:	9f 91       	pop	r25
     9be:	8f 91       	pop	r24
     9c0:	7f 91       	pop	r23
     9c2:	6f 91       	pop	r22
     9c4:	5f 91       	pop	r21
     9c6:	4f 91       	pop	r20
     9c8:	3f 91       	pop	r19
     9ca:	2f 91       	pop	r18
     9cc:	0f 90       	pop	r0
     9ce:	0b be       	out	0x3b, r0	; 59
     9d0:	0f 90       	pop	r0
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	0f 90       	pop	r0
     9d6:	1f 90       	pop	r1
     9d8:	18 95       	reti

000009da <init_uart0>:

*/
void init_uart0(void)
{
	// 전송속도 설정
	UBRR0H = 0x00;
     9da:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207; // 2배속 모드임
     9de:	8f ec       	ldi	r24, 0xCF	; 207
     9e0:	89 b9       	out	0x09, r24	; 9
	//UBRR0L = 16;
	//UBRR0L = 832;
	
	UCSR0A |= 1 << U2X0; // 2배속 통신
     9e2:	59 9a       	sbi	0x0b, 1	; 11
	
	UCSR0C |= 0x06; // 비동기, none 8bit, data 8 bit
     9e4:	e5 e9       	ldi	r30, 0x95	; 149
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	80 81       	ld	r24, Z
     9ea:	86 60       	ori	r24, 0x06	; 6
     9ec:	80 83       	st	Z, r24
	
	// 인터럽트, uart 기능 설정
	//UCSR0B |= 1 << RXEN0; // 수신 허용
	//UCSR0B |= 1 << TXEN0; // 송신 허용
	//UCSR0B |= 1 << RXCIE0; // 수신 인터럽트 허용
	UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     9ee:	8a b1       	in	r24, 0x0a	; 10
     9f0:	88 69       	ori	r24, 0x98	; 152
     9f2:	8a b9       	out	0x0a, r24	; 10
	
	rear = front = 0;
     9f4:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <front+0x1>
     9f8:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <front>
     9fc:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <rear+0x1>
     a00:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <rear>
     a04:	08 95       	ret

00000a06 <UART0_transmit>:

void UART0_transmit(uint8_t data)
{
	// 데이터가 전송중이면, 끝날때까지 기다려야함
	// == 레지스터가 비었는지 안비었는지 확인해양함
	while(!(UCSR0A & 1 << UDRE0)) ; // 버퍼가 비어있을때까지 여기서 무한대기
     a06:	5d 9b       	sbis	0x0b, 5	; 11
     a08:	fe cf       	rjmp	.-4      	; 0xa06 <UART0_transmit>
	
	UDR0 = data; // data를 h/w에 전송
     a0a:	8c b9       	out	0x0c, r24	; 12
     a0c:	08 95       	ret

00000a0e <__vector_30>:
#include "uart1.h"

volatile uint8_t pre_bt_data = 0;
volatile uint8_t bt_data = 0; // 명령어
ISR(USART1_RX_vect)
{
     a0e:	1f 92       	push	r1
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	0f 92       	push	r0
     a16:	11 24       	eor	r1, r1
     a18:	8f 93       	push	r24
	pre_bt_data = bt_data;
     a1a:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <bt_data>
     a1e:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <pre_bt_data>
	bt_data = UDR1;
     a22:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     a26:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <bt_data>
}
     a2a:	8f 91       	pop	r24
     a2c:	0f 90       	pop	r0
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	0f 90       	pop	r0
     a32:	1f 90       	pop	r1
     a34:	18 95       	reti

00000a36 <init_uart1>:

void init_uart1(void)
{
	// 전송속도 설정
	UBRR1H = 0x00;
     a36:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207; // 2배속 모드임
     a3a:	8f ec       	ldi	r24, 0xCF	; 207
     a3c:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>

	UCSR1A |= 1 << U2X1; // 2배속 통신
     a40:	eb e9       	ldi	r30, 0x9B	; 155
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 81       	ld	r24, Z
     a46:	82 60       	ori	r24, 0x02	; 2
     a48:	80 83       	st	Z, r24
	
	UCSR1C |= 0x06; // 비동기, none 8bit, data 8 bit
     a4a:	ed e9       	ldi	r30, 0x9D	; 157
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	86 60       	ori	r24, 0x06	; 6
     a52:	80 83       	st	Z, r24
	
	// 인터럽트, uart 기능 설정
	UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
     a54:	ea e9       	ldi	r30, 0x9A	; 154
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	88 69       	ori	r24, 0x98	; 152
     a5c:	80 83       	st	Z, r24
     a5e:	08 95       	ret

00000a60 <trigger_ultrasonic_left>:
	TIMSK |= 1 << TOIE2;
}

void trigger_ultrasonic_left(void)
{
	distance_checking = 1;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <distance_checking+0x1>
     a68:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <distance_checking>
	
	TRIG_PORT &= ~(1 << TRIG_LEFT_PIN_NUM); 
     a6c:	d8 98       	cbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a6e:	85 e0       	ldi	r24, 0x05	; 5
     a70:	8a 95       	dec	r24
     a72:	f1 f7       	brne	.-4      	; 0xa70 <trigger_ultrasonic_left+0x10>
     a74:	00 00       	nop
	
	_delay_us(1);
	
	TRIG_PORT |= 1 << TRIG_LEFT_PIN_NUM;
     a76:	d8 9a       	sbi	0x1b, 0	; 27
     a78:	80 e5       	ldi	r24, 0x50	; 80
     a7a:	8a 95       	dec	r24
     a7c:	f1 f7       	brne	.-4      	; 0xa7a <trigger_ultrasonic_left+0x1a>
	
	_delay_us(15);
	
	TRIG_PORT &= ~(1 << TRIG_LEFT_PIN_NUM);
     a7e:	d8 98       	cbi	0x1b, 0	; 27
     a80:	08 95       	ret

00000a82 <trigger_ultrasonic_center>:
}

void trigger_ultrasonic_center(void)
{
	distance_checking = 1;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <distance_checking+0x1>
     a8a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <distance_checking>
	
	TRIG_PORT &= ~(1 << TRIG_CENTER_PIN_NUM); 
     a8e:	d9 98       	cbi	0x1b, 1	; 27
     a90:	85 e0       	ldi	r24, 0x05	; 5
     a92:	8a 95       	dec	r24
     a94:	f1 f7       	brne	.-4      	; 0xa92 <trigger_ultrasonic_center+0x10>
     a96:	00 00       	nop
	
	_delay_us(1);
	
	TRIG_PORT |= 1 << TRIG_CENTER_PIN_NUM;
     a98:	d9 9a       	sbi	0x1b, 1	; 27
     a9a:	80 e5       	ldi	r24, 0x50	; 80
     a9c:	8a 95       	dec	r24
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <trigger_ultrasonic_center+0x1a>
	
	_delay_us(15);
	
	TRIG_PORT &= ~(1 << TRIG_CENTER_PIN_NUM);
     aa0:	d9 98       	cbi	0x1b, 1	; 27
     aa2:	08 95       	ret

00000aa4 <trigger_ultrasonic_right>:
}

void trigger_ultrasonic_right(void)
{
	distance_checking = 1;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <distance_checking+0x1>
     aac:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <distance_checking>
	
	TRIG_PORT &= ~(1 << TRIG_RIGHT_PIN_NUM);
     ab0:	da 98       	cbi	0x1b, 2	; 27
     ab2:	85 e0       	ldi	r24, 0x05	; 5
     ab4:	8a 95       	dec	r24
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <trigger_ultrasonic_right+0x10>
     ab8:	00 00       	nop
	
	_delay_us(1);
	
	TRIG_PORT |= 1 << TRIG_RIGHT_PIN_NUM;
     aba:	da 9a       	sbi	0x1b, 2	; 27
     abc:	80 e5       	ldi	r24, 0x50	; 80
     abe:	8a 95       	dec	r24
     ac0:	f1 f7       	brne	.-4      	; 0xabe <trigger_ultrasonic_right+0x1a>
	
	_delay_us(15);
	
	TRIG_PORT &= ~(1 << TRIG_RIGHT_PIN_NUM);
     ac2:	da 98       	cbi	0x1b, 2	; 27
     ac4:	08 95       	ret

00000ac6 <__vector_10>:
	trigger_ultrasonic_center,
	trigger_ultrasonic_right
};

ISR(TIMER2_OVF_vect)
{
     ac6:	1f 92       	push	r1
     ac8:	0f 92       	push	r0
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	0f 92       	push	r0
     ace:	11 24       	eor	r1, r1
     ad0:	8f 93       	push	r24
     ad2:	9f 93       	push	r25
	overflows++;
     ad4:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <overflows>
     ad8:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <overflows+0x1>
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <overflows+0x1>
     ae2:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <overflows>
}
     ae6:	9f 91       	pop	r25
     ae8:	8f 91       	pop	r24
     aea:	0f 90       	pop	r0
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	0f 90       	pop	r0
     af0:	1f 90       	pop	r1
     af2:	18 95       	reti

00000af4 <__vector_5>:

// left
ISR(INT4_vect)
{
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	0b b6       	in	r0, 0x3b	; 59
     b00:	0f 92       	push	r0
     b02:	2f 93       	push	r18
     b04:	3f 93       	push	r19
     b06:	4f 93       	push	r20
     b08:	5f 93       	push	r21
     b0a:	6f 93       	push	r22
     b0c:	7f 93       	push	r23
     b0e:	8f 93       	push	r24
     b10:	9f 93       	push	r25
     b12:	af 93       	push	r26
     b14:	bf 93       	push	r27
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
     b1a:	85 e0       	ldi	r24, 0x05	; 5
     b1c:	8a 95       	dec	r24
     b1e:	f1 f7       	brne	.-4      	; 0xb1c <__vector_5+0x28>
     b20:	00 00       	nop
	_delay_us(1);
	if(ECHO_PIN & 1 << ECHO_LEFT_PIN_NUM)
     b22:	0c 9b       	sbis	0x01, 4	; 1
     b24:	06 c0       	rjmp	.+12     	; 0xb32 <__vector_5+0x3e>
	{
		TCNT2 = 0;
     b26:	14 bc       	out	0x24, r1	; 36
		overflows = 0;
     b28:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <overflows+0x1>
     b2c:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <overflows>
     b30:	56 c0       	rjmp	.+172    	; 0xbde <__vector_5+0xea>
	}
	else
	{
		tcnt_value = TCNT2;
     b32:	84 b5       	in	r24, 0x24	; 36
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <tcnt_value+0x1>
     b3a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <tcnt_value>
		overflows_value = overflows;
     b3e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <overflows>
     b42:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <overflows+0x1>
     b46:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <overflows_value+0x1>
     b4a:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <overflows_value>
		
		if(overflows_value > 0)
     b4e:	18 16       	cp	r1, r24
     b50:	19 06       	cpc	r1, r25
     b52:	3c f4       	brge	.+14     	; 0xb62 <__vector_5+0x6e>
		{
			// 약 2ms -> 35센치 이상 넘어감
			ultrasonic_dis = 100;
     b54:	84 e6       	ldi	r24, 0x64	; 100
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <ultrasonic_dis+0x1>
     b5c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ultrasonic_dis>
     b60:	23 c0       	rjmp	.+70     	; 0xba8 <__vector_5+0xb4>
		}else{
			ultrasonic_dis = tcnt_value * 128.0 / 16;
     b62:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <tcnt_value>
     b66:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <tcnt_value+0x1>
     b6a:	07 2e       	mov	r0, r23
     b6c:	00 0c       	add	r0, r0
     b6e:	88 0b       	sbc	r24, r24
     b70:	99 0b       	sbc	r25, r25
     b72:	e0 d1       	rcall	.+960    	; 0xf34 <__floatsisf>
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	53 e4       	ldi	r21, 0x43	; 67
     b7c:	3f d2       	rcall	.+1150   	; 0xffc <__mulsf3>
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e8       	ldi	r20, 0x80	; 128
     b84:	5d e3       	ldi	r21, 0x3D	; 61
     b86:	3a d2       	rcall	.+1140   	; 0xffc <__mulsf3>
     b88:	a2 d1       	rcall	.+836    	; 0xece <__fixsfsi>
     b8a:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <ultrasonic_dis+0x1>
     b8e:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <ultrasonic_dis>
			ultrasonic_dis /= 58;
     b92:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ultrasonic_dis>
     b96:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ultrasonic_dis+0x1>
     b9a:	6a e3       	ldi	r22, 0x3A	; 58
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	b9 d2       	rcall	.+1394   	; 0x1112 <__divmodhi4>
     ba0:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <ultrasonic_dis+0x1>
     ba4:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <ultrasonic_dis>

		}
		
		if(ultrasonic_dis <= MAX_LENGHT){
     ba8:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ultrasonic_dis>
     bac:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ultrasonic_dis+0x1>
     bb0:	04 97       	sbiw	r24, 0x04	; 4
     bb2:	3c f4       	brge	.+14     	; 0xbc2 <__vector_5+0xce>
			obstacle_info[0] = 1;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <obstacle_info+0x1>
     bbc:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <obstacle_info>
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <__vector_5+0xd6>
			}else{
			obstacle_info[0] = 0;
     bc2:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <obstacle_info+0x1>
     bc6:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <obstacle_info>
		}
		check_distance_index = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <check_distance_index+0x1>
     bd2:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <check_distance_index>
		distance_checking = 0;
     bd6:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <distance_checking+0x1>
     bda:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <distance_checking>
	}
}
     bde:	ff 91       	pop	r31
     be0:	ef 91       	pop	r30
     be2:	bf 91       	pop	r27
     be4:	af 91       	pop	r26
     be6:	9f 91       	pop	r25
     be8:	8f 91       	pop	r24
     bea:	7f 91       	pop	r23
     bec:	6f 91       	pop	r22
     bee:	5f 91       	pop	r21
     bf0:	4f 91       	pop	r20
     bf2:	3f 91       	pop	r19
     bf4:	2f 91       	pop	r18
     bf6:	0f 90       	pop	r0
     bf8:	0b be       	out	0x3b, r0	; 59
     bfa:	0f 90       	pop	r0
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	0f 90       	pop	r0
     c00:	1f 90       	pop	r1
     c02:	18 95       	reti

00000c04 <__vector_6>:

// center
ISR(INT5_vect)
{
     c04:	1f 92       	push	r1
     c06:	0f 92       	push	r0
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	0f 92       	push	r0
     c0c:	11 24       	eor	r1, r1
     c0e:	0b b6       	in	r0, 0x3b	; 59
     c10:	0f 92       	push	r0
     c12:	2f 93       	push	r18
     c14:	3f 93       	push	r19
     c16:	4f 93       	push	r20
     c18:	5f 93       	push	r21
     c1a:	6f 93       	push	r22
     c1c:	7f 93       	push	r23
     c1e:	8f 93       	push	r24
     c20:	9f 93       	push	r25
     c22:	af 93       	push	r26
     c24:	bf 93       	push	r27
     c26:	ef 93       	push	r30
     c28:	ff 93       	push	r31
     c2a:	85 e0       	ldi	r24, 0x05	; 5
     c2c:	8a 95       	dec	r24
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <__vector_6+0x28>
     c30:	00 00       	nop
	_delay_us(1);
	if(ECHO_PIN & 1 << ECHO_CENTER_PIN_NUM)
     c32:	0d 9b       	sbis	0x01, 5	; 1
     c34:	06 c0       	rjmp	.+12     	; 0xc42 <__vector_6+0x3e>
	{
		TCNT2 = 0;
     c36:	14 bc       	out	0x24, r1	; 36
		overflows = 0;
     c38:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <overflows+0x1>
     c3c:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <overflows>
     c40:	56 c0       	rjmp	.+172    	; 0xcee <__vector_6+0xea>
	}
	else
	{
		tcnt_value = TCNT2;
     c42:	84 b5       	in	r24, 0x24	; 36
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <tcnt_value+0x1>
     c4a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <tcnt_value>
		overflows_value = overflows;
     c4e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <overflows>
     c52:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <overflows+0x1>
     c56:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <overflows_value+0x1>
     c5a:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <overflows_value>
		
		if(overflows_value > 0)
     c5e:	18 16       	cp	r1, r24
     c60:	19 06       	cpc	r1, r25
     c62:	3c f4       	brge	.+14     	; 0xc72 <__vector_6+0x6e>
		{
			// 약 2ms -> 35센치 이상 넘어감
			ultrasonic_dis = 100;
     c64:	84 e6       	ldi	r24, 0x64	; 100
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <ultrasonic_dis+0x1>
     c6c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ultrasonic_dis>
     c70:	23 c0       	rjmp	.+70     	; 0xcb8 <__vector_6+0xb4>
			}else{
			ultrasonic_dis = tcnt_value * 128.0 / 16;
     c72:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <tcnt_value>
     c76:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <tcnt_value+0x1>
     c7a:	07 2e       	mov	r0, r23
     c7c:	00 0c       	add	r0, r0
     c7e:	88 0b       	sbc	r24, r24
     c80:	99 0b       	sbc	r25, r25
     c82:	58 d1       	rcall	.+688    	; 0xf34 <__floatsisf>
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	53 e4       	ldi	r21, 0x43	; 67
     c8c:	b7 d1       	rcall	.+878    	; 0xffc <__mulsf3>
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e8       	ldi	r20, 0x80	; 128
     c94:	5d e3       	ldi	r21, 0x3D	; 61
     c96:	b2 d1       	rcall	.+868    	; 0xffc <__mulsf3>
     c98:	1a d1       	rcall	.+564    	; 0xece <__fixsfsi>
     c9a:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <ultrasonic_dis+0x1>
     c9e:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <ultrasonic_dis>
			ultrasonic_dis /= 58;
     ca2:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ultrasonic_dis>
     ca6:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ultrasonic_dis+0x1>
     caa:	6a e3       	ldi	r22, 0x3A	; 58
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	31 d2       	rcall	.+1122   	; 0x1112 <__divmodhi4>
     cb0:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <ultrasonic_dis+0x1>
     cb4:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <ultrasonic_dis>

		}
		
		if(ultrasonic_dis <= MAX_LENGHT){
     cb8:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ultrasonic_dis>
     cbc:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ultrasonic_dis+0x1>
     cc0:	04 97       	sbiw	r24, 0x04	; 4
     cc2:	3c f4       	brge	.+14     	; 0xcd2 <__vector_6+0xce>
			obstacle_info[1] = 1;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <obstacle_info+0x3>
     ccc:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <obstacle_info+0x2>
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__vector_6+0xd6>
			}else{
			obstacle_info[1] = 0;
     cd2:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <obstacle_info+0x3>
     cd6:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <obstacle_info+0x2>
		}
		check_distance_index = 2;
     cda:	82 e0       	ldi	r24, 0x02	; 2
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <check_distance_index+0x1>
     ce2:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <check_distance_index>
		distance_checking = 0;
     ce6:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <distance_checking+0x1>
     cea:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <distance_checking>
	}
}
     cee:	ff 91       	pop	r31
     cf0:	ef 91       	pop	r30
     cf2:	bf 91       	pop	r27
     cf4:	af 91       	pop	r26
     cf6:	9f 91       	pop	r25
     cf8:	8f 91       	pop	r24
     cfa:	7f 91       	pop	r23
     cfc:	6f 91       	pop	r22
     cfe:	5f 91       	pop	r21
     d00:	4f 91       	pop	r20
     d02:	3f 91       	pop	r19
     d04:	2f 91       	pop	r18
     d06:	0f 90       	pop	r0
     d08:	0b be       	out	0x3b, r0	; 59
     d0a:	0f 90       	pop	r0
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	0f 90       	pop	r0
     d10:	1f 90       	pop	r1
     d12:	18 95       	reti

00000d14 <__vector_7>:

// right
ISR(INT6_vect)
{
     d14:	1f 92       	push	r1
     d16:	0f 92       	push	r0
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	0f 92       	push	r0
     d1c:	11 24       	eor	r1, r1
     d1e:	0b b6       	in	r0, 0x3b	; 59
     d20:	0f 92       	push	r0
     d22:	2f 93       	push	r18
     d24:	3f 93       	push	r19
     d26:	4f 93       	push	r20
     d28:	5f 93       	push	r21
     d2a:	6f 93       	push	r22
     d2c:	7f 93       	push	r23
     d2e:	8f 93       	push	r24
     d30:	9f 93       	push	r25
     d32:	af 93       	push	r26
     d34:	bf 93       	push	r27
     d36:	ef 93       	push	r30
     d38:	ff 93       	push	r31
     d3a:	85 e0       	ldi	r24, 0x05	; 5
     d3c:	8a 95       	dec	r24
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <__vector_7+0x28>
     d40:	00 00       	nop
	_delay_us(1);
	if(ECHO_PIN & 1 << ECHO_RIGHT_PIN_NUM)
     d42:	0e 9b       	sbis	0x01, 6	; 1
     d44:	06 c0       	rjmp	.+12     	; 0xd52 <__vector_7+0x3e>
	{
		TCNT2 = 0;
     d46:	14 bc       	out	0x24, r1	; 36
		overflows = 0;
     d48:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <overflows+0x1>
     d4c:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <overflows>
     d50:	54 c0       	rjmp	.+168    	; 0xdfa <__vector_7+0xe6>
	}
	else
	{
		tcnt_value = TCNT2;
     d52:	84 b5       	in	r24, 0x24	; 36
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <tcnt_value+0x1>
     d5a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <tcnt_value>
		overflows_value = overflows;
     d5e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <overflows>
     d62:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <overflows+0x1>
     d66:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <overflows_value+0x1>
     d6a:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <overflows_value>
		
		if(overflows_value > 0)
     d6e:	18 16       	cp	r1, r24
     d70:	19 06       	cpc	r1, r25
     d72:	3c f4       	brge	.+14     	; 0xd82 <__vector_7+0x6e>
		{
			// 약 2ms -> 35센치 이상 넘어감
			ultrasonic_dis = 100;
     d74:	84 e6       	ldi	r24, 0x64	; 100
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <ultrasonic_dis+0x1>
     d7c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ultrasonic_dis>
     d80:	23 c0       	rjmp	.+70     	; 0xdc8 <__vector_7+0xb4>
			}else{
			ultrasonic_dis = tcnt_value * 128.0 / 16;
     d82:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <tcnt_value>
     d86:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <tcnt_value+0x1>
     d8a:	07 2e       	mov	r0, r23
     d8c:	00 0c       	add	r0, r0
     d8e:	88 0b       	sbc	r24, r24
     d90:	99 0b       	sbc	r25, r25
     d92:	d0 d0       	rcall	.+416    	; 0xf34 <__floatsisf>
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	53 e4       	ldi	r21, 0x43	; 67
     d9c:	2f d1       	rcall	.+606    	; 0xffc <__mulsf3>
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e8       	ldi	r20, 0x80	; 128
     da4:	5d e3       	ldi	r21, 0x3D	; 61
     da6:	2a d1       	rcall	.+596    	; 0xffc <__mulsf3>
     da8:	92 d0       	rcall	.+292    	; 0xece <__fixsfsi>
     daa:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <ultrasonic_dis+0x1>
     dae:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <ultrasonic_dis>
			ultrasonic_dis /= 58;
     db2:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ultrasonic_dis>
     db6:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ultrasonic_dis+0x1>
     dba:	6a e3       	ldi	r22, 0x3A	; 58
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	a9 d1       	rcall	.+850    	; 0x1112 <__divmodhi4>
     dc0:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <ultrasonic_dis+0x1>
     dc4:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <ultrasonic_dis>

		}
		
		if(ultrasonic_dis <= MAX_LENGHT){
     dc8:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ultrasonic_dis>
     dcc:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ultrasonic_dis+0x1>
     dd0:	04 97       	sbiw	r24, 0x04	; 4
     dd2:	3c f4       	brge	.+14     	; 0xde2 <__vector_7+0xce>
			obstacle_info[2] = 1;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <obstacle_info+0x5>
     ddc:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <obstacle_info+0x4>
     de0:	04 c0       	rjmp	.+8      	; 0xdea <__vector_7+0xd6>
		}else{
			obstacle_info[2] = 0;
     de2:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <obstacle_info+0x5>
     de6:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <obstacle_info+0x4>
		}
		check_distance_index = 0;
     dea:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <check_distance_index+0x1>
     dee:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <check_distance_index>
		distance_checking = 0;
     df2:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <distance_checking+0x1>
     df6:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <distance_checking>
	}
}
     dfa:	ff 91       	pop	r31
     dfc:	ef 91       	pop	r30
     dfe:	bf 91       	pop	r27
     e00:	af 91       	pop	r26
     e02:	9f 91       	pop	r25
     e04:	8f 91       	pop	r24
     e06:	7f 91       	pop	r23
     e08:	6f 91       	pop	r22
     e0a:	5f 91       	pop	r21
     e0c:	4f 91       	pop	r20
     e0e:	3f 91       	pop	r19
     e10:	2f 91       	pop	r18
     e12:	0f 90       	pop	r0
     e14:	0b be       	out	0x3b, r0	; 59
     e16:	0f 90       	pop	r0
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	0f 90       	pop	r0
     e1c:	1f 90       	pop	r1
     e1e:	18 95       	reti

00000e20 <init_ultrasonic>:


void init_ultrasonic(void)
{
	// ddr
	TRIG_DDR |= 1 << TRIG_LEFT_PIN_NUM | 1 << TRIG_CENTER_PIN_NUM | 1 << TRIG_RIGHT_PIN_NUM;
     e20:	8a b3       	in	r24, 0x1a	; 26
     e22:	87 60       	ori	r24, 0x07	; 7
     e24:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR &= ~(1 << ECHO_LEFT_PIN_NUM | 1 << ECHO_CENTER_PIN_NUM | 1 << ECHO_RIGHT_PIN_NUM);
     e26:	82 b1       	in	r24, 0x02	; 2
     e28:	8f 78       	andi	r24, 0x8F	; 143
     e2a:	82 b9       	out	0x02, r24	; 2
	
	// interrupt 설정 (echo)
	EICRB |= 0 << ISC41 | 1 << ISC40 | 0 << ISC51 | 1 << ISC50 | 0 << ISC61 | 1 << ISC60;
     e2c:	8a b7       	in	r24, 0x3a	; 58
     e2e:	85 61       	ori	r24, 0x15	; 21
     e30:	8a bf       	out	0x3a, r24	; 58
	
	// timer 설정 (128분주)
	TCCR2 |= 1 << CS22 | 0 << CS21 | 1 << CS20;
     e32:	85 b5       	in	r24, 0x25	; 37
     e34:	85 60       	ori	r24, 0x05	; 5
     e36:	85 bd       	out	0x25, r24	; 37
	
	// local interrupt 마스크
	EIMSK |= 1 << INT4 | 1 << INT5 | 1 << INT6; // EXTERNAL interrupt 활성화
     e38:	89 b7       	in	r24, 0x39	; 57
     e3a:	80 67       	ori	r24, 0x70	; 112
     e3c:	89 bf       	out	0x39, r24	; 57
	
	// timer overflow interrupt 마스크
	TIMSK |= 1 << TOIE2;
     e3e:	87 b7       	in	r24, 0x37	; 55
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	87 bf       	out	0x37, r24	; 55
     e44:	08 95       	ret

00000e46 <check_obstacle>:
	TRIG_PORT &= ~(1 << TRIG_RIGHT_PIN_NUM);
}

void check_obstacle(void)
{
	if(!distance_checking)
     e46:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <distance_checking>
     e4a:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <distance_checking+0x1>
     e4e:	89 2b       	or	r24, r25
     e50:	99 f5       	brne	.+102    	; 0xeb8 <check_obstacle+0x72>
	{
		//_delay_ms(1000);
		printf("%d,%d,%d\n", ultrasonic_dis,overflows_value,tcnt_value);
     e52:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <tcnt_value>
     e56:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <tcnt_value+0x1>
     e5a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ultrasonic_dis>
     e5e:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ultrasonic_dis+0x1>
     e62:	3f 93       	push	r19
     e64:	2f 93       	push	r18
     e66:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <overflows_value+0x1>
     e6a:	2f 93       	push	r18
     e6c:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <overflows_value>
     e70:	2f 93       	push	r18
     e72:	9f 93       	push	r25
     e74:	8f 93       	push	r24
     e76:	8f ed       	ldi	r24, 0xDF	; 223
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	9f 93       	push	r25
     e7c:	8f 93       	push	r24
     e7e:	79 d1       	rcall	.+754    	; 0x1172 <printf>
		printf("\ntrigger\n");
     e80:	89 ee       	ldi	r24, 0xE9	; 233
     e82:	91 e0       	ldi	r25, 0x01	; 1
     e84:	89 d1       	rcall	.+786    	; 0x1198 <puts>
		sec_count = 0;
     e86:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <sec_count+0x1>
     e8a:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <sec_count>
		triger_funcs[check_distance_index]();
     e8e:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <check_distance_index>
     e92:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <check_distance_index+0x1>
     e96:	ee 0f       	add	r30, r30
     e98:	ff 1f       	adc	r31, r31
     e9a:	e4 5a       	subi	r30, 0xA4	; 164
     e9c:	fe 4f       	sbci	r31, 0xFE	; 254
     e9e:	01 90       	ld	r0, Z+
     ea0:	f0 81       	ld	r31, Z
     ea2:	e0 2d       	mov	r30, r0
     ea4:	09 95       	icall
     ea6:	8d b7       	in	r24, 0x3d	; 61
     ea8:	9e b7       	in	r25, 0x3e	; 62
     eaa:	08 96       	adiw	r24, 0x08	; 8
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	9e bf       	out	0x3e, r25	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	8d bf       	out	0x3d, r24	; 61
     eb6:	08 95       	ret
	}else{
		if(sec_count > 3)
     eb8:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <sec_count>
     ebc:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <sec_count+0x1>
     ec0:	04 97       	sbiw	r24, 0x04	; 4
     ec2:	24 f0       	brlt	.+8      	; 0xecc <check_obstacle+0x86>
		{
			distance_checking = 0;
     ec4:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <distance_checking+0x1>
     ec8:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <distance_checking>
     ecc:	08 95       	ret

00000ece <__fixsfsi>:
     ece:	04 d0       	rcall	.+8      	; 0xed8 <__fixunssfsi>
     ed0:	68 94       	set
     ed2:	b1 11       	cpse	r27, r1
     ed4:	8d c0       	rjmp	.+282    	; 0xff0 <__fp_szero>
     ed6:	08 95       	ret

00000ed8 <__fixunssfsi>:
     ed8:	70 d0       	rcall	.+224    	; 0xfba <__fp_splitA>
     eda:	88 f0       	brcs	.+34     	; 0xefe <__fixunssfsi+0x26>
     edc:	9f 57       	subi	r25, 0x7F	; 127
     ede:	90 f0       	brcs	.+36     	; 0xf04 <__fixunssfsi+0x2c>
     ee0:	b9 2f       	mov	r27, r25
     ee2:	99 27       	eor	r25, r25
     ee4:	b7 51       	subi	r27, 0x17	; 23
     ee6:	a0 f0       	brcs	.+40     	; 0xf10 <__fixunssfsi+0x38>
     ee8:	d1 f0       	breq	.+52     	; 0xf1e <__fixunssfsi+0x46>
     eea:	66 0f       	add	r22, r22
     eec:	77 1f       	adc	r23, r23
     eee:	88 1f       	adc	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	1a f0       	brmi	.+6      	; 0xefa <__fixunssfsi+0x22>
     ef4:	ba 95       	dec	r27
     ef6:	c9 f7       	brne	.-14     	; 0xeea <__fixunssfsi+0x12>
     ef8:	12 c0       	rjmp	.+36     	; 0xf1e <__fixunssfsi+0x46>
     efa:	b1 30       	cpi	r27, 0x01	; 1
     efc:	81 f0       	breq	.+32     	; 0xf1e <__fixunssfsi+0x46>
     efe:	77 d0       	rcall	.+238    	; 0xfee <__fp_zero>
     f00:	b1 e0       	ldi	r27, 0x01	; 1
     f02:	08 95       	ret
     f04:	74 c0       	rjmp	.+232    	; 0xfee <__fp_zero>
     f06:	67 2f       	mov	r22, r23
     f08:	78 2f       	mov	r23, r24
     f0a:	88 27       	eor	r24, r24
     f0c:	b8 5f       	subi	r27, 0xF8	; 248
     f0e:	39 f0       	breq	.+14     	; 0xf1e <__fixunssfsi+0x46>
     f10:	b9 3f       	cpi	r27, 0xF9	; 249
     f12:	cc f3       	brlt	.-14     	; 0xf06 <__fixunssfsi+0x2e>
     f14:	86 95       	lsr	r24
     f16:	77 95       	ror	r23
     f18:	67 95       	ror	r22
     f1a:	b3 95       	inc	r27
     f1c:	d9 f7       	brne	.-10     	; 0xf14 <__fixunssfsi+0x3c>
     f1e:	3e f4       	brtc	.+14     	; 0xf2e <__fixunssfsi+0x56>
     f20:	90 95       	com	r25
     f22:	80 95       	com	r24
     f24:	70 95       	com	r23
     f26:	61 95       	neg	r22
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	8f 4f       	sbci	r24, 0xFF	; 255
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	08 95       	ret

00000f30 <__floatunsisf>:
     f30:	e8 94       	clt
     f32:	09 c0       	rjmp	.+18     	; 0xf46 <__floatsisf+0x12>

00000f34 <__floatsisf>:
     f34:	97 fb       	bst	r25, 7
     f36:	3e f4       	brtc	.+14     	; 0xf46 <__floatsisf+0x12>
     f38:	90 95       	com	r25
     f3a:	80 95       	com	r24
     f3c:	70 95       	com	r23
     f3e:	61 95       	neg	r22
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	8f 4f       	sbci	r24, 0xFF	; 255
     f44:	9f 4f       	sbci	r25, 0xFF	; 255
     f46:	99 23       	and	r25, r25
     f48:	a9 f0       	breq	.+42     	; 0xf74 <__floatsisf+0x40>
     f4a:	f9 2f       	mov	r31, r25
     f4c:	96 e9       	ldi	r25, 0x96	; 150
     f4e:	bb 27       	eor	r27, r27
     f50:	93 95       	inc	r25
     f52:	f6 95       	lsr	r31
     f54:	87 95       	ror	r24
     f56:	77 95       	ror	r23
     f58:	67 95       	ror	r22
     f5a:	b7 95       	ror	r27
     f5c:	f1 11       	cpse	r31, r1
     f5e:	f8 cf       	rjmp	.-16     	; 0xf50 <__floatsisf+0x1c>
     f60:	fa f4       	brpl	.+62     	; 0xfa0 <__floatsisf+0x6c>
     f62:	bb 0f       	add	r27, r27
     f64:	11 f4       	brne	.+4      	; 0xf6a <__floatsisf+0x36>
     f66:	60 ff       	sbrs	r22, 0
     f68:	1b c0       	rjmp	.+54     	; 0xfa0 <__floatsisf+0x6c>
     f6a:	6f 5f       	subi	r22, 0xFF	; 255
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	8f 4f       	sbci	r24, 0xFF	; 255
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	16 c0       	rjmp	.+44     	; 0xfa0 <__floatsisf+0x6c>
     f74:	88 23       	and	r24, r24
     f76:	11 f0       	breq	.+4      	; 0xf7c <__floatsisf+0x48>
     f78:	96 e9       	ldi	r25, 0x96	; 150
     f7a:	11 c0       	rjmp	.+34     	; 0xf9e <__floatsisf+0x6a>
     f7c:	77 23       	and	r23, r23
     f7e:	21 f0       	breq	.+8      	; 0xf88 <__floatsisf+0x54>
     f80:	9e e8       	ldi	r25, 0x8E	; 142
     f82:	87 2f       	mov	r24, r23
     f84:	76 2f       	mov	r23, r22
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <__floatsisf+0x5e>
     f88:	66 23       	and	r22, r22
     f8a:	71 f0       	breq	.+28     	; 0xfa8 <__floatsisf+0x74>
     f8c:	96 e8       	ldi	r25, 0x86	; 134
     f8e:	86 2f       	mov	r24, r22
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	2a f0       	brmi	.+10     	; 0xfa0 <__floatsisf+0x6c>
     f96:	9a 95       	dec	r25
     f98:	66 0f       	add	r22, r22
     f9a:	77 1f       	adc	r23, r23
     f9c:	88 1f       	adc	r24, r24
     f9e:	da f7       	brpl	.-10     	; 0xf96 <__floatsisf+0x62>
     fa0:	88 0f       	add	r24, r24
     fa2:	96 95       	lsr	r25
     fa4:	87 95       	ror	r24
     fa6:	97 f9       	bld	r25, 7
     fa8:	08 95       	ret

00000faa <__fp_split3>:
     faa:	57 fd       	sbrc	r21, 7
     fac:	90 58       	subi	r25, 0x80	; 128
     fae:	44 0f       	add	r20, r20
     fb0:	55 1f       	adc	r21, r21
     fb2:	59 f0       	breq	.+22     	; 0xfca <__fp_splitA+0x10>
     fb4:	5f 3f       	cpi	r21, 0xFF	; 255
     fb6:	71 f0       	breq	.+28     	; 0xfd4 <__fp_splitA+0x1a>
     fb8:	47 95       	ror	r20

00000fba <__fp_splitA>:
     fba:	88 0f       	add	r24, r24
     fbc:	97 fb       	bst	r25, 7
     fbe:	99 1f       	adc	r25, r25
     fc0:	61 f0       	breq	.+24     	; 0xfda <__fp_splitA+0x20>
     fc2:	9f 3f       	cpi	r25, 0xFF	; 255
     fc4:	79 f0       	breq	.+30     	; 0xfe4 <__fp_splitA+0x2a>
     fc6:	87 95       	ror	r24
     fc8:	08 95       	ret
     fca:	12 16       	cp	r1, r18
     fcc:	13 06       	cpc	r1, r19
     fce:	14 06       	cpc	r1, r20
     fd0:	55 1f       	adc	r21, r21
     fd2:	f2 cf       	rjmp	.-28     	; 0xfb8 <__fp_split3+0xe>
     fd4:	46 95       	lsr	r20
     fd6:	f1 df       	rcall	.-30     	; 0xfba <__fp_splitA>
     fd8:	08 c0       	rjmp	.+16     	; 0xfea <__fp_splitA+0x30>
     fda:	16 16       	cp	r1, r22
     fdc:	17 06       	cpc	r1, r23
     fde:	18 06       	cpc	r1, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	f1 cf       	rjmp	.-30     	; 0xfc6 <__fp_splitA+0xc>
     fe4:	86 95       	lsr	r24
     fe6:	71 05       	cpc	r23, r1
     fe8:	61 05       	cpc	r22, r1
     fea:	08 94       	sec
     fec:	08 95       	ret

00000fee <__fp_zero>:
     fee:	e8 94       	clt

00000ff0 <__fp_szero>:
     ff0:	bb 27       	eor	r27, r27
     ff2:	66 27       	eor	r22, r22
     ff4:	77 27       	eor	r23, r23
     ff6:	cb 01       	movw	r24, r22
     ff8:	97 f9       	bld	r25, 7
     ffa:	08 95       	ret

00000ffc <__mulsf3>:
     ffc:	0b d0       	rcall	.+22     	; 0x1014 <__mulsf3x>
     ffe:	78 c0       	rjmp	.+240    	; 0x10f0 <__fp_round>
    1000:	69 d0       	rcall	.+210    	; 0x10d4 <__fp_pscA>
    1002:	28 f0       	brcs	.+10     	; 0x100e <__mulsf3+0x12>
    1004:	6e d0       	rcall	.+220    	; 0x10e2 <__fp_pscB>
    1006:	18 f0       	brcs	.+6      	; 0x100e <__mulsf3+0x12>
    1008:	95 23       	and	r25, r21
    100a:	09 f0       	breq	.+2      	; 0x100e <__mulsf3+0x12>
    100c:	5a c0       	rjmp	.+180    	; 0x10c2 <__fp_inf>
    100e:	5f c0       	rjmp	.+190    	; 0x10ce <__fp_nan>
    1010:	11 24       	eor	r1, r1
    1012:	ee cf       	rjmp	.-36     	; 0xff0 <__fp_szero>

00001014 <__mulsf3x>:
    1014:	ca df       	rcall	.-108    	; 0xfaa <__fp_split3>
    1016:	a0 f3       	brcs	.-24     	; 0x1000 <__mulsf3+0x4>

00001018 <__mulsf3_pse>:
    1018:	95 9f       	mul	r25, r21
    101a:	d1 f3       	breq	.-12     	; 0x1010 <__mulsf3+0x14>
    101c:	95 0f       	add	r25, r21
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	55 1f       	adc	r21, r21
    1022:	62 9f       	mul	r22, r18
    1024:	f0 01       	movw	r30, r0
    1026:	72 9f       	mul	r23, r18
    1028:	bb 27       	eor	r27, r27
    102a:	f0 0d       	add	r31, r0
    102c:	b1 1d       	adc	r27, r1
    102e:	63 9f       	mul	r22, r19
    1030:	aa 27       	eor	r26, r26
    1032:	f0 0d       	add	r31, r0
    1034:	b1 1d       	adc	r27, r1
    1036:	aa 1f       	adc	r26, r26
    1038:	64 9f       	mul	r22, r20
    103a:	66 27       	eor	r22, r22
    103c:	b0 0d       	add	r27, r0
    103e:	a1 1d       	adc	r26, r1
    1040:	66 1f       	adc	r22, r22
    1042:	82 9f       	mul	r24, r18
    1044:	22 27       	eor	r18, r18
    1046:	b0 0d       	add	r27, r0
    1048:	a1 1d       	adc	r26, r1
    104a:	62 1f       	adc	r22, r18
    104c:	73 9f       	mul	r23, r19
    104e:	b0 0d       	add	r27, r0
    1050:	a1 1d       	adc	r26, r1
    1052:	62 1f       	adc	r22, r18
    1054:	83 9f       	mul	r24, r19
    1056:	a0 0d       	add	r26, r0
    1058:	61 1d       	adc	r22, r1
    105a:	22 1f       	adc	r18, r18
    105c:	74 9f       	mul	r23, r20
    105e:	33 27       	eor	r19, r19
    1060:	a0 0d       	add	r26, r0
    1062:	61 1d       	adc	r22, r1
    1064:	23 1f       	adc	r18, r19
    1066:	84 9f       	mul	r24, r20
    1068:	60 0d       	add	r22, r0
    106a:	21 1d       	adc	r18, r1
    106c:	82 2f       	mov	r24, r18
    106e:	76 2f       	mov	r23, r22
    1070:	6a 2f       	mov	r22, r26
    1072:	11 24       	eor	r1, r1
    1074:	9f 57       	subi	r25, 0x7F	; 127
    1076:	50 40       	sbci	r21, 0x00	; 0
    1078:	8a f0       	brmi	.+34     	; 0x109c <__mulsf3_pse+0x84>
    107a:	e1 f0       	breq	.+56     	; 0x10b4 <__mulsf3_pse+0x9c>
    107c:	88 23       	and	r24, r24
    107e:	4a f0       	brmi	.+18     	; 0x1092 <__mulsf3_pse+0x7a>
    1080:	ee 0f       	add	r30, r30
    1082:	ff 1f       	adc	r31, r31
    1084:	bb 1f       	adc	r27, r27
    1086:	66 1f       	adc	r22, r22
    1088:	77 1f       	adc	r23, r23
    108a:	88 1f       	adc	r24, r24
    108c:	91 50       	subi	r25, 0x01	; 1
    108e:	50 40       	sbci	r21, 0x00	; 0
    1090:	a9 f7       	brne	.-22     	; 0x107c <__mulsf3_pse+0x64>
    1092:	9e 3f       	cpi	r25, 0xFE	; 254
    1094:	51 05       	cpc	r21, r1
    1096:	70 f0       	brcs	.+28     	; 0x10b4 <__mulsf3_pse+0x9c>
    1098:	14 c0       	rjmp	.+40     	; 0x10c2 <__fp_inf>
    109a:	aa cf       	rjmp	.-172    	; 0xff0 <__fp_szero>
    109c:	5f 3f       	cpi	r21, 0xFF	; 255
    109e:	ec f3       	brlt	.-6      	; 0x109a <__mulsf3_pse+0x82>
    10a0:	98 3e       	cpi	r25, 0xE8	; 232
    10a2:	dc f3       	brlt	.-10     	; 0x109a <__mulsf3_pse+0x82>
    10a4:	86 95       	lsr	r24
    10a6:	77 95       	ror	r23
    10a8:	67 95       	ror	r22
    10aa:	b7 95       	ror	r27
    10ac:	f7 95       	ror	r31
    10ae:	e7 95       	ror	r30
    10b0:	9f 5f       	subi	r25, 0xFF	; 255
    10b2:	c1 f7       	brne	.-16     	; 0x10a4 <__mulsf3_pse+0x8c>
    10b4:	fe 2b       	or	r31, r30
    10b6:	88 0f       	add	r24, r24
    10b8:	91 1d       	adc	r25, r1
    10ba:	96 95       	lsr	r25
    10bc:	87 95       	ror	r24
    10be:	97 f9       	bld	r25, 7
    10c0:	08 95       	ret

000010c2 <__fp_inf>:
    10c2:	97 f9       	bld	r25, 7
    10c4:	9f 67       	ori	r25, 0x7F	; 127
    10c6:	80 e8       	ldi	r24, 0x80	; 128
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	08 95       	ret

000010ce <__fp_nan>:
    10ce:	9f ef       	ldi	r25, 0xFF	; 255
    10d0:	80 ec       	ldi	r24, 0xC0	; 192
    10d2:	08 95       	ret

000010d4 <__fp_pscA>:
    10d4:	00 24       	eor	r0, r0
    10d6:	0a 94       	dec	r0
    10d8:	16 16       	cp	r1, r22
    10da:	17 06       	cpc	r1, r23
    10dc:	18 06       	cpc	r1, r24
    10de:	09 06       	cpc	r0, r25
    10e0:	08 95       	ret

000010e2 <__fp_pscB>:
    10e2:	00 24       	eor	r0, r0
    10e4:	0a 94       	dec	r0
    10e6:	12 16       	cp	r1, r18
    10e8:	13 06       	cpc	r1, r19
    10ea:	14 06       	cpc	r1, r20
    10ec:	05 06       	cpc	r0, r21
    10ee:	08 95       	ret

000010f0 <__fp_round>:
    10f0:	09 2e       	mov	r0, r25
    10f2:	03 94       	inc	r0
    10f4:	00 0c       	add	r0, r0
    10f6:	11 f4       	brne	.+4      	; 0x10fc <__fp_round+0xc>
    10f8:	88 23       	and	r24, r24
    10fa:	52 f0       	brmi	.+20     	; 0x1110 <__stack+0x11>
    10fc:	bb 0f       	add	r27, r27
    10fe:	40 f4       	brcc	.+16     	; 0x1110 <__stack+0x11>
    1100:	bf 2b       	or	r27, r31
    1102:	11 f4       	brne	.+4      	; 0x1108 <__stack+0x9>
    1104:	60 ff       	sbrs	r22, 0
    1106:	04 c0       	rjmp	.+8      	; 0x1110 <__stack+0x11>
    1108:	6f 5f       	subi	r22, 0xFF	; 255
    110a:	7f 4f       	sbci	r23, 0xFF	; 255
    110c:	8f 4f       	sbci	r24, 0xFF	; 255
    110e:	9f 4f       	sbci	r25, 0xFF	; 255
    1110:	08 95       	ret

00001112 <__divmodhi4>:
    1112:	97 fb       	bst	r25, 7
    1114:	07 2e       	mov	r0, r23
    1116:	16 f4       	brtc	.+4      	; 0x111c <__divmodhi4+0xa>
    1118:	00 94       	com	r0
    111a:	06 d0       	rcall	.+12     	; 0x1128 <__divmodhi4_neg1>
    111c:	77 fd       	sbrc	r23, 7
    111e:	08 d0       	rcall	.+16     	; 0x1130 <__divmodhi4_neg2>
    1120:	14 d0       	rcall	.+40     	; 0x114a <__udivmodhi4>
    1122:	07 fc       	sbrc	r0, 7
    1124:	05 d0       	rcall	.+10     	; 0x1130 <__divmodhi4_neg2>
    1126:	3e f4       	brtc	.+14     	; 0x1136 <__divmodhi4_exit>

00001128 <__divmodhi4_neg1>:
    1128:	90 95       	com	r25
    112a:	81 95       	neg	r24
    112c:	9f 4f       	sbci	r25, 0xFF	; 255
    112e:	08 95       	ret

00001130 <__divmodhi4_neg2>:
    1130:	70 95       	com	r23
    1132:	61 95       	neg	r22
    1134:	7f 4f       	sbci	r23, 0xFF	; 255

00001136 <__divmodhi4_exit>:
    1136:	08 95       	ret

00001138 <__tablejump2__>:
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	00 24       	eor	r0, r0
    113e:	00 1c       	adc	r0, r0
    1140:	0b be       	out	0x3b, r0	; 59
    1142:	07 90       	elpm	r0, Z+
    1144:	f6 91       	elpm	r31, Z
    1146:	e0 2d       	mov	r30, r0
    1148:	09 94       	ijmp

0000114a <__udivmodhi4>:
    114a:	aa 1b       	sub	r26, r26
    114c:	bb 1b       	sub	r27, r27
    114e:	51 e1       	ldi	r21, 0x11	; 17
    1150:	07 c0       	rjmp	.+14     	; 0x1160 <__udivmodhi4_ep>

00001152 <__udivmodhi4_loop>:
    1152:	aa 1f       	adc	r26, r26
    1154:	bb 1f       	adc	r27, r27
    1156:	a6 17       	cp	r26, r22
    1158:	b7 07       	cpc	r27, r23
    115a:	10 f0       	brcs	.+4      	; 0x1160 <__udivmodhi4_ep>
    115c:	a6 1b       	sub	r26, r22
    115e:	b7 0b       	sbc	r27, r23

00001160 <__udivmodhi4_ep>:
    1160:	88 1f       	adc	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	5a 95       	dec	r21
    1166:	a9 f7       	brne	.-22     	; 0x1152 <__udivmodhi4_loop>
    1168:	80 95       	com	r24
    116a:	90 95       	com	r25
    116c:	bc 01       	movw	r22, r24
    116e:	cd 01       	movw	r24, r26
    1170:	08 95       	ret

00001172 <printf>:
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	ae 01       	movw	r20, r28
    117c:	4b 5f       	subi	r20, 0xFB	; 251
    117e:	5f 4f       	sbci	r21, 0xFF	; 255
    1180:	fa 01       	movw	r30, r20
    1182:	61 91       	ld	r22, Z+
    1184:	71 91       	ld	r23, Z+
    1186:	af 01       	movw	r20, r30
    1188:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <__iob+0x2>
    118c:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <__iob+0x3>
    1190:	33 d0       	rcall	.+102    	; 0x11f8 <vfprintf>
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <puts>:
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	e0 91 a5 03 	lds	r30, 0x03A5	; 0x8003a5 <__iob+0x2>
    11a4:	f0 91 a6 03 	lds	r31, 0x03A6	; 0x8003a6 <__iob+0x3>
    11a8:	23 81       	ldd	r18, Z+3	; 0x03
    11aa:	21 ff       	sbrs	r18, 1
    11ac:	1b c0       	rjmp	.+54     	; 0x11e4 <puts+0x4c>
    11ae:	8c 01       	movw	r16, r24
    11b0:	d0 e0       	ldi	r29, 0x00	; 0
    11b2:	c0 e0       	ldi	r28, 0x00	; 0
    11b4:	f8 01       	movw	r30, r16
    11b6:	81 91       	ld	r24, Z+
    11b8:	8f 01       	movw	r16, r30
    11ba:	60 91 a5 03 	lds	r22, 0x03A5	; 0x8003a5 <__iob+0x2>
    11be:	70 91 a6 03 	lds	r23, 0x03A6	; 0x8003a6 <__iob+0x3>
    11c2:	db 01       	movw	r26, r22
    11c4:	18 96       	adiw	r26, 0x08	; 8
    11c6:	ed 91       	ld	r30, X+
    11c8:	fc 91       	ld	r31, X
    11ca:	19 97       	sbiw	r26, 0x09	; 9
    11cc:	88 23       	and	r24, r24
    11ce:	31 f0       	breq	.+12     	; 0x11dc <puts+0x44>
    11d0:	09 95       	icall
    11d2:	89 2b       	or	r24, r25
    11d4:	79 f3       	breq	.-34     	; 0x11b4 <puts+0x1c>
    11d6:	df ef       	ldi	r29, 0xFF	; 255
    11d8:	cf ef       	ldi	r28, 0xFF	; 255
    11da:	ec cf       	rjmp	.-40     	; 0x11b4 <puts+0x1c>
    11dc:	8a e0       	ldi	r24, 0x0A	; 10
    11de:	09 95       	icall
    11e0:	89 2b       	or	r24, r25
    11e2:	19 f0       	breq	.+6      	; 0x11ea <puts+0x52>
    11e4:	8f ef       	ldi	r24, 0xFF	; 255
    11e6:	9f ef       	ldi	r25, 0xFF	; 255
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <puts+0x56>
    11ea:	8d 2f       	mov	r24, r29
    11ec:	9c 2f       	mov	r25, r28
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	08 95       	ret

000011f8 <vfprintf>:
    11f8:	2f 92       	push	r2
    11fa:	3f 92       	push	r3
    11fc:	4f 92       	push	r4
    11fe:	5f 92       	push	r5
    1200:	6f 92       	push	r6
    1202:	7f 92       	push	r7
    1204:	8f 92       	push	r8
    1206:	9f 92       	push	r9
    1208:	af 92       	push	r10
    120a:	bf 92       	push	r11
    120c:	cf 92       	push	r12
    120e:	df 92       	push	r13
    1210:	ef 92       	push	r14
    1212:	ff 92       	push	r15
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	2b 97       	sbiw	r28, 0x0b	; 11
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	6c 01       	movw	r12, r24
    122e:	7b 01       	movw	r14, r22
    1230:	8a 01       	movw	r16, r20
    1232:	fc 01       	movw	r30, r24
    1234:	17 82       	std	Z+7, r1	; 0x07
    1236:	16 82       	std	Z+6, r1	; 0x06
    1238:	83 81       	ldd	r24, Z+3	; 0x03
    123a:	81 ff       	sbrs	r24, 1
    123c:	bf c1       	rjmp	.+894    	; 0x15bc <vfprintf+0x3c4>
    123e:	ce 01       	movw	r24, r28
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	3c 01       	movw	r6, r24
    1244:	f6 01       	movw	r30, r12
    1246:	93 81       	ldd	r25, Z+3	; 0x03
    1248:	f7 01       	movw	r30, r14
    124a:	93 fd       	sbrc	r25, 3
    124c:	85 91       	lpm	r24, Z+
    124e:	93 ff       	sbrs	r25, 3
    1250:	81 91       	ld	r24, Z+
    1252:	7f 01       	movw	r14, r30
    1254:	88 23       	and	r24, r24
    1256:	09 f4       	brne	.+2      	; 0x125a <vfprintf+0x62>
    1258:	ad c1       	rjmp	.+858    	; 0x15b4 <vfprintf+0x3bc>
    125a:	85 32       	cpi	r24, 0x25	; 37
    125c:	39 f4       	brne	.+14     	; 0x126c <vfprintf+0x74>
    125e:	93 fd       	sbrc	r25, 3
    1260:	85 91       	lpm	r24, Z+
    1262:	93 ff       	sbrs	r25, 3
    1264:	81 91       	ld	r24, Z+
    1266:	7f 01       	movw	r14, r30
    1268:	85 32       	cpi	r24, 0x25	; 37
    126a:	21 f4       	brne	.+8      	; 0x1274 <vfprintf+0x7c>
    126c:	b6 01       	movw	r22, r12
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	d6 d1       	rcall	.+940    	; 0x161e <fputc>
    1272:	e8 cf       	rjmp	.-48     	; 0x1244 <vfprintf+0x4c>
    1274:	91 2c       	mov	r9, r1
    1276:	21 2c       	mov	r2, r1
    1278:	31 2c       	mov	r3, r1
    127a:	ff e1       	ldi	r31, 0x1F	; 31
    127c:	f3 15       	cp	r31, r3
    127e:	d8 f0       	brcs	.+54     	; 0x12b6 <vfprintf+0xbe>
    1280:	8b 32       	cpi	r24, 0x2B	; 43
    1282:	79 f0       	breq	.+30     	; 0x12a2 <vfprintf+0xaa>
    1284:	38 f4       	brcc	.+14     	; 0x1294 <vfprintf+0x9c>
    1286:	80 32       	cpi	r24, 0x20	; 32
    1288:	79 f0       	breq	.+30     	; 0x12a8 <vfprintf+0xb0>
    128a:	83 32       	cpi	r24, 0x23	; 35
    128c:	a1 f4       	brne	.+40     	; 0x12b6 <vfprintf+0xbe>
    128e:	23 2d       	mov	r18, r3
    1290:	20 61       	ori	r18, 0x10	; 16
    1292:	1d c0       	rjmp	.+58     	; 0x12ce <vfprintf+0xd6>
    1294:	8d 32       	cpi	r24, 0x2D	; 45
    1296:	61 f0       	breq	.+24     	; 0x12b0 <vfprintf+0xb8>
    1298:	80 33       	cpi	r24, 0x30	; 48
    129a:	69 f4       	brne	.+26     	; 0x12b6 <vfprintf+0xbe>
    129c:	23 2d       	mov	r18, r3
    129e:	21 60       	ori	r18, 0x01	; 1
    12a0:	16 c0       	rjmp	.+44     	; 0x12ce <vfprintf+0xd6>
    12a2:	83 2d       	mov	r24, r3
    12a4:	82 60       	ori	r24, 0x02	; 2
    12a6:	38 2e       	mov	r3, r24
    12a8:	e3 2d       	mov	r30, r3
    12aa:	e4 60       	ori	r30, 0x04	; 4
    12ac:	3e 2e       	mov	r3, r30
    12ae:	2a c0       	rjmp	.+84     	; 0x1304 <vfprintf+0x10c>
    12b0:	f3 2d       	mov	r31, r3
    12b2:	f8 60       	ori	r31, 0x08	; 8
    12b4:	1d c0       	rjmp	.+58     	; 0x12f0 <vfprintf+0xf8>
    12b6:	37 fc       	sbrc	r3, 7
    12b8:	2d c0       	rjmp	.+90     	; 0x1314 <vfprintf+0x11c>
    12ba:	20 ed       	ldi	r18, 0xD0	; 208
    12bc:	28 0f       	add	r18, r24
    12be:	2a 30       	cpi	r18, 0x0A	; 10
    12c0:	40 f0       	brcs	.+16     	; 0x12d2 <vfprintf+0xda>
    12c2:	8e 32       	cpi	r24, 0x2E	; 46
    12c4:	b9 f4       	brne	.+46     	; 0x12f4 <vfprintf+0xfc>
    12c6:	36 fc       	sbrc	r3, 6
    12c8:	75 c1       	rjmp	.+746    	; 0x15b4 <vfprintf+0x3bc>
    12ca:	23 2d       	mov	r18, r3
    12cc:	20 64       	ori	r18, 0x40	; 64
    12ce:	32 2e       	mov	r3, r18
    12d0:	19 c0       	rjmp	.+50     	; 0x1304 <vfprintf+0x10c>
    12d2:	36 fe       	sbrs	r3, 6
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <vfprintf+0xea>
    12d6:	8a e0       	ldi	r24, 0x0A	; 10
    12d8:	98 9e       	mul	r9, r24
    12da:	20 0d       	add	r18, r0
    12dc:	11 24       	eor	r1, r1
    12de:	92 2e       	mov	r9, r18
    12e0:	11 c0       	rjmp	.+34     	; 0x1304 <vfprintf+0x10c>
    12e2:	ea e0       	ldi	r30, 0x0A	; 10
    12e4:	2e 9e       	mul	r2, r30
    12e6:	20 0d       	add	r18, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	22 2e       	mov	r2, r18
    12ec:	f3 2d       	mov	r31, r3
    12ee:	f0 62       	ori	r31, 0x20	; 32
    12f0:	3f 2e       	mov	r3, r31
    12f2:	08 c0       	rjmp	.+16     	; 0x1304 <vfprintf+0x10c>
    12f4:	8c 36       	cpi	r24, 0x6C	; 108
    12f6:	21 f4       	brne	.+8      	; 0x1300 <vfprintf+0x108>
    12f8:	83 2d       	mov	r24, r3
    12fa:	80 68       	ori	r24, 0x80	; 128
    12fc:	38 2e       	mov	r3, r24
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <vfprintf+0x10c>
    1300:	88 36       	cpi	r24, 0x68	; 104
    1302:	41 f4       	brne	.+16     	; 0x1314 <vfprintf+0x11c>
    1304:	f7 01       	movw	r30, r14
    1306:	93 fd       	sbrc	r25, 3
    1308:	85 91       	lpm	r24, Z+
    130a:	93 ff       	sbrs	r25, 3
    130c:	81 91       	ld	r24, Z+
    130e:	7f 01       	movw	r14, r30
    1310:	81 11       	cpse	r24, r1
    1312:	b3 cf       	rjmp	.-154    	; 0x127a <vfprintf+0x82>
    1314:	98 2f       	mov	r25, r24
    1316:	9f 7d       	andi	r25, 0xDF	; 223
    1318:	95 54       	subi	r25, 0x45	; 69
    131a:	93 30       	cpi	r25, 0x03	; 3
    131c:	28 f4       	brcc	.+10     	; 0x1328 <vfprintf+0x130>
    131e:	0c 5f       	subi	r16, 0xFC	; 252
    1320:	1f 4f       	sbci	r17, 0xFF	; 255
    1322:	9f e3       	ldi	r25, 0x3F	; 63
    1324:	99 83       	std	Y+1, r25	; 0x01
    1326:	0d c0       	rjmp	.+26     	; 0x1342 <vfprintf+0x14a>
    1328:	83 36       	cpi	r24, 0x63	; 99
    132a:	31 f0       	breq	.+12     	; 0x1338 <vfprintf+0x140>
    132c:	83 37       	cpi	r24, 0x73	; 115
    132e:	71 f0       	breq	.+28     	; 0x134c <vfprintf+0x154>
    1330:	83 35       	cpi	r24, 0x53	; 83
    1332:	09 f0       	breq	.+2      	; 0x1336 <vfprintf+0x13e>
    1334:	55 c0       	rjmp	.+170    	; 0x13e0 <vfprintf+0x1e8>
    1336:	20 c0       	rjmp	.+64     	; 0x1378 <vfprintf+0x180>
    1338:	f8 01       	movw	r30, r16
    133a:	80 81       	ld	r24, Z
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	0e 5f       	subi	r16, 0xFE	; 254
    1340:	1f 4f       	sbci	r17, 0xFF	; 255
    1342:	88 24       	eor	r8, r8
    1344:	83 94       	inc	r8
    1346:	91 2c       	mov	r9, r1
    1348:	53 01       	movw	r10, r6
    134a:	12 c0       	rjmp	.+36     	; 0x1370 <vfprintf+0x178>
    134c:	28 01       	movw	r4, r16
    134e:	f2 e0       	ldi	r31, 0x02	; 2
    1350:	4f 0e       	add	r4, r31
    1352:	51 1c       	adc	r5, r1
    1354:	f8 01       	movw	r30, r16
    1356:	a0 80       	ld	r10, Z
    1358:	b1 80       	ldd	r11, Z+1	; 0x01
    135a:	36 fe       	sbrs	r3, 6
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <vfprintf+0x16c>
    135e:	69 2d       	mov	r22, r9
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <vfprintf+0x170>
    1364:	6f ef       	ldi	r22, 0xFF	; 255
    1366:	7f ef       	ldi	r23, 0xFF	; 255
    1368:	c5 01       	movw	r24, r10
    136a:	4e d1       	rcall	.+668    	; 0x1608 <strnlen>
    136c:	4c 01       	movw	r8, r24
    136e:	82 01       	movw	r16, r4
    1370:	f3 2d       	mov	r31, r3
    1372:	ff 77       	andi	r31, 0x7F	; 127
    1374:	3f 2e       	mov	r3, r31
    1376:	15 c0       	rjmp	.+42     	; 0x13a2 <vfprintf+0x1aa>
    1378:	28 01       	movw	r4, r16
    137a:	22 e0       	ldi	r18, 0x02	; 2
    137c:	42 0e       	add	r4, r18
    137e:	51 1c       	adc	r5, r1
    1380:	f8 01       	movw	r30, r16
    1382:	a0 80       	ld	r10, Z
    1384:	b1 80       	ldd	r11, Z+1	; 0x01
    1386:	36 fe       	sbrs	r3, 6
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <vfprintf+0x198>
    138a:	69 2d       	mov	r22, r9
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <vfprintf+0x19c>
    1390:	6f ef       	ldi	r22, 0xFF	; 255
    1392:	7f ef       	ldi	r23, 0xFF	; 255
    1394:	c5 01       	movw	r24, r10
    1396:	2d d1       	rcall	.+602    	; 0x15f2 <strnlen_P>
    1398:	4c 01       	movw	r8, r24
    139a:	f3 2d       	mov	r31, r3
    139c:	f0 68       	ori	r31, 0x80	; 128
    139e:	3f 2e       	mov	r3, r31
    13a0:	82 01       	movw	r16, r4
    13a2:	33 fc       	sbrc	r3, 3
    13a4:	19 c0       	rjmp	.+50     	; 0x13d8 <vfprintf+0x1e0>
    13a6:	82 2d       	mov	r24, r2
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	88 16       	cp	r8, r24
    13ac:	99 06       	cpc	r9, r25
    13ae:	a0 f4       	brcc	.+40     	; 0x13d8 <vfprintf+0x1e0>
    13b0:	b6 01       	movw	r22, r12
    13b2:	80 e2       	ldi	r24, 0x20	; 32
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	33 d1       	rcall	.+614    	; 0x161e <fputc>
    13b8:	2a 94       	dec	r2
    13ba:	f5 cf       	rjmp	.-22     	; 0x13a6 <vfprintf+0x1ae>
    13bc:	f5 01       	movw	r30, r10
    13be:	37 fc       	sbrc	r3, 7
    13c0:	85 91       	lpm	r24, Z+
    13c2:	37 fe       	sbrs	r3, 7
    13c4:	81 91       	ld	r24, Z+
    13c6:	5f 01       	movw	r10, r30
    13c8:	b6 01       	movw	r22, r12
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	28 d1       	rcall	.+592    	; 0x161e <fputc>
    13ce:	21 10       	cpse	r2, r1
    13d0:	2a 94       	dec	r2
    13d2:	21 e0       	ldi	r18, 0x01	; 1
    13d4:	82 1a       	sub	r8, r18
    13d6:	91 08       	sbc	r9, r1
    13d8:	81 14       	cp	r8, r1
    13da:	91 04       	cpc	r9, r1
    13dc:	79 f7       	brne	.-34     	; 0x13bc <vfprintf+0x1c4>
    13de:	e1 c0       	rjmp	.+450    	; 0x15a2 <vfprintf+0x3aa>
    13e0:	84 36       	cpi	r24, 0x64	; 100
    13e2:	11 f0       	breq	.+4      	; 0x13e8 <vfprintf+0x1f0>
    13e4:	89 36       	cpi	r24, 0x69	; 105
    13e6:	39 f5       	brne	.+78     	; 0x1436 <vfprintf+0x23e>
    13e8:	f8 01       	movw	r30, r16
    13ea:	37 fe       	sbrs	r3, 7
    13ec:	07 c0       	rjmp	.+14     	; 0x13fc <vfprintf+0x204>
    13ee:	60 81       	ld	r22, Z
    13f0:	71 81       	ldd	r23, Z+1	; 0x01
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	0c 5f       	subi	r16, 0xFC	; 252
    13f8:	1f 4f       	sbci	r17, 0xFF	; 255
    13fa:	08 c0       	rjmp	.+16     	; 0x140c <vfprintf+0x214>
    13fc:	60 81       	ld	r22, Z
    13fe:	71 81       	ldd	r23, Z+1	; 0x01
    1400:	07 2e       	mov	r0, r23
    1402:	00 0c       	add	r0, r0
    1404:	88 0b       	sbc	r24, r24
    1406:	99 0b       	sbc	r25, r25
    1408:	0e 5f       	subi	r16, 0xFE	; 254
    140a:	1f 4f       	sbci	r17, 0xFF	; 255
    140c:	f3 2d       	mov	r31, r3
    140e:	ff 76       	andi	r31, 0x6F	; 111
    1410:	3f 2e       	mov	r3, r31
    1412:	97 ff       	sbrs	r25, 7
    1414:	09 c0       	rjmp	.+18     	; 0x1428 <vfprintf+0x230>
    1416:	90 95       	com	r25
    1418:	80 95       	com	r24
    141a:	70 95       	com	r23
    141c:	61 95       	neg	r22
    141e:	7f 4f       	sbci	r23, 0xFF	; 255
    1420:	8f 4f       	sbci	r24, 0xFF	; 255
    1422:	9f 4f       	sbci	r25, 0xFF	; 255
    1424:	f0 68       	ori	r31, 0x80	; 128
    1426:	3f 2e       	mov	r3, r31
    1428:	2a e0       	ldi	r18, 0x0A	; 10
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	a3 01       	movw	r20, r6
    142e:	33 d1       	rcall	.+614    	; 0x1696 <__ultoa_invert>
    1430:	88 2e       	mov	r8, r24
    1432:	86 18       	sub	r8, r6
    1434:	44 c0       	rjmp	.+136    	; 0x14be <vfprintf+0x2c6>
    1436:	85 37       	cpi	r24, 0x75	; 117
    1438:	31 f4       	brne	.+12     	; 0x1446 <vfprintf+0x24e>
    143a:	23 2d       	mov	r18, r3
    143c:	2f 7e       	andi	r18, 0xEF	; 239
    143e:	b2 2e       	mov	r11, r18
    1440:	2a e0       	ldi	r18, 0x0A	; 10
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	25 c0       	rjmp	.+74     	; 0x1490 <vfprintf+0x298>
    1446:	93 2d       	mov	r25, r3
    1448:	99 7f       	andi	r25, 0xF9	; 249
    144a:	b9 2e       	mov	r11, r25
    144c:	8f 36       	cpi	r24, 0x6F	; 111
    144e:	c1 f0       	breq	.+48     	; 0x1480 <vfprintf+0x288>
    1450:	18 f4       	brcc	.+6      	; 0x1458 <vfprintf+0x260>
    1452:	88 35       	cpi	r24, 0x58	; 88
    1454:	79 f0       	breq	.+30     	; 0x1474 <vfprintf+0x27c>
    1456:	ae c0       	rjmp	.+348    	; 0x15b4 <vfprintf+0x3bc>
    1458:	80 37       	cpi	r24, 0x70	; 112
    145a:	19 f0       	breq	.+6      	; 0x1462 <vfprintf+0x26a>
    145c:	88 37       	cpi	r24, 0x78	; 120
    145e:	21 f0       	breq	.+8      	; 0x1468 <vfprintf+0x270>
    1460:	a9 c0       	rjmp	.+338    	; 0x15b4 <vfprintf+0x3bc>
    1462:	e9 2f       	mov	r30, r25
    1464:	e0 61       	ori	r30, 0x10	; 16
    1466:	be 2e       	mov	r11, r30
    1468:	b4 fe       	sbrs	r11, 4
    146a:	0d c0       	rjmp	.+26     	; 0x1486 <vfprintf+0x28e>
    146c:	fb 2d       	mov	r31, r11
    146e:	f4 60       	ori	r31, 0x04	; 4
    1470:	bf 2e       	mov	r11, r31
    1472:	09 c0       	rjmp	.+18     	; 0x1486 <vfprintf+0x28e>
    1474:	34 fe       	sbrs	r3, 4
    1476:	0a c0       	rjmp	.+20     	; 0x148c <vfprintf+0x294>
    1478:	29 2f       	mov	r18, r25
    147a:	26 60       	ori	r18, 0x06	; 6
    147c:	b2 2e       	mov	r11, r18
    147e:	06 c0       	rjmp	.+12     	; 0x148c <vfprintf+0x294>
    1480:	28 e0       	ldi	r18, 0x08	; 8
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	05 c0       	rjmp	.+10     	; 0x1490 <vfprintf+0x298>
    1486:	20 e1       	ldi	r18, 0x10	; 16
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <vfprintf+0x298>
    148c:	20 e1       	ldi	r18, 0x10	; 16
    148e:	32 e0       	ldi	r19, 0x02	; 2
    1490:	f8 01       	movw	r30, r16
    1492:	b7 fe       	sbrs	r11, 7
    1494:	07 c0       	rjmp	.+14     	; 0x14a4 <vfprintf+0x2ac>
    1496:	60 81       	ld	r22, Z
    1498:	71 81       	ldd	r23, Z+1	; 0x01
    149a:	82 81       	ldd	r24, Z+2	; 0x02
    149c:	93 81       	ldd	r25, Z+3	; 0x03
    149e:	0c 5f       	subi	r16, 0xFC	; 252
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
    14a2:	06 c0       	rjmp	.+12     	; 0x14b0 <vfprintf+0x2b8>
    14a4:	60 81       	ld	r22, Z
    14a6:	71 81       	ldd	r23, Z+1	; 0x01
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 5f       	subi	r16, 0xFE	; 254
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	a3 01       	movw	r20, r6
    14b2:	f1 d0       	rcall	.+482    	; 0x1696 <__ultoa_invert>
    14b4:	88 2e       	mov	r8, r24
    14b6:	86 18       	sub	r8, r6
    14b8:	fb 2d       	mov	r31, r11
    14ba:	ff 77       	andi	r31, 0x7F	; 127
    14bc:	3f 2e       	mov	r3, r31
    14be:	36 fe       	sbrs	r3, 6
    14c0:	0d c0       	rjmp	.+26     	; 0x14dc <vfprintf+0x2e4>
    14c2:	23 2d       	mov	r18, r3
    14c4:	2e 7f       	andi	r18, 0xFE	; 254
    14c6:	a2 2e       	mov	r10, r18
    14c8:	89 14       	cp	r8, r9
    14ca:	58 f4       	brcc	.+22     	; 0x14e2 <vfprintf+0x2ea>
    14cc:	34 fe       	sbrs	r3, 4
    14ce:	0b c0       	rjmp	.+22     	; 0x14e6 <vfprintf+0x2ee>
    14d0:	32 fc       	sbrc	r3, 2
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <vfprintf+0x2ee>
    14d4:	83 2d       	mov	r24, r3
    14d6:	8e 7e       	andi	r24, 0xEE	; 238
    14d8:	a8 2e       	mov	r10, r24
    14da:	05 c0       	rjmp	.+10     	; 0x14e6 <vfprintf+0x2ee>
    14dc:	b8 2c       	mov	r11, r8
    14de:	a3 2c       	mov	r10, r3
    14e0:	03 c0       	rjmp	.+6      	; 0x14e8 <vfprintf+0x2f0>
    14e2:	b8 2c       	mov	r11, r8
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <vfprintf+0x2f0>
    14e6:	b9 2c       	mov	r11, r9
    14e8:	a4 fe       	sbrs	r10, 4
    14ea:	0f c0       	rjmp	.+30     	; 0x150a <vfprintf+0x312>
    14ec:	fe 01       	movw	r30, r28
    14ee:	e8 0d       	add	r30, r8
    14f0:	f1 1d       	adc	r31, r1
    14f2:	80 81       	ld	r24, Z
    14f4:	80 33       	cpi	r24, 0x30	; 48
    14f6:	21 f4       	brne	.+8      	; 0x1500 <vfprintf+0x308>
    14f8:	9a 2d       	mov	r25, r10
    14fa:	99 7e       	andi	r25, 0xE9	; 233
    14fc:	a9 2e       	mov	r10, r25
    14fe:	09 c0       	rjmp	.+18     	; 0x1512 <vfprintf+0x31a>
    1500:	a2 fe       	sbrs	r10, 2
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <vfprintf+0x318>
    1504:	b3 94       	inc	r11
    1506:	b3 94       	inc	r11
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <vfprintf+0x31a>
    150a:	8a 2d       	mov	r24, r10
    150c:	86 78       	andi	r24, 0x86	; 134
    150e:	09 f0       	breq	.+2      	; 0x1512 <vfprintf+0x31a>
    1510:	b3 94       	inc	r11
    1512:	a3 fc       	sbrc	r10, 3
    1514:	10 c0       	rjmp	.+32     	; 0x1536 <vfprintf+0x33e>
    1516:	a0 fe       	sbrs	r10, 0
    1518:	06 c0       	rjmp	.+12     	; 0x1526 <vfprintf+0x32e>
    151a:	b2 14       	cp	r11, r2
    151c:	80 f4       	brcc	.+32     	; 0x153e <vfprintf+0x346>
    151e:	28 0c       	add	r2, r8
    1520:	92 2c       	mov	r9, r2
    1522:	9b 18       	sub	r9, r11
    1524:	0d c0       	rjmp	.+26     	; 0x1540 <vfprintf+0x348>
    1526:	b2 14       	cp	r11, r2
    1528:	58 f4       	brcc	.+22     	; 0x1540 <vfprintf+0x348>
    152a:	b6 01       	movw	r22, r12
    152c:	80 e2       	ldi	r24, 0x20	; 32
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	76 d0       	rcall	.+236    	; 0x161e <fputc>
    1532:	b3 94       	inc	r11
    1534:	f8 cf       	rjmp	.-16     	; 0x1526 <vfprintf+0x32e>
    1536:	b2 14       	cp	r11, r2
    1538:	18 f4       	brcc	.+6      	; 0x1540 <vfprintf+0x348>
    153a:	2b 18       	sub	r2, r11
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <vfprintf+0x34a>
    153e:	98 2c       	mov	r9, r8
    1540:	21 2c       	mov	r2, r1
    1542:	a4 fe       	sbrs	r10, 4
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <vfprintf+0x36c>
    1546:	b6 01       	movw	r22, r12
    1548:	80 e3       	ldi	r24, 0x30	; 48
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	68 d0       	rcall	.+208    	; 0x161e <fputc>
    154e:	a2 fe       	sbrs	r10, 2
    1550:	16 c0       	rjmp	.+44     	; 0x157e <vfprintf+0x386>
    1552:	a1 fc       	sbrc	r10, 1
    1554:	03 c0       	rjmp	.+6      	; 0x155c <vfprintf+0x364>
    1556:	88 e7       	ldi	r24, 0x78	; 120
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <vfprintf+0x368>
    155c:	88 e5       	ldi	r24, 0x58	; 88
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	b6 01       	movw	r22, r12
    1562:	0c c0       	rjmp	.+24     	; 0x157c <vfprintf+0x384>
    1564:	8a 2d       	mov	r24, r10
    1566:	86 78       	andi	r24, 0x86	; 134
    1568:	51 f0       	breq	.+20     	; 0x157e <vfprintf+0x386>
    156a:	a1 fe       	sbrs	r10, 1
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <vfprintf+0x37a>
    156e:	8b e2       	ldi	r24, 0x2B	; 43
    1570:	01 c0       	rjmp	.+2      	; 0x1574 <vfprintf+0x37c>
    1572:	80 e2       	ldi	r24, 0x20	; 32
    1574:	a7 fc       	sbrc	r10, 7
    1576:	8d e2       	ldi	r24, 0x2D	; 45
    1578:	b6 01       	movw	r22, r12
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	50 d0       	rcall	.+160    	; 0x161e <fputc>
    157e:	89 14       	cp	r8, r9
    1580:	30 f4       	brcc	.+12     	; 0x158e <vfprintf+0x396>
    1582:	b6 01       	movw	r22, r12
    1584:	80 e3       	ldi	r24, 0x30	; 48
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	4a d0       	rcall	.+148    	; 0x161e <fputc>
    158a:	9a 94       	dec	r9
    158c:	f8 cf       	rjmp	.-16     	; 0x157e <vfprintf+0x386>
    158e:	8a 94       	dec	r8
    1590:	f3 01       	movw	r30, r6
    1592:	e8 0d       	add	r30, r8
    1594:	f1 1d       	adc	r31, r1
    1596:	80 81       	ld	r24, Z
    1598:	b6 01       	movw	r22, r12
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	40 d0       	rcall	.+128    	; 0x161e <fputc>
    159e:	81 10       	cpse	r8, r1
    15a0:	f6 cf       	rjmp	.-20     	; 0x158e <vfprintf+0x396>
    15a2:	22 20       	and	r2, r2
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <vfprintf+0x3b0>
    15a6:	4e ce       	rjmp	.-868    	; 0x1244 <vfprintf+0x4c>
    15a8:	b6 01       	movw	r22, r12
    15aa:	80 e2       	ldi	r24, 0x20	; 32
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	37 d0       	rcall	.+110    	; 0x161e <fputc>
    15b0:	2a 94       	dec	r2
    15b2:	f7 cf       	rjmp	.-18     	; 0x15a2 <vfprintf+0x3aa>
    15b4:	f6 01       	movw	r30, r12
    15b6:	86 81       	ldd	r24, Z+6	; 0x06
    15b8:	97 81       	ldd	r25, Z+7	; 0x07
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <vfprintf+0x3c8>
    15bc:	8f ef       	ldi	r24, 0xFF	; 255
    15be:	9f ef       	ldi	r25, 0xFF	; 255
    15c0:	2b 96       	adiw	r28, 0x0b	; 11
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	df 90       	pop	r13
    15da:	cf 90       	pop	r12
    15dc:	bf 90       	pop	r11
    15de:	af 90       	pop	r10
    15e0:	9f 90       	pop	r9
    15e2:	8f 90       	pop	r8
    15e4:	7f 90       	pop	r7
    15e6:	6f 90       	pop	r6
    15e8:	5f 90       	pop	r5
    15ea:	4f 90       	pop	r4
    15ec:	3f 90       	pop	r3
    15ee:	2f 90       	pop	r2
    15f0:	08 95       	ret

000015f2 <strnlen_P>:
    15f2:	fc 01       	movw	r30, r24
    15f4:	05 90       	lpm	r0, Z+
    15f6:	61 50       	subi	r22, 0x01	; 1
    15f8:	70 40       	sbci	r23, 0x00	; 0
    15fa:	01 10       	cpse	r0, r1
    15fc:	d8 f7       	brcc	.-10     	; 0x15f4 <strnlen_P+0x2>
    15fe:	80 95       	com	r24
    1600:	90 95       	com	r25
    1602:	8e 0f       	add	r24, r30
    1604:	9f 1f       	adc	r25, r31
    1606:	08 95       	ret

00001608 <strnlen>:
    1608:	fc 01       	movw	r30, r24
    160a:	61 50       	subi	r22, 0x01	; 1
    160c:	70 40       	sbci	r23, 0x00	; 0
    160e:	01 90       	ld	r0, Z+
    1610:	01 10       	cpse	r0, r1
    1612:	d8 f7       	brcc	.-10     	; 0x160a <strnlen+0x2>
    1614:	80 95       	com	r24
    1616:	90 95       	com	r25
    1618:	8e 0f       	add	r24, r30
    161a:	9f 1f       	adc	r25, r31
    161c:	08 95       	ret

0000161e <fputc>:
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	fb 01       	movw	r30, r22
    1628:	23 81       	ldd	r18, Z+3	; 0x03
    162a:	21 fd       	sbrc	r18, 1
    162c:	03 c0       	rjmp	.+6      	; 0x1634 <fputc+0x16>
    162e:	8f ef       	ldi	r24, 0xFF	; 255
    1630:	9f ef       	ldi	r25, 0xFF	; 255
    1632:	2c c0       	rjmp	.+88     	; 0x168c <fputc+0x6e>
    1634:	22 ff       	sbrs	r18, 2
    1636:	16 c0       	rjmp	.+44     	; 0x1664 <fputc+0x46>
    1638:	46 81       	ldd	r20, Z+6	; 0x06
    163a:	57 81       	ldd	r21, Z+7	; 0x07
    163c:	24 81       	ldd	r18, Z+4	; 0x04
    163e:	35 81       	ldd	r19, Z+5	; 0x05
    1640:	42 17       	cp	r20, r18
    1642:	53 07       	cpc	r21, r19
    1644:	44 f4       	brge	.+16     	; 0x1656 <fputc+0x38>
    1646:	a0 81       	ld	r26, Z
    1648:	b1 81       	ldd	r27, Z+1	; 0x01
    164a:	9d 01       	movw	r18, r26
    164c:	2f 5f       	subi	r18, 0xFF	; 255
    164e:	3f 4f       	sbci	r19, 0xFF	; 255
    1650:	31 83       	std	Z+1, r19	; 0x01
    1652:	20 83       	st	Z, r18
    1654:	8c 93       	st	X, r24
    1656:	26 81       	ldd	r18, Z+6	; 0x06
    1658:	37 81       	ldd	r19, Z+7	; 0x07
    165a:	2f 5f       	subi	r18, 0xFF	; 255
    165c:	3f 4f       	sbci	r19, 0xFF	; 255
    165e:	37 83       	std	Z+7, r19	; 0x07
    1660:	26 83       	std	Z+6, r18	; 0x06
    1662:	14 c0       	rjmp	.+40     	; 0x168c <fputc+0x6e>
    1664:	8b 01       	movw	r16, r22
    1666:	ec 01       	movw	r28, r24
    1668:	fb 01       	movw	r30, r22
    166a:	00 84       	ldd	r0, Z+8	; 0x08
    166c:	f1 85       	ldd	r31, Z+9	; 0x09
    166e:	e0 2d       	mov	r30, r0
    1670:	09 95       	icall
    1672:	89 2b       	or	r24, r25
    1674:	e1 f6       	brne	.-72     	; 0x162e <fputc+0x10>
    1676:	d8 01       	movw	r26, r16
    1678:	16 96       	adiw	r26, 0x06	; 6
    167a:	8d 91       	ld	r24, X+
    167c:	9c 91       	ld	r25, X
    167e:	17 97       	sbiw	r26, 0x07	; 7
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	17 96       	adiw	r26, 0x07	; 7
    1684:	9c 93       	st	X, r25
    1686:	8e 93       	st	-X, r24
    1688:	16 97       	sbiw	r26, 0x06	; 6
    168a:	ce 01       	movw	r24, r28
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	1f 91       	pop	r17
    1692:	0f 91       	pop	r16
    1694:	08 95       	ret

00001696 <__ultoa_invert>:
    1696:	fa 01       	movw	r30, r20
    1698:	aa 27       	eor	r26, r26
    169a:	28 30       	cpi	r18, 0x08	; 8
    169c:	51 f1       	breq	.+84     	; 0x16f2 <__ultoa_invert+0x5c>
    169e:	20 31       	cpi	r18, 0x10	; 16
    16a0:	81 f1       	breq	.+96     	; 0x1702 <__ultoa_invert+0x6c>
    16a2:	e8 94       	clt
    16a4:	6f 93       	push	r22
    16a6:	6e 7f       	andi	r22, 0xFE	; 254
    16a8:	6e 5f       	subi	r22, 0xFE	; 254
    16aa:	7f 4f       	sbci	r23, 0xFF	; 255
    16ac:	8f 4f       	sbci	r24, 0xFF	; 255
    16ae:	9f 4f       	sbci	r25, 0xFF	; 255
    16b0:	af 4f       	sbci	r26, 0xFF	; 255
    16b2:	b1 e0       	ldi	r27, 0x01	; 1
    16b4:	3e d0       	rcall	.+124    	; 0x1732 <__ultoa_invert+0x9c>
    16b6:	b4 e0       	ldi	r27, 0x04	; 4
    16b8:	3c d0       	rcall	.+120    	; 0x1732 <__ultoa_invert+0x9c>
    16ba:	67 0f       	add	r22, r23
    16bc:	78 1f       	adc	r23, r24
    16be:	89 1f       	adc	r24, r25
    16c0:	9a 1f       	adc	r25, r26
    16c2:	a1 1d       	adc	r26, r1
    16c4:	68 0f       	add	r22, r24
    16c6:	79 1f       	adc	r23, r25
    16c8:	8a 1f       	adc	r24, r26
    16ca:	91 1d       	adc	r25, r1
    16cc:	a1 1d       	adc	r26, r1
    16ce:	6a 0f       	add	r22, r26
    16d0:	71 1d       	adc	r23, r1
    16d2:	81 1d       	adc	r24, r1
    16d4:	91 1d       	adc	r25, r1
    16d6:	a1 1d       	adc	r26, r1
    16d8:	20 d0       	rcall	.+64     	; 0x171a <__ultoa_invert+0x84>
    16da:	09 f4       	brne	.+2      	; 0x16de <__ultoa_invert+0x48>
    16dc:	68 94       	set
    16de:	3f 91       	pop	r19
    16e0:	2a e0       	ldi	r18, 0x0A	; 10
    16e2:	26 9f       	mul	r18, r22
    16e4:	11 24       	eor	r1, r1
    16e6:	30 19       	sub	r19, r0
    16e8:	30 5d       	subi	r19, 0xD0	; 208
    16ea:	31 93       	st	Z+, r19
    16ec:	de f6       	brtc	.-74     	; 0x16a4 <__ultoa_invert+0xe>
    16ee:	cf 01       	movw	r24, r30
    16f0:	08 95       	ret
    16f2:	46 2f       	mov	r20, r22
    16f4:	47 70       	andi	r20, 0x07	; 7
    16f6:	40 5d       	subi	r20, 0xD0	; 208
    16f8:	41 93       	st	Z+, r20
    16fa:	b3 e0       	ldi	r27, 0x03	; 3
    16fc:	0f d0       	rcall	.+30     	; 0x171c <__ultoa_invert+0x86>
    16fe:	c9 f7       	brne	.-14     	; 0x16f2 <__ultoa_invert+0x5c>
    1700:	f6 cf       	rjmp	.-20     	; 0x16ee <__ultoa_invert+0x58>
    1702:	46 2f       	mov	r20, r22
    1704:	4f 70       	andi	r20, 0x0F	; 15
    1706:	40 5d       	subi	r20, 0xD0	; 208
    1708:	4a 33       	cpi	r20, 0x3A	; 58
    170a:	18 f0       	brcs	.+6      	; 0x1712 <__ultoa_invert+0x7c>
    170c:	49 5d       	subi	r20, 0xD9	; 217
    170e:	31 fd       	sbrc	r19, 1
    1710:	40 52       	subi	r20, 0x20	; 32
    1712:	41 93       	st	Z+, r20
    1714:	02 d0       	rcall	.+4      	; 0x171a <__ultoa_invert+0x84>
    1716:	a9 f7       	brne	.-22     	; 0x1702 <__ultoa_invert+0x6c>
    1718:	ea cf       	rjmp	.-44     	; 0x16ee <__ultoa_invert+0x58>
    171a:	b4 e0       	ldi	r27, 0x04	; 4
    171c:	a6 95       	lsr	r26
    171e:	97 95       	ror	r25
    1720:	87 95       	ror	r24
    1722:	77 95       	ror	r23
    1724:	67 95       	ror	r22
    1726:	ba 95       	dec	r27
    1728:	c9 f7       	brne	.-14     	; 0x171c <__ultoa_invert+0x86>
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	61 05       	cpc	r22, r1
    172e:	71 05       	cpc	r23, r1
    1730:	08 95       	ret
    1732:	9b 01       	movw	r18, r22
    1734:	ac 01       	movw	r20, r24
    1736:	0a 2e       	mov	r0, r26
    1738:	06 94       	lsr	r0
    173a:	57 95       	ror	r21
    173c:	47 95       	ror	r20
    173e:	37 95       	ror	r19
    1740:	27 95       	ror	r18
    1742:	ba 95       	dec	r27
    1744:	c9 f7       	brne	.-14     	; 0x1738 <__ultoa_invert+0xa2>
    1746:	62 0f       	add	r22, r18
    1748:	73 1f       	adc	r23, r19
    174a:	84 1f       	adc	r24, r20
    174c:	95 1f       	adc	r25, r21
    174e:	a0 1d       	adc	r26, r0
    1750:	08 95       	ret

00001752 <_exit>:
    1752:	f8 94       	cli

00001754 <__stop_program>:
    1754:	ff cf       	rjmp	.-2      	; 0x1754 <__stop_program>
