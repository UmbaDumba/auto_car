
AUTO_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab7  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cb  00000000  00000000  00000e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000433  00000000  00000000  000016f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000473  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000111  00000000  00000000  00002093  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	36 c0       	rjmp	.+108    	; 0xae <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	24 d0       	rcall	.+72     	; 0xf2 <main>
  aa:	b0 c0       	rjmp	.+352    	; 0x20c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_16>:
	// todo		// FND 문구 (출력할것)
		
}t_car_info;

ISR(TIMER0_OVF_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
	TCNT0 = 6; // 6 ~ 256으로 돌리기 위해
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	82 bf       	out	0x32, r24	; 50
	msec_count++;
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <init_timer0>:
    }
}

void init_timer0(void)
{
	TCNT0 = 6;
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
  e4:	83 b7       	in	r24, 0x33	; 51
  e6:	84 60       	ori	r24, 0x04	; 4
  e8:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
  ea:	87 b7       	in	r24, 0x37	; 55
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	87 bf       	out	0x37, r24	; 55
  f0:	08 95       	ret

000000f2 <main>:

int main(void)
{
	// TODO
    // 각종 초기화
	init_timer0();
  f2:	f6 df       	rcall	.-20     	; 0xe0 <init_timer0>
	init_timer1();
  f4:	33 d0       	rcall	.+102    	; 0x15c <init_timer1>
	init_L298N();
  f6:	43 d0       	rcall	.+134    	; 0x17e <init_L298N>
  f8:	78 94       	sei
	sei();
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
		// LCD 제어하기
		// FND 제어하기
		// 부저 제어하기
		// 블루투스 커멘드 처리
		
		if(msec_count > 4000)
  fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 102:	81 3a       	cpi	r24, 0xA1	; 161
 104:	9f 40       	sbci	r25, 0x0F	; 15
 106:	2c f0       	brlt	.+10     	; 0x112 <main+0x20>
 108:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
		{
			msec_count = 0;
 10c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 110:	f4 cf       	rjmp	.-24     	; 0xfa <main+0x8>
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
		}else if(msec_count > 3000)
 116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 11a:	89 3b       	cpi	r24, 0xB9	; 185
 11c:	9b 40       	sbci	r25, 0x0B	; 11
 11e:	24 f0       	brlt	.+8      	; 0x128 <main+0x36>
		{
			motor_turn_left(500);
 120:	84 ef       	ldi	r24, 0xF4	; 244
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	59 d0       	rcall	.+178    	; 0x1d8 <motor_turn_left>
 126:	e9 cf       	rjmp	.-46     	; 0xfa <main+0x8>
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
		}else if(msec_count > 2000)
 12c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 130:	81 3d       	cpi	r24, 0xD1	; 209
 132:	97 40       	sbci	r25, 0x07	; 7
 134:	24 f0       	brlt	.+8      	; 0x13e <main+0x4c>
		{
			motor_turn_right(500);
 136:	84 ef       	ldi	r24, 0xF4	; 244
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	5b d0       	rcall	.+182    	; 0x1f2 <motor_turn_right>
 13c:	de cf       	rjmp	.-68     	; 0xfa <main+0x8>
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
		}else if(msec_count > 1000)
 142:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 146:	89 3e       	cpi	r24, 0xE9	; 233
 148:	93 40       	sbci	r25, 0x03	; 3
 14a:	24 f0       	brlt	.+8      	; 0x154 <main+0x62>
		{
			motor_direction_backward(500);
 14c:	84 ef       	ldi	r24, 0xF4	; 244
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	35 d0       	rcall	.+106    	; 0x1bc <motor_direction_backward>
 152:	d3 cf       	rjmp	.-90     	; 0xfa <main+0x8>
		}else
		{
			motor_direction_forward(500);
 154:	84 ef       	ldi	r24, 0xF4	; 244
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	23 d0       	rcall	.+70     	; 0x1a0 <motor_direction_forward>
 15a:	cf cf       	rjmp	.-98     	; 0xfa <main+0x8>

0000015c <init_timer1>:
 15c:	8e b5       	in	r24, 0x2e	; 46
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
								     1 <<MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
	
	// direction port set
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 15e:	83 60       	ori	r24, 0x03	; 3
 160:	8e bd       	out	0x2e, r24	; 46
 162:	8f b5       	in	r24, 0x2f	; 47
 164:	82 60       	ori	r24, 0x02	; 2
 166:	8f bd       	out	0x2f, r24	; 47
 168:	8e b5       	in	r24, 0x2e	; 46
 16a:	88 61       	ori	r24, 0x18	; 24
 16c:	8e bd       	out	0x2e, r24	; 46
 16e:	8f b5       	in	r24, 0x2f	; 47
 170:	80 6a       	ori	r24, 0xA0	; 160
 172:	8f bd       	out	0x2f, r24	; 47
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	93 e0       	ldi	r25, 0x03	; 3
 178:	97 bd       	out	0x27, r25	; 39
 17a:	86 bd       	out	0x26, r24	; 38
 17c:	08 95       	ret

0000017e <init_L298N>:
 17e:	87 b3       	in	r24, 0x17	; 23
 180:	80 66       	ori	r24, 0x60	; 96
 182:	87 bb       	out	0x17, r24	; 23
 184:	e1 e6       	ldi	r30, 0x61	; 97
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	8f 60       	ori	r24, 0x0F	; 15
 18c:	80 83       	st	Z, r24
 18e:	e2 e6       	ldi	r30, 0x62	; 98
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	80 7f       	andi	r24, 0xF0	; 240
 196:	80 83       	st	Z, r24
 198:	80 81       	ld	r24, Z
 19a:	85 60       	ori	r24, 0x05	; 5
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret

000001a0 <motor_direction_forward>:
								   1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM;
}

void motor_direction_forward(int speed)
{
 1a0:	9c 01       	movw	r18, r24
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 1a2:	e2 e6       	ldi	r30, 0x62	; 98
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	90 81       	ld	r25, Z
 1a8:	90 7f       	andi	r25, 0xF0	; 240
 1aa:	90 83       	st	Z, r25
									 1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
		
	// direction 전진모드 설정 (정회전)
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN3_NUM;
 1ac:	90 81       	ld	r25, Z
 1ae:	95 60       	ori	r25, 0x05	; 5
 1b0:	90 83       	st	Z, r25
	
	// 속도 적용 (양쪽 바퀴에 같은 속도)
	MOTOR_LEFT_PWM = MOTOR_RIGHT_PWM = speed;
 1b2:	39 bd       	out	0x29, r19	; 41
 1b4:	28 bd       	out	0x28, r18	; 40
 1b6:	3b bd       	out	0x2b, r19	; 43
 1b8:	2a bd       	out	0x2a, r18	; 42
 1ba:	08 95       	ret

000001bc <motor_direction_backward>:
}

void motor_direction_backward(int speed)
{
 1bc:	9c 01       	movw	r18, r24
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 1be:	e2 e6       	ldi	r30, 0x62	; 98
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	90 81       	ld	r25, Z
 1c4:	90 7f       	andi	r25, 0xF0	; 240
 1c6:	90 83       	st	Z, r25
									 1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
		
	// direction 후진모드 설정 (역회전)
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN2_NUM | 1 << MOTOR_DRIVER_IN4_NUM;
 1c8:	90 81       	ld	r25, Z
 1ca:	9a 60       	ori	r25, 0x0A	; 10
 1cc:	90 83       	st	Z, r25
	
	// 속도 적용 (양쪽 바퀴에 같은 속도)
	MOTOR_LEFT_PWM = MOTOR_RIGHT_PWM = speed;
 1ce:	39 bd       	out	0x29, r19	; 41
 1d0:	28 bd       	out	0x28, r18	; 40
 1d2:	3b bd       	out	0x2b, r19	; 43
 1d4:	2a bd       	out	0x2a, r18	; 42
 1d6:	08 95       	ret

000001d8 <motor_turn_left>:
}

void motor_turn_left(int speed)
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
	motor_direction_forward(0); // 전진모드 설정
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	de df       	rcall	.-68     	; 0x1a0 <motor_direction_forward>
	
	MOTOR_LEFT_PWM = 0;
 1e4:	1b bc       	out	0x2b, r1	; 43
 1e6:	1a bc       	out	0x2a, r1	; 42
	MOTOR_RIGHT_PWM = speed;
 1e8:	d9 bd       	out	0x29, r29	; 41
 1ea:	c8 bd       	out	0x28, r28	; 40
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <motor_turn_right>:

void motor_turn_right(int speed)
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	ec 01       	movw	r28, r24
	motor_direction_forward(0); // 전진모드 설정
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	d1 df       	rcall	.-94     	; 0x1a0 <motor_direction_forward>
	MOTOR_LEFT_PWM = speed;
 1fe:	db bd       	out	0x2b, r29	; 43
 200:	ca bd       	out	0x2a, r28	; 42
	MOTOR_RIGHT_PWM = 0;
 202:	19 bc       	out	0x29, r1	; 41
 204:	18 bc       	out	0x28, r1	; 40
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
