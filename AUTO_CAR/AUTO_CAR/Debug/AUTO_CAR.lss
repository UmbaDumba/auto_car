
AUTO_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000026a  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000300  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba9  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000952  00000000  00000000  00000fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051a  00000000  00000000  00001913  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049f  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014d  00000000  00000000  00002407  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002554  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	d1 c0       	rjmp	.+418    	; 0x21c <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e6       	ldi	r30, 0x6A	; 106
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	24 d0       	rcall	.+72     	; 0x10c <main>
  c4:	d0 c0       	rjmp	.+416    	; 0x266 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
	// todo		// FND 문구 (출력할것)
		
}t_car_info;

ISR(TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	TCNT0 = 6; // 6 ~ 256으로 돌리기 위해
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	82 bf       	out	0x32, r24	; 50
	msec_count++;
  da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  de:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
  e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <init_timer0>:
    }
}

void init_timer0(void)
{
	TCNT0 = 6;
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
  fe:	83 b7       	in	r24, 0x33	; 51
 100:	84 60       	ori	r24, 0x04	; 4
 102:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
 104:	87 b7       	in	r24, 0x37	; 55
 106:	81 60       	ori	r24, 0x01	; 1
 108:	87 bf       	out	0x37, r24	; 55
 10a:	08 95       	ret

0000010c <main>:

int main(void)
{
	// TODO
    // 각종 초기화
	init_timer0();
 10c:	f6 df       	rcall	.-20     	; 0xfa <init_timer0>
	init_timer1();
 10e:	25 d0       	rcall	.+74     	; 0x15a <init_timer1>
	init_L298N();
 110:	35 d0       	rcall	.+106    	; 0x17c <init_L298N>
 112:	94 d0       	rcall	.+296    	; 0x23c <init_uart1>
	init_uart1();
 114:	78 94       	sei
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
		// LCD 제어하기
		// FND 제어하기
		// 부저 제어하기
		// 블루투스 커멘드 처리
		
		if(bt_data == 'f')
 11a:	86 36       	cpi	r24, 0x66	; 102
 11c:	21 f4       	brne	.+8      	; 0x126 <main+0x1a>
 11e:	84 ef       	ldi	r24, 0xF4	; 244
		{
			motor_direction_forward(500);
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	46 d0       	rcall	.+140    	; 0x1b0 <motor_direction_forward>
 124:	f8 cf       	rjmp	.-16     	; 0x116 <main+0xa>
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
		}else if(bt_data == 'b')
 12a:	82 36       	cpi	r24, 0x62	; 98
 12c:	21 f4       	brne	.+8      	; 0x136 <main+0x2a>
 12e:	84 ef       	ldi	r24, 0xF4	; 244
		{
			motor_direction_backward(500);
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	4c d0       	rcall	.+152    	; 0x1cc <motor_direction_backward>
 134:	f0 cf       	rjmp	.-32     	; 0x116 <main+0xa>
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
		}else if(bt_data == 'l')
 13a:	8c 36       	cpi	r24, 0x6C	; 108
 13c:	21 f4       	brne	.+8      	; 0x146 <main+0x3a>
 13e:	84 ef       	ldi	r24, 0xF4	; 244
		{
			motor_turn_left(500);
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	52 d0       	rcall	.+164    	; 0x1e8 <motor_turn_left>
 144:	e8 cf       	rjmp	.-48     	; 0x116 <main+0xa>
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
		}else if(bt_data == 'r')
 14a:	82 37       	cpi	r24, 0x72	; 114
 14c:	21 f4       	brne	.+8      	; 0x156 <main+0x4a>
		{
			motor_turn_right(500);
 14e:	84 ef       	ldi	r24, 0xF4	; 244
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	57 d0       	rcall	.+174    	; 0x202 <motor_turn_right>
 154:	e0 cf       	rjmp	.-64     	; 0x116 <main+0xa>
 156:	23 d0       	rcall	.+70     	; 0x19e <motor_stop>
		}else
		{
			motor_stop();
 158:	de cf       	rjmp	.-68     	; 0x116 <main+0xa>

0000015a <init_timer1>:


void init_timer1(void)
{
	// 분주비 설정 (64)
	TCCR1B |= 0 << CS12 | 1 << CS11 | 1 << CS10;
 15a:	8e b5       	in	r24, 0x2e	; 46
 15c:	83 60       	ori	r24, 0x03	; 3
 15e:	8e bd       	out	0x2e, r24	; 46
	
	// 모드설정 : 14번 (ICR1이 TOP인 고속 PWM)
	TCCR1A |= 0 << WGM10 | 1 << WGM11;
 160:	8f b5       	in	r24, 0x2f	; 47
 162:	82 60       	ori	r24, 0x02	; 2
 164:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << WGM12 | 1 << WGM13;
 166:	8e b5       	in	r24, 0x2e	; 46
 168:	88 61       	ori	r24, 0x18	; 24
 16a:	8e bd       	out	0x2e, r24	; 46
	
	// 비반전 모드 (TOP : ICR1레지스터)
	TCCR1A |= 1 << COM1A1 | 1 << COM1B1;
 16c:	8f b5       	in	r24, 0x2f	; 47
 16e:	80 6a       	ori	r24, 0xA0	; 160
 170:	8f bd       	out	0x2f, r24	; 47
	
	// ICR1레지스터 설정 (TOP 1023으로 설정, TOP까지 4ms로 설정함)
	ICR1 = 0x3ff;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	93 e0       	ldi	r25, 0x03	; 3
 176:	97 bd       	out	0x27, r25	; 39
 178:	86 bd       	out	0x26, r24	; 38
 17a:	08 95       	ret

0000017c <init_L298N>:
}

void init_L298N(void)
{
	// DDR 출력모드 (PWM, 방향)
	MOTOR_PWM_DDR |= 1 << MOTOR_LEFT_PORT_DDR_NUM | 1 << MOTOR_RIGHT_PORT_DDR_NUM;
 17c:	87 b3       	in	r24, 0x17	; 23
 17e:	80 66       	ori	r24, 0x60	; 96
 180:	87 bb       	out	0x17, r24	; 23
	MOTOR_DRIVER_DIRECTION_DDR |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 182:	e1 e6       	ldi	r30, 0x61	; 97
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8f 60       	ori	r24, 0x0F	; 15
 18a:	80 83       	st	Z, r24
								  1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM;
	
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 18c:	e2 e6       	ldi	r30, 0x62	; 98
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	80 7f       	andi	r24, 0xF0	; 240
 194:	80 83       	st	Z, r24
									 1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
	
	// direction 전진모드 설정 (정회전)
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN3_NUM;
 196:	80 81       	ld	r24, Z
 198:	85 60       	ori	r24, 0x05	; 5
 19a:	80 83       	st	Z, r24
 19c:	08 95       	ret

0000019e <motor_stop>:

// motor driver IN값을 전부 1로 set한다
void motor_stop(void)
{
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 19e:	e2 e6       	ldi	r30, 0x62	; 98
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	80 7f       	andi	r24, 0xF0	; 240
 1a6:	80 83       	st	Z, r24
								     1 <<MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
	
	// direction port set
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 1a8:	80 81       	ld	r24, Z
 1aa:	8f 60       	ori	r24, 0x0F	; 15
 1ac:	80 83       	st	Z, r24
 1ae:	08 95       	ret

000001b0 <motor_direction_forward>:
								   1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM;
}

void motor_direction_forward(int speed)
{
 1b0:	9c 01       	movw	r18, r24
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 1b2:	e2 e6       	ldi	r30, 0x62	; 98
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	90 81       	ld	r25, Z
 1b8:	90 7f       	andi	r25, 0xF0	; 240
 1ba:	90 83       	st	Z, r25
									 1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
		
	// direction 전진모드 설정 (정회전)
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN3_NUM;
 1bc:	90 81       	ld	r25, Z
 1be:	95 60       	ori	r25, 0x05	; 5
 1c0:	90 83       	st	Z, r25
	
	// 속도 적용 (양쪽 바퀴에 같은 속도)
	MOTOR_LEFT_PWM = MOTOR_RIGHT_PWM = speed;
 1c2:	39 bd       	out	0x29, r19	; 41
 1c4:	28 bd       	out	0x28, r18	; 40
 1c6:	3b bd       	out	0x2b, r19	; 43
 1c8:	2a bd       	out	0x2a, r18	; 42
 1ca:	08 95       	ret

000001cc <motor_direction_backward>:
}

void motor_direction_backward(int speed)
{
 1cc:	9c 01       	movw	r18, r24
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 1ce:	e2 e6       	ldi	r30, 0x62	; 98
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	90 81       	ld	r25, Z
 1d4:	90 7f       	andi	r25, 0xF0	; 240
 1d6:	90 83       	st	Z, r25
									 1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
		
	// direction 후진모드 설정 (역회전)
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN2_NUM | 1 << MOTOR_DRIVER_IN4_NUM;
 1d8:	90 81       	ld	r25, Z
 1da:	9a 60       	ori	r25, 0x0A	; 10
 1dc:	90 83       	st	Z, r25
	
	// 속도 적용 (양쪽 바퀴에 같은 속도)
	MOTOR_LEFT_PWM = MOTOR_RIGHT_PWM = speed;
 1de:	39 bd       	out	0x29, r19	; 41
 1e0:	28 bd       	out	0x28, r18	; 40
 1e2:	3b bd       	out	0x2b, r19	; 43
 1e4:	2a bd       	out	0x2a, r18	; 42
 1e6:	08 95       	ret

000001e8 <motor_turn_left>:
}

void motor_turn_left(int speed)
{
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	ec 01       	movw	r28, r24
	motor_direction_forward(0); // 전진모드 설정
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	de df       	rcall	.-68     	; 0x1b0 <motor_direction_forward>
	
	MOTOR_LEFT_PWM = 0;
 1f4:	1b bc       	out	0x2b, r1	; 43
 1f6:	1a bc       	out	0x2a, r1	; 42
	MOTOR_RIGHT_PWM = speed;
 1f8:	d9 bd       	out	0x29, r29	; 41
 1fa:	c8 bd       	out	0x28, r28	; 40
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <motor_turn_right>:

void motor_turn_right(int speed)
{
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ec 01       	movw	r28, r24
	motor_direction_forward(0); // 전진모드 설정
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	d1 df       	rcall	.-94     	; 0x1b0 <motor_direction_forward>
	MOTOR_LEFT_PWM = speed;
 20e:	db bd       	out	0x2b, r29	; 43
 210:	ca bd       	out	0x2a, r28	; 42
	MOTOR_RIGHT_PWM = 0;
 212:	19 bc       	out	0x29, r1	; 41
 214:	18 bc       	out	0x28, r1	; 40
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <__vector_30>:
#include "uart1.h"


volatile uint8_t bt_data = 'f'; // 명령어
ISR(USART1_RX_vect)
{
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	8f 93       	push	r24
	bt_data = UDR1;
 228:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 22c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 230:	8f 91       	pop	r24
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <init_uart1>:

void init_uart1(void)
{
	// 전송속도 설정
	UBRR1H = 0x00;
 23c:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207; // 2배속 모드임
 240:	8f ec       	ldi	r24, 0xCF	; 207
 242:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>

	UCSR1A |= 1 << U2X1; // 2배속 통신
 246:	eb e9       	ldi	r30, 0x9B	; 155
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	80 83       	st	Z, r24
	
	UCSR1C |= 0x06; // 비동기, none 8bit, data 8 bit
 250:	ed e9       	ldi	r30, 0x9D	; 157
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	86 60       	ori	r24, 0x06	; 6
 258:	80 83       	st	Z, r24
	
	// 인터럽트, uart 기능 설정
	UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
 25a:	ea e9       	ldi	r30, 0x9A	; 154
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	88 69       	ori	r24, 0x98	; 152
 262:	80 83       	st	Z, r24
 264:	08 95       	ret

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
