
AUTO_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  000017b8  0000184c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b5  008001e0  008001e0  0000192c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000208a  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001182  00000000  00000000  00003c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001334  00000000  00000000  00004df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e8  00000000  00000000  00006128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000900  00000000  00000000  00006710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001176  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00008186  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
       2:	00 00       	nop
       4:	95 c0       	rjmp	.+298    	; 0x130 <__bad_interrupt>
       6:	00 00       	nop
       8:	93 c0       	rjmp	.+294    	; 0x130 <__bad_interrupt>
       a:	00 00       	nop
       c:	91 c0       	rjmp	.+290    	; 0x130 <__bad_interrupt>
       e:	00 00       	nop
      10:	8f c0       	rjmp	.+286    	; 0x130 <__bad_interrupt>
      12:	00 00       	nop
      14:	05 c5       	rjmp	.+2570   	; 0xa20 <__vector_5>
      16:	00 00       	nop
      18:	a6 c5       	rjmp	.+2892   	; 0xb66 <__vector_6>
      1a:	00 00       	nop
      1c:	49 c6       	rjmp	.+3218   	; 0xcb0 <__vector_7>
      1e:	00 00       	nop
      20:	87 c0       	rjmp	.+270    	; 0x130 <__bad_interrupt>
      22:	00 00       	nop
      24:	85 c0       	rjmp	.+266    	; 0x130 <__bad_interrupt>
      26:	00 00       	nop
      28:	e4 c4       	rjmp	.+2504   	; 0x9f2 <__vector_10>
      2a:	00 00       	nop
      2c:	81 c0       	rjmp	.+258    	; 0x130 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7f c0       	rjmp	.+254    	; 0x130 <__bad_interrupt>
      32:	00 00       	nop
      34:	7d c0       	rjmp	.+250    	; 0x130 <__bad_interrupt>
      36:	00 00       	nop
      38:	7b c0       	rjmp	.+246    	; 0x130 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	79 c0       	rjmp	.+242    	; 0x130 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b9 c2       	rjmp	.+1394   	; 0x5b4 <__vector_16>
      42:	00 00       	nop
      44:	75 c0       	rjmp	.+234    	; 0x130 <__bad_interrupt>
      46:	00 00       	nop
      48:	e6 c3       	rjmp	.+1996   	; 0x816 <__vector_18>
      4a:	00 00       	nop
      4c:	71 c0       	rjmp	.+226    	; 0x130 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6f c0       	rjmp	.+222    	; 0x130 <__bad_interrupt>
      52:	00 00       	nop
      54:	6d c0       	rjmp	.+218    	; 0x130 <__bad_interrupt>
      56:	00 00       	nop
      58:	6b c0       	rjmp	.+214    	; 0x130 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	69 c0       	rjmp	.+210    	; 0x130 <__bad_interrupt>
      5e:	00 00       	nop
      60:	67 c0       	rjmp	.+206    	; 0x130 <__bad_interrupt>
      62:	00 00       	nop
      64:	65 c0       	rjmp	.+202    	; 0x130 <__bad_interrupt>
      66:	00 00       	nop
      68:	63 c0       	rjmp	.+198    	; 0x130 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	61 c0       	rjmp	.+194    	; 0x130 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5f c0       	rjmp	.+190    	; 0x130 <__bad_interrupt>
      72:	00 00       	nop
      74:	5d c0       	rjmp	.+186    	; 0x130 <__bad_interrupt>
      76:	00 00       	nop
      78:	60 c4       	rjmp	.+2240   	; 0x93a <__vector_30>
      7a:	00 00       	nop
      7c:	59 c0       	rjmp	.+178    	; 0x130 <__bad_interrupt>
      7e:	00 00       	nop
      80:	57 c0       	rjmp	.+174    	; 0x130 <__bad_interrupt>
      82:	00 00       	nop
      84:	55 c0       	rjmp	.+170    	; 0x130 <__bad_interrupt>
      86:	00 00       	nop
      88:	53 c0       	rjmp	.+166    	; 0x130 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cd 01       	movw	r24, r26
      8e:	06 02       	muls	r16, r22
      90:	f5 01       	movw	r30, r10
      92:	06 02       	muls	r16, r22
      94:	c8 01       	movw	r24, r16
      96:	06 02       	muls	r16, r22
      98:	06 02       	muls	r16, r22
      9a:	06 02       	muls	r16, r22
      9c:	06 02       	muls	r16, r22
      9e:	06 02       	muls	r16, r22
      a0:	d4 01       	movw	r26, r8
      a2:	06 02       	muls	r16, r22
      a4:	06 02       	muls	r16, r22
      a6:	06 02       	muls	r16, r22
      a8:	06 02       	muls	r16, r22
      aa:	06 02       	muls	r16, r22
      ac:	db 01       	movw	r26, r22
      ae:	06 02       	muls	r16, r22
      b0:	06 02       	muls	r16, r22
      b2:	e2 01       	movw	r28, r4
      b4:	06 02       	muls	r16, r22
      b6:	06 02       	muls	r16, r22
      b8:	06 02       	muls	r16, r22
      ba:	06 02       	muls	r16, r22
      bc:	06 02       	muls	r16, r22
      be:	06 02       	muls	r16, r22
      c0:	06 02       	muls	r16, r22
      c2:	06 02       	muls	r16, r22
      c4:	06 02       	muls	r16, r22
      c6:	06 02       	muls	r16, r22
      c8:	06 02       	muls	r16, r22
      ca:	06 02       	muls	r16, r22
      cc:	cd 01       	movw	r24, r26
      ce:	06 02       	muls	r16, r22
      d0:	f5 01       	movw	r30, r10
      d2:	06 02       	muls	r16, r22
      d4:	c8 01       	movw	r24, r16
      d6:	06 02       	muls	r16, r22
      d8:	06 02       	muls	r16, r22
      da:	06 02       	muls	r16, r22
      dc:	06 02       	muls	r16, r22
      de:	06 02       	muls	r16, r22
      e0:	d4 01       	movw	r26, r8
      e2:	06 02       	muls	r16, r22
      e4:	06 02       	muls	r16, r22
      e6:	06 02       	muls	r16, r22
      e8:	06 02       	muls	r16, r22
      ea:	06 02       	muls	r16, r22
      ec:	db 01       	movw	r26, r22
      ee:	06 02       	muls	r16, r22
      f0:	06 02       	muls	r16, r22
      f2:	e2 01       	movw	r28, r4

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	d0 e1       	ldi	r29, 0x10	; 16
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_copy_data>:
     100:	11 e0       	ldi	r17, 0x01	; 1
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b1 e0       	ldi	r27, 0x01	; 1
     106:	e8 eb       	ldi	r30, 0xB8	; 184
     108:	f7 e1       	ldi	r31, 0x17	; 23
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a0 3e       	cpi	r26, 0xE0	; 224
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
     11a:	23 e0       	ldi	r18, 0x03	; 3
     11c:	a0 ee       	ldi	r26, 0xE0	; 224
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	a5 39       	cpi	r26, 0x95	; 149
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	6c d2       	rcall	.+1240   	; 0x604 <main>
     12c:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <_exit>

00000130 <__bad_interrupt>:
     130:	67 cf       	rjmp	.-306    	; 0x0 <__vectors>

00000132 <init_button>:
 

                                                
void init_button(void)
{
	BUTTON_DDR &= ~( 1 << BUTTON0PIN);
     132:	d3 98       	cbi	0x1a, 3	; 26
     134:	08 95       	ret

00000136 <get_button>:
	static unsigned char button_status[BUTTON_NUMER] =
	{BUTTON_RELEASE};
	// 	지역 변수에 static을 쓰면 전역 변수처럼 함수를 빠져 나갔다 다시 들어 와도 값을 유지 한다.  
	int currtn_state;
	
	currtn_state = BUTTON_PIN & (1 << button_pin);   // 버튼을 읽는다. 
     136:	49 b3       	in	r20, 0x19	; 25
	if (currtn_state && button_status[button_num] == BUTTON_RELEASE)  // 버튼이 처음 눌려진 noise high 
     138:	21 e0       	ldi	r18, 0x01	; 1
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	02 c0       	rjmp	.+4      	; 0x142 <get_button+0xc>
     13e:	22 0f       	add	r18, r18
     140:	33 1f       	adc	r19, r19
     142:	6a 95       	dec	r22
     144:	e2 f7       	brpl	.-8      	; 0x13e <get_button+0x8>
     146:	50 e0       	ldi	r21, 0x00	; 0
     148:	24 23       	and	r18, r20
     14a:	35 23       	and	r19, r21
     14c:	23 2b       	or	r18, r19
     14e:	b9 f0       	breq	.+46     	; 0x17e <get_button+0x48>
     150:	fc 01       	movw	r30, r24
     152:	e0 52       	subi	r30, 0x20	; 32
     154:	fe 4f       	sbci	r31, 0xFE	; 254
     156:	20 81       	ld	r18, Z
     158:	21 11       	cpse	r18, r1
     15a:	27 c0       	rjmp	.+78     	; 0x1aa <get_button+0x74>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15c:	2f ef       	ldi	r18, 0xFF	; 255
     15e:	3d ee       	ldi	r19, 0xED	; 237
     160:	42 e0       	ldi	r20, 0x02	; 2
     162:	21 50       	subi	r18, 0x01	; 1
     164:	30 40       	sbci	r19, 0x00	; 0
     166:	40 40       	sbci	r20, 0x00	; 0
     168:	e1 f7       	brne	.-8      	; 0x162 <get_button+0x2c>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <get_button+0x36>
     16c:	00 00       	nop
	{
		_delay_ms(60);   // noise가 지나가기를 기다린다. 
		button_status[button_num] = BUTTON_PRESS;   // noise가 지나간 상태의 High 상태 
     16e:	fc 01       	movw	r30, r24
     170:	e0 52       	subi	r30, 0x20	; 32
     172:	fe 4f       	sbci	r31, 0xFE	; 254
     174:	21 e0       	ldi	r18, 0x01	; 1
     176:	20 83       	st	Z, r18
		return 0;   // 아직은 완전히 눌렸다 떼어진 상태가 아니다. 
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	08 95       	ret
	}
	else if (currtn_state==BUTTON_RELEASE && button_status[button_num] == BUTTON_PRESS)
     17e:	fc 01       	movw	r30, r24
     180:	e0 52       	subi	r30, 0x20	; 32
     182:	fe 4f       	sbci	r31, 0xFE	; 254
     184:	20 81       	ld	r18, Z
     186:	21 30       	cpi	r18, 0x01	; 1
     188:	99 f4       	brne	.+38     	; 0x1b0 <get_button+0x7a>
     18a:	2f ef       	ldi	r18, 0xFF	; 255
     18c:	3d ee       	ldi	r19, 0xED	; 237
     18e:	42 e0       	ldi	r20, 0x02	; 2
     190:	21 50       	subi	r18, 0x01	; 1
     192:	30 40       	sbci	r19, 0x00	; 0
     194:	40 40       	sbci	r20, 0x00	; 0
     196:	e1 f7       	brne	.-8      	; 0x190 <get_button+0x5a>
     198:	00 c0       	rjmp	.+0      	; 0x19a <get_button+0x64>
     19a:	00 00       	nop
	{
		_delay_ms(60);
		button_status[button_num] = BUTTON_RELEASE;   // 다음 버튼 체크를 위해서 초기화
     19c:	fc 01       	movw	r30, r24
     19e:	e0 52       	subi	r30, 0x20	; 32
     1a0:	fe 4f       	sbci	r31, 0xFE	; 254
     1a2:	10 82       	st	Z, r1
		return 1;   // 완전히 1번 눌렸다 떼어진 상태로 인정		
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	08 95       	ret
	}
	
	return 0;   // 버튼이 open상태 
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	08 95       	ret
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	08 95       	ret

000001b6 <I2C_init>:
 */ 
#include <avr/io.h>
#include "I2C.h"

void I2C_init(unsigned int baud){
	TWBR = baud;
     1b6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     1ba:	08 95       	ret

000001bc <I2C_start>:
}

void I2C_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     1bc:	84 ea       	ldi	r24, 0xA4	; 164
     1be:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));  // 시작 완료 대기
     1c2:	e4 e7       	ldi	r30, 0x74	; 116
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	80 81       	ld	r24, Z
     1c8:	88 23       	and	r24, r24
     1ca:	ec f7       	brge	.-6      	; 0x1c6 <I2C_start+0xa>
}
     1cc:	08 95       	ret

000001ce <I2C_transmit>:

void I2C_transmit(uint8_t data)
{
	TWDR = data;
     1ce:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
     1d2:	84 e8       	ldi	r24, 0x84	; 132
     1d4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
     1d8:	e4 e7       	ldi	r30, 0x74	; 116
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	80 81       	ld	r24, Z
     1de:	88 23       	and	r24, r24
     1e0:	ec f7       	brge	.-6      	; 0x1dc <I2C_transmit+0xe>
}
     1e2:	08 95       	ret

000001e4 <I2C_write_byte>:

void I2C_write_byte(uint8_t address, uint8_t data)
{
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	d8 2f       	mov	r29, r24
     1ea:	c6 2f       	mov	r28, r22
	I2C_start();
     1ec:	e7 df       	rcall	.-50     	; 0x1bc <I2C_start>
	I2C_transmit(address);
     1ee:	8d 2f       	mov	r24, r29
     1f0:	ee df       	rcall	.-36     	; 0x1ce <I2C_transmit>
	I2C_transmit(data);
     1f2:	8c 2f       	mov	r24, r28
     1f4:	ec df       	rcall	.-40     	; 0x1ce <I2C_transmit>
     1f6:	84 e9       	ldi	r24, 0x94	; 148
	I2C_stop();
}

void I2C_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     1f8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     1fc:	df 91       	pop	r29
{
	I2C_start();
	I2C_transmit(address);
	I2C_transmit(data);
	I2C_stop();
}
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <I2C_LCD_write_data>:
     202:	ef 92       	push	r14
	//}
#endif 
}
// 1byte를 write
void I2C_LCD_write_data(uint8_t data)
{
     204:	ff 92       	push	r15
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	00 d0       	rcall	.+0      	; 0x210 <I2C_LCD_write_data+0xe>
     210:	00 d0       	rcall	.+0      	; 0x212 <I2C_LCD_write_data+0x10>
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
	char data_u, data_l;
	uint8_t data_t[4] = {0,};
		
	data_u = (data&0xf0);      // 상위 4bit 데이터
     216:	28 2f       	mov	r18, r24
     218:	20 7f       	andi	r18, 0xF0	; 240
	data_l = ((data<<4)&0xf0); // 하위 4bit 데이터
     21a:	30 e1       	ldi	r19, 0x10	; 16
     21c:	83 9f       	mul	r24, r19
     21e:	c0 01       	movw	r24, r0
     220:	11 24       	eor	r1, r1
	data_t[0] = data_u|0x0D;   //en=1, rs=1           |D7|D6|D5|D4|X|E|RW|RS|
     222:	92 2f       	mov	r25, r18
     224:	9d 60       	ori	r25, 0x0D	; 13
     226:	99 83       	std	Y+1, r25	; 0x01
	data_t[1] = data_u|0x09;   //en=0, rs=1
     228:	29 60       	ori	r18, 0x09	; 9
     22a:	2a 83       	std	Y+2, r18	; 0x02
	data_t[2] = data_l|0x0D;   //en=1, rs=1
     22c:	98 2f       	mov	r25, r24
     22e:	9d 60       	ori	r25, 0x0D	; 13
     230:	9b 83       	std	Y+3, r25	; 0x03
	data_t[3] = data_l|0x09;   //en=0, rs=1
     232:	89 60       	ori	r24, 0x09	; 9
     234:	8c 83       	std	Y+4, r24	; 0x04
     236:	8e 01       	movw	r16, r28
     238:	0f 5f       	subi	r16, 0xFF	; 255
     23a:	1f 4f       	sbci	r17, 0xFF	; 255
     23c:	7e 01       	movw	r14, r28
     23e:	85 e0       	ldi	r24, 0x05	; 5
     240:	e8 0e       	add	r14, r24
     242:	f1 1c       	adc	r15, r1

	for(char i=0;i<4;i++){
		I2C_write_byte(SLA_W, data_t[i]);
     244:	f8 01       	movw	r30, r16
     246:	61 91       	ld	r22, Z+
     248:	8f 01       	movw	r16, r30
     24a:	8e e4       	ldi	r24, 0x4E	; 78
     24c:	cb df       	rcall	.-106    	; 0x1e4 <I2C_write_byte>
	data_t[0] = data_u|0x0D;   //en=1, rs=1           |D7|D6|D5|D4|X|E|RW|RS|
	data_t[1] = data_u|0x09;   //en=0, rs=1
	data_t[2] = data_l|0x0D;   //en=1, rs=1
	data_t[3] = data_l|0x09;   //en=0, rs=1

	for(char i=0;i<4;i++){
     24e:	0e 15       	cp	r16, r14
     250:	1f 05       	cpc	r17, r15
     252:	c1 f7       	brne	.-16     	; 0x244 <I2C_LCD_write_data+0x42>
		I2C_write_byte(SLA_W, data_t[i]);
	}
}
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	1f 91       	pop	r17
     262:	0f 91       	pop	r16
     264:	ff 90       	pop	r15
     266:	ef 90       	pop	r14
     268:	08 95       	ret

0000026a <I2C_LCD_write_command>:

void I2C_LCD_write_command(uint8_t command)
{
     26a:	ef 92       	push	r14
     26c:	ff 92       	push	r15
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	00 d0       	rcall	.+0      	; 0x278 <I2C_LCD_write_command+0xe>
     278:	00 d0       	rcall	.+0      	; 0x27a <I2C_LCD_write_command+0x10>
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (command&0xf0);      // command의 상위 4bit 저장
     27e:	28 2f       	mov	r18, r24
     280:	20 7f       	andi	r18, 0xF0	; 240
	data_l = ((command<<4)&0xf0); // command의 하위 4bit 저장
     282:	30 e1       	ldi	r19, 0x10	; 16
     284:	83 9f       	mul	r24, r19
     286:	c0 01       	movw	r24, r0
     288:	11 24       	eor	r1, r1
	data_t[0] = data_u|0x0C;  //en=1, rs=0           |D7|D6|D5|D4|X|E|RW|RS|
     28a:	92 2f       	mov	r25, r18
     28c:	9c 60       	ori	r25, 0x0C	; 12
     28e:	99 83       	std	Y+1, r25	; 0x01
	data_t[1] = data_u|0x08;  //en=0, rs=0
     290:	28 60       	ori	r18, 0x08	; 8
     292:	2a 83       	std	Y+2, r18	; 0x02
	data_t[2] = data_l|0x0C;  //en=1, rs=0
     294:	98 2f       	mov	r25, r24
     296:	9c 60       	ori	r25, 0x0C	; 12
     298:	9b 83       	std	Y+3, r25	; 0x03
	data_t[3] = data_l|0x08;  //en=0, rs=0
     29a:	88 60       	ori	r24, 0x08	; 8
     29c:	8c 83       	std	Y+4, r24	; 0x04
     29e:	8e 01       	movw	r16, r28
     2a0:	0f 5f       	subi	r16, 0xFF	; 255
     2a2:	1f 4f       	sbci	r17, 0xFF	; 255
     2a4:	7e 01       	movw	r14, r28
     2a6:	85 e0       	ldi	r24, 0x05	; 5
     2a8:	e8 0e       	add	r14, r24
     2aa:	f1 1c       	adc	r15, r1
	
	for(char i=0;i<4;i++){
		I2C_write_byte(SLA_W, data_t[i]);
     2ac:	f8 01       	movw	r30, r16
     2ae:	61 91       	ld	r22, Z+
     2b0:	8f 01       	movw	r16, r30
     2b2:	8e e4       	ldi	r24, 0x4E	; 78
     2b4:	97 df       	rcall	.-210    	; 0x1e4 <I2C_write_byte>
	data_t[0] = data_u|0x0C;  //en=1, rs=0           |D7|D6|D5|D4|X|E|RW|RS|
	data_t[1] = data_u|0x08;  //en=0, rs=0
	data_t[2] = data_l|0x0C;  //en=1, rs=0
	data_t[3] = data_l|0x08;  //en=0, rs=0
	
	for(char i=0;i<4;i++){
     2b6:	0e 15       	cp	r16, r14
     2b8:	1f 05       	cpc	r17, r15
     2ba:	c1 f7       	brne	.-16     	; 0x2ac <I2C_LCD_write_command+0x42>
		I2C_write_byte(SLA_W, data_t[i]);
	}
}
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	08 95       	ret

000002d2 <I2C_LCD_clear>:

// 화면 clear
// 화면에 있는 내용만 지운다. 
void I2C_LCD_clear(void)
{
	I2C_LCD_write_command(COMMAND_CLEAR_DISPLAY);
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	ca df       	rcall	.-108    	; 0x26a <I2C_LCD_write_command>
     2d6:	8f e3       	ldi	r24, 0x3F	; 63
     2d8:	9f e1       	ldi	r25, 0x1F	; 31
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <I2C_LCD_clear+0x8>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <I2C_LCD_clear+0xe>
     2e0:	00 00       	nop
     2e2:	08 95       	ret

000002e4 <I2C_LCD_init>:
}

// LCD를 초기화
void I2C_LCD_init(void)
{
	I2C_init(10000);
     2e4:	80 e1       	ldi	r24, 0x10	; 16
     2e6:	97 e2       	ldi	r25, 0x27	; 39
     2e8:	66 df       	rcall	.-308    	; 0x1b6 <I2C_init>
     2ea:	2f ef       	ldi	r18, 0xFF	; 255
     2ec:	80 e7       	ldi	r24, 0x70	; 112
     2ee:	92 e0       	ldi	r25, 0x02	; 2
     2f0:	21 50       	subi	r18, 0x01	; 1
     2f2:	80 40       	sbci	r24, 0x00	; 0
     2f4:	90 40       	sbci	r25, 0x00	; 0
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <I2C_LCD_init+0xc>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <I2C_LCD_init+0x16>
     2fa:	00 00       	nop
	_delay_ms(50);
	//Initialization of HD44780-based LCD (4-bit HW)
	I2C_LCD_write_command(0x33);
     2fc:	83 e3       	ldi	r24, 0x33	; 51
     2fe:	b5 df       	rcall	.-150    	; 0x26a <I2C_LCD_write_command>
	I2C_LCD_write_command(0x32);
     300:	82 e3       	ldi	r24, 0x32	; 50
     302:	b3 df       	rcall	.-154    	; 0x26a <I2C_LCD_write_command>
	I2C_LCD_write_command(0x28);   //Function Set 4-bit mode
     304:	88 e2       	ldi	r24, 0x28	; 40
     306:	b1 df       	rcall	.-158    	; 0x26a <I2C_LCD_write_command>
	I2C_LCD_write_command(0x0c);   //Display On/Off Control
     308:	8c e0       	ldi	r24, 0x0C	; 12
     30a:	af df       	rcall	.-162    	; 0x26a <I2C_LCD_write_command>
	I2C_LCD_write_command(0x06);   //Entry mode set
     30c:	86 e0       	ldi	r24, 0x06	; 6
     30e:	ad df       	rcall	.-166    	; 0x26a <I2C_LCD_write_command>
     310:	81 e0       	ldi	r24, 0x01	; 1
	I2C_LCD_write_command(0x01);   //Clear Display
     312:	ab df       	rcall	.-170    	; 0x26a <I2C_LCD_write_command>
     314:	8f e3       	ldi	r24, 0x3F	; 63
     316:	9c e9       	ldi	r25, 0x9C	; 156
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <I2C_LCD_init+0x34>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <I2C_LCD_init+0x3a>
     31e:	00 00       	nop
     320:	08 95       	ret

00000322 <I2C_LCD_write_string>:
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
	//Minimum delay to wait before driving LCD module
	_delay_ms(10);
}
// 현재의 xy좌표에 printf처럼 스트링 값을 출력 
void I2C_LCD_write_string(char *string)
{
     326:	cf 93       	push	r28
     328:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0; string[i]; i++) //"hello !!\0" 마지막 널문자에서 조건 거짓이 되어 빠져나온다.
     32a:	80 81       	ld	r24, Z
     32c:	88 23       	and	r24, r24
     32e:	51 f0       	breq	.+20     	; 0x344 <I2C_LCD_write_string+0x22>
     330:	8f 01       	movw	r16, r30
     332:	c0 e0       	ldi	r28, 0x00	; 0
	I2C_LCD_write_data(string[i]);
     334:	66 df       	rcall	.-308    	; 0x202 <I2C_LCD_write_data>
}
// 현재의 xy좌표에 printf처럼 스트링 값을 출력 
void I2C_LCD_write_string(char *string)
{
	uint8_t i;
	for(i=0; string[i]; i++) //"hello !!\0" 마지막 널문자에서 조건 거짓이 되어 빠져나온다.
     336:	cf 5f       	subi	r28, 0xFF	; 255
     338:	f8 01       	movw	r30, r16
     33a:	ec 0f       	add	r30, r28
     33c:	f1 1d       	adc	r31, r1
     33e:	80 81       	ld	r24, Z
     340:	81 11       	cpse	r24, r1
     342:	f8 cf       	rjmp	.-16     	; 0x334 <I2C_LCD_write_string+0x12>
	I2C_LCD_write_data(string[i]);
}
     344:	cf 91       	pop	r28
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	08 95       	ret

0000034c <I2C_LCD_goto_XY>:
	row %= 2;
	
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	I2C_LCD_write_command(command);
     34c:	81 70       	andi	r24, 0x01	; 1
     34e:	6f 70       	andi	r22, 0x0F	; 15
     350:	90 e4       	ldi	r25, 0x40	; 64
     352:	89 9f       	mul	r24, r25
     354:	60 0d       	add	r22, r0
     356:	11 24       	eor	r1, r1
     358:	86 2f       	mov	r24, r22
     35a:	80 58       	subi	r24, 0x80	; 128
     35c:	86 cf       	rjmp	.-244    	; 0x26a <I2C_LCD_write_command>
     35e:	08 95       	ret

00000360 <I2C_LCD_write_string_XY>:
}

// x,y좌표로 이동을 하고 string값을 출력 한다. 
void I2C_LCD_write_string_XY(uint8_t row, uint8_t col, char *string)
{
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	ea 01       	movw	r28, r20
	I2C_LCD_goto_XY(row, col);
     366:	f2 df       	rcall	.-28     	; 0x34c <I2C_LCD_goto_XY>
	I2C_LCD_write_string(string);
     368:	ce 01       	movw	r24, r28
     36a:	db df       	rcall	.-74     	; 0x322 <I2C_LCD_write_string>
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <moving_manual_mode>:
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
	TIMSK |= 1 << TOIE0;
}

void moving_manual_mode(t_car_info *my_car)
{
     372:	dc 01       	movw	r26, r24
		switch(bt_data)
     374:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <bt_data>
     378:	4e 2f       	mov	r20, r30
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	fa 01       	movw	r30, r20
     37e:	e2 54       	subi	r30, 0x42	; 66
     380:	f1 09       	sbc	r31, r1
     382:	e4 33       	cpi	r30, 0x34	; 52
     384:	f1 05       	cpc	r31, r1
     386:	08 f0       	brcs	.+2      	; 0x38a <moving_manual_mode+0x18>
     388:	41 c0       	rjmp	.+130    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     38a:	ea 5b       	subi	r30, 0xBA	; 186
     38c:	ff 4f       	sbci	r31, 0xFF	; 255
     38e:	05 c7       	rjmp	.+3594   	; 0x119a <__tablejump2__>
		{
			case 'F':
			case 'f':
				my_car->state = FORWARD;
     390:	13 96       	adiw	r26, 0x03	; 3
     392:	1c 92       	st	X, r1
     394:	1e 92       	st	-X, r1
     396:	12 97       	sbiw	r26, 0x02	; 2
				(*my_car).state = FORWARD;
				break;
     398:	74 c0       	rjmp	.+232    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			case 'B':
			case 'b':
				my_car->state = BACKWARD;
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	13 96       	adiw	r26, 0x03	; 3
     3a0:	9c 93       	st	X, r25
     3a2:	8e 93       	st	-X, r24
     3a4:	12 97       	sbiw	r26, 0x02	; 2
				break;
     3a6:	6d c0       	rjmp	.+218    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			case 'L':
			case 'l':
				my_car->state = TURN_LEFT;
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	13 96       	adiw	r26, 0x03	; 3
     3ae:	9c 93       	st	X, r25
     3b0:	8e 93       	st	-X, r24
     3b2:	12 97       	sbiw	r26, 0x02	; 2
				break;
     3b4:	66 c0       	rjmp	.+204    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			case 'R':
			case 'r':
				my_car->state = TURN_RIGHT;
     3b6:	83 e0       	ldi	r24, 0x03	; 3
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	13 96       	adiw	r26, 0x03	; 3
     3bc:	9c 93       	st	X, r25
     3be:	8e 93       	st	-X, r24
     3c0:	12 97       	sbiw	r26, 0x02	; 2
				break;
     3c2:	5f c0       	rjmp	.+190    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			case 'U':
			case 'u':
				(my_car->speed)++;
				my_car->speed = (my_car->speed >= SPEED_BOUNDARY_NUM) ? SPEED_BOUNDARY_NUM - 1 : my_car->speed;
     3c4:	14 96       	adiw	r26, 0x04	; 4
     3c6:	8d 91       	ld	r24, X+
     3c8:	9c 91       	ld	r25, X
     3ca:	15 97       	sbiw	r26, 0x05	; 5
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	8a 30       	cpi	r24, 0x0A	; 10
     3d0:	91 05       	cpc	r25, r1
     3d2:	14 f0       	brlt	.+4      	; 0x3d8 <moving_manual_mode+0x66>
     3d4:	89 e0       	ldi	r24, 0x09	; 9
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	15 96       	adiw	r26, 0x05	; 5
     3da:	9c 93       	st	X, r25
     3dc:	8e 93       	st	-X, r24
     3de:	14 97       	sbiw	r26, 0x04	; 4
				bt_data = pre_bt_data;
     3e0:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <pre_bt_data>
     3e4:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <bt_data>
				break;
     3e8:	18 c0       	rjmp	.+48     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			case 'D':
			case 'd':
				(my_car->speed)--;
				my_car->speed = (my_car->speed < 0) ? 0 : my_car->speed;
     3ea:	14 96       	adiw	r26, 0x04	; 4
     3ec:	8d 91       	ld	r24, X+
     3ee:	9c 91       	ld	r25, X
     3f0:	15 97       	sbiw	r26, 0x05	; 5
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	12 f4       	brpl	.+4      	; 0x3fa <moving_manual_mode+0x88>
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	15 96       	adiw	r26, 0x05	; 5
     3fc:	9c 93       	st	X, r25
     3fe:	8e 93       	st	-X, r24
     400:	14 97       	sbiw	r26, 0x04	; 4
				bt_data = pre_bt_data;
     402:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <pre_bt_data>
     406:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <bt_data>
				break;
     40a:	07 c0       	rjmp	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			default:
				my_car->state = STOP;
     40c:	84 e0       	ldi	r24, 0x04	; 4
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	13 96       	adiw	r26, 0x03	; 3
     412:	9c 93       	st	X, r25
     414:	8e 93       	st	-X, r24
     416:	12 97       	sbiw	r26, 0x02	; 2
     418:	16 c0       	rjmp	.+44     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		}
		
		if(my_car->state != STOP)
     41a:	12 96       	adiw	r26, 0x02	; 2
     41c:	2d 91       	ld	r18, X+
     41e:	3c 91       	ld	r19, X
     420:	13 97       	sbiw	r26, 0x03	; 3
     422:	24 30       	cpi	r18, 0x04	; 4
     424:	31 05       	cpc	r19, r1
     426:	79 f0       	breq	.+30     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		{
			my_car->lcd_text_down = lcd_texts[my_car->speed + 2];
     428:	14 96       	adiw	r26, 0x04	; 4
     42a:	ed 91       	ld	r30, X+
     42c:	fc 91       	ld	r31, X
     42e:	15 97       	sbiw	r26, 0x05	; 5
     430:	ee 0f       	add	r30, r30
     432:	ff 1f       	adc	r31, r31
     434:	ec 5f       	subi	r30, 0xFC	; 252
     436:	fe 4f       	sbci	r31, 0xFE	; 254
     438:	80 81       	ld	r24, Z
     43a:	91 81       	ldd	r25, Z+1	; 0x01
     43c:	19 96       	adiw	r26, 0x09	; 9
     43e:	9c 93       	st	X, r25
     440:	8e 93       	st	-X, r24
     442:	18 97       	sbiw	r26, 0x08	; 8
     444:	0a c0       	rjmp	.+20     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		}else{
			my_car->lcd_text_down = lcd_texts[12];
     446:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_start+0x18>
     44a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_start+0x19>
     44e:	19 96       	adiw	r26, 0x09	; 9
     450:	9c 93       	st	X, r25
     452:	8e 93       	st	-X, r24
     454:	18 97       	sbiw	r26, 0x08	; 8
     456:	24 e0       	ldi	r18, 0x04	; 4
     458:	30 e0       	ldi	r19, 0x00	; 0
		}
		car_move_func[my_car->state](speed_boundarys[my_car->speed]);
     45a:	14 96       	adiw	r26, 0x04	; 4
     45c:	0d 90       	ld	r0, X+
     45e:	bc 91       	ld	r27, X
     460:	a0 2d       	mov	r26, r0
     462:	aa 0f       	add	r26, r26
     464:	bb 1f       	adc	r27, r27
     466:	a6 5e       	subi	r26, 0xE6	; 230
     468:	be 4f       	sbci	r27, 0xFE	; 254
     46a:	22 0f       	add	r18, r18
     46c:	33 1f       	adc	r19, r19
     46e:	f9 01       	movw	r30, r18
     470:	ee 5c       	subi	r30, 0xCE	; 206
     472:	fe 4f       	sbci	r31, 0xFE	; 254
     474:	01 90       	ld	r0, Z+
     476:	f0 81       	ld	r31, Z
     478:	e0 2d       	mov	r30, r0
     47a:	8d 91       	ld	r24, X+
     47c:	9c 91       	ld	r25, X
     47e:	09 95       	icall
}
     480:	08 95       	ret
				break;
			default:
				my_car->state = STOP;
		}
		
		if(my_car->state != STOP)
     482:	12 96       	adiw	r26, 0x02	; 2
     484:	2d 91       	ld	r18, X+
     486:	3c 91       	ld	r19, X
     488:	13 97       	sbiw	r26, 0x03	; 3
     48a:	ce cf       	rjmp	.-100    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>

0000048c <moving_auto_mode>:
		}
		car_move_func[my_car->state](speed_boundarys[my_car->speed]);
}

void moving_auto_mode(t_car_info *my_car)
{
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	ec 01       	movw	r28, r24
	check_obstacle();
     492:	c4 d4       	rcall	.+2440   	; 0xe1c <check_obstacle>
	
	if((obstacle_info[0] && obstacle_info[1] && obstacle_info[2]) || (!obstacle_info[0] && obstacle_info[1] && !obstacle_info[2]))
     494:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <obstacle_info>
     498:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <obstacle_info+0x1>
     49c:	89 2b       	or	r24, r25
     49e:	61 f0       	breq	.+24     	; 0x4b8 <moving_auto_mode+0x2c>
     4a0:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <obstacle_info+0x2>
     4a4:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <obstacle_info+0x3>
     4a8:	89 2b       	or	r24, r25
     4aa:	31 f0       	breq	.+12     	; 0x4b8 <moving_auto_mode+0x2c>
     4ac:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <obstacle_info+0x4>
     4b0:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <obstacle_info+0x5>
     4b4:	89 2b       	or	r24, r25
     4b6:	91 f4       	brne	.+36     	; 0x4dc <moving_auto_mode+0x50>
     4b8:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <obstacle_info>
     4bc:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <obstacle_info+0x1>
     4c0:	89 2b       	or	r24, r25
     4c2:	c9 f4       	brne	.+50     	; 0x4f6 <moving_auto_mode+0x6a>
     4c4:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <obstacle_info+0x2>
     4c8:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <obstacle_info+0x3>
     4cc:	89 2b       	or	r24, r25
     4ce:	99 f0       	breq	.+38     	; 0x4f6 <moving_auto_mode+0x6a>
     4d0:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <obstacle_info+0x4>
     4d4:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <obstacle_info+0x5>
     4d8:	89 2b       	or	r24, r25
     4da:	69 f4       	brne	.+26     	; 0x4f6 <moving_auto_mode+0x6a>
	{
		my_car->state = STOP;
     4dc:	84 e0       	ldi	r24, 0x04	; 4
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	9b 83       	std	Y+3, r25	; 0x03
     4e2:	8a 83       	std	Y+2, r24	; 0x02
	
	if(my_car->state != STOP)
	{
		my_car->lcd_text_down = lcd_texts[my_car->speed + 2];
	}else{
		my_car->lcd_text_down = lcd_texts[12];
     4e4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_start+0x18>
     4e8:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_start+0x19>
     4ec:	99 87       	std	Y+9, r25	; 0x09
     4ee:	88 87       	std	Y+8, r24	; 0x08
	}else{
		my_car->speed = 2;
		my_car->state = FORWARD;
	}
	
	if(my_car->state != STOP)
     4f0:	84 e0       	ldi	r24, 0x04	; 4
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	3d c0       	rjmp	.+122    	; 0x570 <moving_auto_mode+0xe4>
	check_obstacle();
	
	if((obstacle_info[0] && obstacle_info[1] && obstacle_info[2]) || (!obstacle_info[0] && obstacle_info[1] && !obstacle_info[2]))
	{
		my_car->state = STOP;
	}else if((obstacle_info[0] && obstacle_info[1]) || obstacle_info[0])
     4f6:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <obstacle_info>
     4fa:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <obstacle_info+0x1>
     4fe:	89 2b       	or	r24, r25
     500:	31 f0       	breq	.+12     	; 0x50e <moving_auto_mode+0x82>
     502:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <obstacle_info+0x2>
     506:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <obstacle_info+0x3>
     50a:	89 2b       	or	r24, r25
     50c:	31 f4       	brne	.+12     	; 0x51a <moving_auto_mode+0x8e>
     50e:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <obstacle_info>
     512:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <obstacle_info+0x1>
     516:	89 2b       	or	r24, r25
     518:	49 f0       	breq	.+18     	; 0x52c <moving_auto_mode+0xa0>
	{
		my_car->speed = 9;
     51a:	89 e0       	ldi	r24, 0x09	; 9
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	9d 83       	std	Y+5, r25	; 0x05
     520:	8c 83       	std	Y+4, r24	; 0x04
		my_car->state = TURN_RIGHT;
     522:	83 e0       	ldi	r24, 0x03	; 3
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	9b 83       	std	Y+3, r25	; 0x03
     528:	8a 83       	std	Y+2, r24	; 0x02
     52a:	34 c0       	rjmp	.+104    	; 0x594 <moving_auto_mode+0x108>
	}else if((obstacle_info[1] && obstacle_info[2]) || obstacle_info[2])
     52c:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <obstacle_info+0x2>
     530:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <obstacle_info+0x3>
     534:	89 2b       	or	r24, r25
     536:	31 f0       	breq	.+12     	; 0x544 <moving_auto_mode+0xb8>
     538:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <obstacle_info+0x4>
     53c:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <obstacle_info+0x5>
     540:	89 2b       	or	r24, r25
     542:	31 f4       	brne	.+12     	; 0x550 <moving_auto_mode+0xc4>
     544:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <obstacle_info+0x4>
     548:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <obstacle_info+0x5>
     54c:	89 2b       	or	r24, r25
     54e:	49 f0       	breq	.+18     	; 0x562 <moving_auto_mode+0xd6>
	{
		my_car->speed = 9;
     550:	89 e0       	ldi	r24, 0x09	; 9
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	9d 83       	std	Y+5, r25	; 0x05
     556:	8c 83       	std	Y+4, r24	; 0x04
		my_car->state = TURN_LEFT;
     558:	82 e0       	ldi	r24, 0x02	; 2
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	9b 83       	std	Y+3, r25	; 0x03
     55e:	8a 83       	std	Y+2, r24	; 0x02
     560:	19 c0       	rjmp	.+50     	; 0x594 <moving_auto_mode+0x108>
	}else{
		my_car->speed = 2;
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	9d 83       	std	Y+5, r25	; 0x05
     568:	8c 83       	std	Y+4, r24	; 0x04
		my_car->state = FORWARD;
     56a:	1b 82       	std	Y+3, r1	; 0x03
     56c:	1a 82       	std	Y+2, r1	; 0x02
     56e:	12 c0       	rjmp	.+36     	; 0x594 <moving_auto_mode+0x108>
		my_car->lcd_text_down = lcd_texts[my_car->speed + 2];
	}else{
		my_car->lcd_text_down = lcd_texts[12];
	}
	
	car_move_func[my_car->state](speed_boundarys[my_car->speed]);
     570:	ac 81       	ldd	r26, Y+4	; 0x04
     572:	bd 81       	ldd	r27, Y+5	; 0x05
     574:	aa 0f       	add	r26, r26
     576:	bb 1f       	adc	r27, r27
     578:	a6 5e       	subi	r26, 0xE6	; 230
     57a:	be 4f       	sbci	r27, 0xFE	; 254
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	fc 01       	movw	r30, r24
     582:	ee 5c       	subi	r30, 0xCE	; 206
     584:	fe 4f       	sbci	r31, 0xFE	; 254
     586:	01 90       	ld	r0, Z+
     588:	f0 81       	ld	r31, Z
     58a:	e0 2d       	mov	r30, r0
     58c:	8d 91       	ld	r24, X+
     58e:	9c 91       	ld	r25, X
     590:	09 95       	icall
     592:	0d c0       	rjmp	.+26     	; 0x5ae <moving_auto_mode+0x122>
	}else{
		my_car->speed = 2;
		my_car->state = FORWARD;
	}
	
	if(my_car->state != STOP)
     594:	8a 81       	ldd	r24, Y+2	; 0x02
     596:	9b 81       	ldd	r25, Y+3	; 0x03
	{
		my_car->lcd_text_down = lcd_texts[my_car->speed + 2];
     598:	ec 81       	ldd	r30, Y+4	; 0x04
     59a:	fd 81       	ldd	r31, Y+5	; 0x05
     59c:	ee 0f       	add	r30, r30
     59e:	ff 1f       	adc	r31, r31
     5a0:	ec 5f       	subi	r30, 0xFC	; 252
     5a2:	fe 4f       	sbci	r31, 0xFE	; 254
     5a4:	20 81       	ld	r18, Z
     5a6:	31 81       	ldd	r19, Z+1	; 0x01
     5a8:	39 87       	std	Y+9, r19	; 0x09
     5aa:	28 87       	std	Y+8, r18	; 0x08
     5ac:	e1 cf       	rjmp	.-62     	; 0x570 <moving_auto_mode+0xe4>
	}else{
		my_car->lcd_text_down = lcd_texts[12];
	}
	
	car_move_func[my_car->state](speed_boundarys[my_car->speed]);
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <__vector_16>:
	"speed 10 (max)",
	"stop"
};

ISR(TIMER0_OVF_vect)
{
     5b4:	1f 92       	push	r1
     5b6:	0f 92       	push	r0
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	0f 92       	push	r0
     5bc:	11 24       	eor	r1, r1
     5be:	8f 93       	push	r24
     5c0:	9f 93       	push	r25
	TCNT0 = 6; // 6 ~ 256으로 돌리기 위해
     5c2:	86 e0       	ldi	r24, 0x06	; 6
     5c4:	82 bf       	out	0x32, r24	; 50
	msec_count++;
     5c6:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <msec_count>
     5ca:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <msec_count+0x1>
     5ce:	01 96       	adiw	r24, 0x01	; 1
     5d0:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <msec_count+0x1>
     5d4:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <msec_count>
	
	monitor_shoot = 1;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <monitor_shoot+0x1>
     5e0:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <monitor_shoot>
}
     5e4:	9f 91       	pop	r25
     5e6:	8f 91       	pop	r24
     5e8:	0f 90       	pop	r0
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	0f 90       	pop	r0
     5ee:	1f 90       	pop	r1
     5f0:	18 95       	reti

000005f2 <init_timer0>:
    }
}

void init_timer0(void)
{
	TCNT0 = 6;
     5f2:	86 e0       	ldi	r24, 0x06	; 6
     5f4:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     5f6:	83 b7       	in	r24, 0x33	; 51
     5f8:	84 60       	ori	r24, 0x04	; 4
     5fa:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
     5fc:	87 b7       	in	r24, 0x37	; 55
     5fe:	81 60       	ori	r24, 0x01	; 1
     600:	87 bf       	out	0x37, r24	; 55
     602:	08 95       	ret

00000604 <main>:
	
	monitor_shoot = 1;
}

int main(void)
{
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	2a 97       	sbiw	r28, 0x0a	; 10
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
	// TODO
    // 각종 초기화
	init_timer0();
     618:	ec df       	rcall	.-40     	; 0x5f2 <init_timer0>
	init_timer1();
     61a:	9c d0       	rcall	.+312    	; 0x754 <init_timer1>
	init_L298N();
     61c:	ac d0       	rcall	.+344    	; 0x776 <init_L298N>
	init_uart1();
     61e:	a1 d1       	rcall	.+834    	; 0x962 <init_uart1>
	init_uart0();
     620:	72 d1       	rcall	.+740    	; 0x906 <init_uart0>
     622:	e9 d3       	rcall	.+2002   	; 0xdf6 <init_ultrasonic>
	init_ultrasonic();
     624:	86 dd       	rcall	.-1268   	; 0x132 <init_button>
     626:	5e de       	rcall	.-836    	; 0x2e4 <I2C_LCD_init>
	init_button();
     628:	78 94       	sei
     62a:	8c e3       	ldi	r24, 0x3C	; 60
	I2C_LCD_init();
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <__iob+0x3>
	sei();
	stdout = &OUTPUT;
     632:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <__iob+0x2>
     636:	1a 82       	std	Y+2, r1	; 0x02
     638:	19 82       	std	Y+1, r1	; 0x01
     63a:	84 e0       	ldi	r24, 0x04	; 4
     63c:	90 e0       	ldi	r25, 0x00	; 0
	
	t_car_info my_car;
	my_car.mode = MANUAL_MODE;
     63e:	9c 83       	std	Y+4, r25	; 0x04
     640:	8b 83       	std	Y+3, r24	; 0x03
	my_car.state = STOP;
     642:	83 e0       	ldi	r24, 0x03	; 3
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	9e 83       	std	Y+6, r25	; 0x06
     648:	8d 83       	std	Y+5, r24	; 0x05
	my_car.speed = 3;
     64a:	e0 e0       	ldi	r30, 0x00	; 0
     64c:	f1 e0       	ldi	r31, 0x01	; 1
     64e:	80 81       	ld	r24, Z
     650:	91 81       	ldd	r25, Z+1	; 0x01
	my_car.lcd_text_up = lcd_texts[0];
     652:	98 87       	std	Y+8, r25	; 0x08
     654:	8f 83       	std	Y+7, r24	; 0x07
     656:	82 85       	ldd	r24, Z+10	; 0x0a
     658:	93 85       	ldd	r25, Z+11	; 0x0b
     65a:	9a 87       	std	Y+10, r25	; 0x0a
	my_car.lcd_text_down = lcd_texts[my_car.speed + 2];
     65c:	89 87       	std	Y+9, r24	; 0x09
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	9a d0       	rcall	.+308    	; 0x798 <motor_stop>
	
	motor_stop(0);
     664:	0f 2e       	mov	r0, r31
     666:	f4 e6       	ldi	r31, 0x64	; 100
     668:	ef 2e       	mov	r14, r31
     66a:	f1 2c       	mov	r15, r1
		
		if(monitor_shoot)
		{
			monitor_shoot = 0;
			
			if(msec_count % 100 == 0)
     66c:	f0 2d       	mov	r31, r0
     66e:	00 e0       	ldi	r16, 0x00	; 0
     670:	11 e0       	ldi	r17, 0x01	; 1
     672:	68 94       	set
     674:	88 24       	eor	r8, r8
			{
				bt_data = 0;
				my_car.mode = MANUAL_MODE;
				my_car.state = STOP;
				my_car.speed = 3;
				my_car.lcd_text_up = lcd_texts[0];
     676:	82 f8       	bld	r8, 2
     678:	91 2c       	mov	r9, r1
				my_car.lcd_text_down = lcd_texts[3];
			}else if(my_car.mode == AUTO_MODE)
			{
				bt_data = 0;
				my_car.mode = MANUAL_MODE;
				my_car.state = STOP;
     67a:	aa 24       	eor	r10, r10
     67c:	a3 94       	inc	r10
     67e:	b1 2c       	mov	r11, r1
     680:	68 94       	set
		
		if(get_button(BUTTON0, BUTTON0PIN))
		{
			if(my_car.mode == MANUAL_MODE)
			{
				my_car.mode = AUTO_MODE;
     682:	cc 24       	eor	r12, r12
     684:	c1 f8       	bld	r12, 1
     686:	d1 2c       	mov	r13, r1
				my_car.state = FORWARD;
				my_car.speed = 2;
     688:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <monitor_shoot>
     68c:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <monitor_shoot+0x1>
		// LED 제어하기
		// LCD 제어하기
		// FND 제어하기
		// 부저 제어하기
		
		if(monitor_shoot)
     690:	89 2b       	or	r24, r25
     692:	b9 f0       	breq	.+46     	; 0x6c2 <main+0xbe>
     694:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <monitor_shoot+0x1>
     698:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <monitor_shoot>
		{
			monitor_shoot = 0;
     69c:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <msec_count>
     6a0:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <msec_count+0x1>
			
			if(msec_count % 100 == 0)
     6a4:	b7 01       	movw	r22, r14
     6a6:	66 d5       	rcall	.+2764   	; 0x1174 <__divmodhi4>
     6a8:	89 2b       	or	r24, r25
     6aa:	59 f4       	brne	.+22     	; 0x6c2 <main+0xbe>
     6ac:	12 de       	rcall	.-988    	; 0x2d2 <I2C_LCD_clear>
     6ae:	4f 81       	ldd	r20, Y+7	; 0x07
     6b0:	58 85       	ldd	r21, Y+8	; 0x08
			{
				I2C_LCD_clear();
     6b2:	60 e0       	ldi	r22, 0x00	; 0
				I2C_LCD_write_string_XY(0,0,my_car.lcd_text_up);
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	54 de       	rcall	.-856    	; 0x360 <I2C_LCD_write_string_XY>
     6b8:	49 85       	ldd	r20, Y+9	; 0x09
     6ba:	5a 85       	ldd	r21, Y+10	; 0x0a
     6bc:	60 e0       	ldi	r22, 0x00	; 0
				I2C_LCD_write_string_XY(1,0,my_car.lcd_text_down);
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	4f de       	rcall	.-866    	; 0x360 <I2C_LCD_write_string_XY>
     6c2:	63 e0       	ldi	r22, 0x03	; 3
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
			}
			
		}
		
		if(get_button(BUTTON0, BUTTON0PIN))
     6ca:	35 dd       	rcall	.-1430   	; 0x136 <get_button>
     6cc:	89 2b       	or	r24, r25
     6ce:	49 f1       	breq	.+82     	; 0x722 <main+0x11e>
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	9a 81       	ldd	r25, Y+2	; 0x02
     6d4:	00 97       	sbiw	r24, 0x00	; 0
     6d6:	81 f4       	brne	.+32     	; 0x6f8 <main+0xf4>
     6d8:	ba 82       	std	Y+2, r11	; 0x02
		{
			if(my_car.mode == MANUAL_MODE)
     6da:	a9 82       	std	Y+1, r10	; 0x01
     6dc:	1c 82       	std	Y+4, r1	; 0x04
     6de:	1b 82       	std	Y+3, r1	; 0x03
     6e0:	de 82       	std	Y+6, r13	; 0x06
			{
				my_car.mode = AUTO_MODE;
     6e2:	cd 82       	std	Y+5, r12	; 0x05
     6e4:	f8 01       	movw	r30, r16
				my_car.state = FORWARD;
     6e6:	82 81       	ldd	r24, Z+2	; 0x02
     6e8:	93 81       	ldd	r25, Z+3	; 0x03
				my_car.speed = 2;
     6ea:	98 87       	std	Y+8, r25	; 0x08
     6ec:	8f 83       	std	Y+7, r24	; 0x07
				my_car.lcd_text_up = lcd_texts[1];
     6ee:	86 81       	ldd	r24, Z+6	; 0x06
     6f0:	97 81       	ldd	r25, Z+7	; 0x07
     6f2:	9a 87       	std	Y+10, r25	; 0x0a
     6f4:	89 87       	std	Y+9, r24	; 0x09
     6f6:	15 c0       	rjmp	.+42     	; 0x722 <main+0x11e>
				my_car.lcd_text_down = lcd_texts[3];
     6f8:	01 97       	sbiw	r24, 0x01	; 1
     6fa:	99 f4       	brne	.+38     	; 0x722 <main+0x11e>
     6fc:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <bt_data>
     700:	1a 82       	std	Y+2, r1	; 0x02
			}else if(my_car.mode == AUTO_MODE)
     702:	19 82       	std	Y+1, r1	; 0x01
     704:	9c 82       	std	Y+4, r9	; 0x04
			{
				bt_data = 0;
     706:	8b 82       	std	Y+3, r8	; 0x03
     708:	83 e0       	ldi	r24, 0x03	; 3
				my_car.mode = MANUAL_MODE;
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	9e 83       	std	Y+6, r25	; 0x06
				my_car.state = STOP;
     70e:	8d 83       	std	Y+5, r24	; 0x05
     710:	f8 01       	movw	r30, r16
				my_car.speed = 3;
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	98 87       	std	Y+8, r25	; 0x08
     718:	8f 83       	std	Y+7, r24	; 0x07
				my_car.lcd_text_up = lcd_texts[0];
     71a:	80 8d       	ldd	r24, Z+24	; 0x18
     71c:	91 8d       	ldd	r25, Z+25	; 0x19
     71e:	9a 87       	std	Y+10, r25	; 0x0a
     720:	89 87       	std	Y+9, r24	; 0x09
     722:	e9 81       	ldd	r30, Y+1	; 0x01
				my_car.lcd_text_down = lcd_texts[12];
     724:	fa 81       	ldd	r31, Y+2	; 0x02
     726:	ee 0f       	add	r30, r30
     728:	ff 1f       	adc	r31, r31
     72a:	e2 5d       	subi	r30, 0xD2	; 210
			}
			
		}
		
		car_program_modes[my_car.mode](&my_car);
     72c:	fe 4f       	sbci	r31, 0xFE	; 254
     72e:	01 90       	ld	r0, Z+
     730:	f0 81       	ld	r31, Z
     732:	e0 2d       	mov	r30, r0
     734:	ce 01       	movw	r24, r28
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	09 95       	icall
     73a:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <msec_count>
     73e:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <msec_count+0x1>
     742:	89 3e       	cpi	r24, 0xE9	; 233
		
		if(msec_count > 1000)
     744:	93 40       	sbci	r25, 0x03	; 3
     746:	0c f4       	brge	.+2      	; 0x74a <main+0x146>
     748:	9f cf       	rjmp	.-194    	; 0x688 <main+0x84>
     74a:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <msec_count+0x1>
     74e:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <msec_count>
     752:	9a cf       	rjmp	.-204    	; 0x688 <main+0x84>

00000754 <init_timer1>:


void init_timer1(void)
{
	// 분주비 설정 (64)
	TCCR1B |= 0 << CS12 | 1 << CS11 | 1 << CS10;
     754:	8e b5       	in	r24, 0x2e	; 46
     756:	83 60       	ori	r24, 0x03	; 3
     758:	8e bd       	out	0x2e, r24	; 46
	
	// 모드설정 : 14번 (ICR1이 TOP인 고속 PWM)
	TCCR1A |= 0 << WGM10 | 1 << WGM11;
     75a:	8f b5       	in	r24, 0x2f	; 47
     75c:	82 60       	ori	r24, 0x02	; 2
     75e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << WGM12 | 1 << WGM13;
     760:	8e b5       	in	r24, 0x2e	; 46
     762:	88 61       	ori	r24, 0x18	; 24
     764:	8e bd       	out	0x2e, r24	; 46
	
	// 비반전 모드 (TOP : ICR1레지스터)
	TCCR1A |= 1 << COM1A1 | 1 << COM1B1;
     766:	8f b5       	in	r24, 0x2f	; 47
     768:	80 6a       	ori	r24, 0xA0	; 160
     76a:	8f bd       	out	0x2f, r24	; 47
	
	// ICR1레지스터 설정 (TOP 1023으로 설정, TOP까지 4ms로 설정함)
	ICR1 = 0x3ff;
     76c:	8f ef       	ldi	r24, 0xFF	; 255
     76e:	93 e0       	ldi	r25, 0x03	; 3
     770:	97 bd       	out	0x27, r25	; 39
     772:	86 bd       	out	0x26, r24	; 38
     774:	08 95       	ret

00000776 <init_L298N>:
}

void init_L298N(void)
{
	// DDR 출력모드 (PWM, 방향)
	MOTOR_PWM_DDR |= 1 << MOTOR_LEFT_PORT_DDR_NUM | 1 << MOTOR_RIGHT_PORT_DDR_NUM;
     776:	87 b3       	in	r24, 0x17	; 23
     778:	80 66       	ori	r24, 0x60	; 96
     77a:	87 bb       	out	0x17, r24	; 23
	MOTOR_DRIVER_DIRECTION_DDR |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
     77c:	e1 e6       	ldi	r30, 0x61	; 97
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	80 81       	ld	r24, Z
     782:	8f 60       	ori	r24, 0x0F	; 15
     784:	80 83       	st	Z, r24
								  1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM;
	
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
     786:	e2 e6       	ldi	r30, 0x62	; 98
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	80 7f       	andi	r24, 0xF0	; 240
     78e:	80 83       	st	Z, r24
									 1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
	
	// direction 전진모드 설정 (정회전)
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN3_NUM;
     790:	80 81       	ld	r24, Z
     792:	85 60       	ori	r24, 0x05	; 5
     794:	80 83       	st	Z, r24
     796:	08 95       	ret

00000798 <motor_stop>:

// motor driver IN값을 전부 1로 set한다
void motor_stop(int speed)
{
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
     798:	e2 e6       	ldi	r30, 0x62	; 98
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	80 7f       	andi	r24, 0xF0	; 240
     7a0:	80 83       	st	Z, r24
								     1 <<MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
	
	// direction port set
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
     7a2:	80 81       	ld	r24, Z
     7a4:	8f 60       	ori	r24, 0x0F	; 15
     7a6:	80 83       	st	Z, r24
     7a8:	08 95       	ret

000007aa <motor_direction_forward>:
								   1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM;
}

void motor_direction_forward(int speed)
{
     7aa:	9c 01       	movw	r18, r24
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
     7ac:	e2 e6       	ldi	r30, 0x62	; 98
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	90 81       	ld	r25, Z
     7b2:	90 7f       	andi	r25, 0xF0	; 240
     7b4:	90 83       	st	Z, r25
									 1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
		
	// direction 전진모드 설정 (정회전)
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN3_NUM;
     7b6:	90 81       	ld	r25, Z
     7b8:	95 60       	ori	r25, 0x05	; 5
     7ba:	90 83       	st	Z, r25
	
	// 속도 적용 (양쪽 바퀴에 같은 속도)
	MOTOR_LEFT_PWM = MOTOR_RIGHT_PWM = speed;
     7bc:	39 bd       	out	0x29, r19	; 41
     7be:	28 bd       	out	0x28, r18	; 40
     7c0:	3b bd       	out	0x2b, r19	; 43
     7c2:	2a bd       	out	0x2a, r18	; 42
     7c4:	08 95       	ret

000007c6 <motor_direction_backward>:
}

void motor_direction_backward(int speed)
{
     7c6:	9c 01       	movw	r18, r24
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
     7c8:	e2 e6       	ldi	r30, 0x62	; 98
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	90 81       	ld	r25, Z
     7ce:	90 7f       	andi	r25, 0xF0	; 240
     7d0:	90 83       	st	Z, r25
									 1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
		
	// direction 후진모드 설정 (역회전)
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN2_NUM | 1 << MOTOR_DRIVER_IN4_NUM;
     7d2:	90 81       	ld	r25, Z
     7d4:	9a 60       	ori	r25, 0x0A	; 10
     7d6:	90 83       	st	Z, r25
	
	// 속도 적용 (양쪽 바퀴에 같은 속도)
	MOTOR_LEFT_PWM = MOTOR_RIGHT_PWM = speed;
     7d8:	39 bd       	out	0x29, r19	; 41
     7da:	28 bd       	out	0x28, r18	; 40
     7dc:	3b bd       	out	0x2b, r19	; 43
     7de:	2a bd       	out	0x2a, r18	; 42
     7e0:	08 95       	ret

000007e2 <motor_turn_left>:
}

void motor_turn_left(int speed)
{
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	ec 01       	movw	r28, r24
	motor_direction_forward(0); // 전진모드 설정
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	de df       	rcall	.-68     	; 0x7aa <motor_direction_forward>
	
	MOTOR_LEFT_PWM = 0;
     7ee:	1b bc       	out	0x2b, r1	; 43
     7f0:	1a bc       	out	0x2a, r1	; 42
	MOTOR_RIGHT_PWM = speed;
     7f2:	d9 bd       	out	0x29, r29	; 41
     7f4:	c8 bd       	out	0x28, r28	; 40
}
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <motor_turn_right>:

void motor_turn_right(int speed)
{
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	ec 01       	movw	r28, r24
	motor_direction_forward(0); // 전진모드 설정
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	d1 df       	rcall	.-94     	; 0x7aa <motor_direction_forward>
	MOTOR_LEFT_PWM = speed;
     808:	db bd       	out	0x2b, r29	; 43
     80a:	ca bd       	out	0x2a, r28	; 42
	MOTOR_RIGHT_PWM = 0;
     80c:	19 bc       	out	0x29, r1	; 41
     80e:	18 bc       	out	0x28, r1	; 40
}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	08 95       	ret

00000816 <__vector_18>:
PC omportmaster로 부터 1byte가 들어오면 (즉, stop bit가 감지되면) RX complete인터럽트가 호출된다
== 한 바이트마다 인터럽트 처리를 해야하는것!
*/

ISR(USART0_RX_vect)
{
     816:	1f 92       	push	r1
     818:	0f 92       	push	r0
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	0f 92       	push	r0
     81e:	11 24       	eor	r1, r1
     820:	0b b6       	in	r0, 0x3b	; 59
     822:	0f 92       	push	r0
     824:	2f 93       	push	r18
     826:	3f 93       	push	r19
     828:	4f 93       	push	r20
     82a:	5f 93       	push	r21
     82c:	6f 93       	push	r22
     82e:	7f 93       	push	r23
     830:	8f 93       	push	r24
     832:	9f 93       	push	r25
     834:	af 93       	push	r26
     836:	bf 93       	push	r27
     838:	ef 93       	push	r30
     83a:	ff 93       	push	r31
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	1f 92       	push	r1
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t rx_data;
	volatile static int i = 0;	// buffer의 index
	
	rx_data = UDR0; // uart0 하드웨어로 들어온 문자 읽어오기
     846:	8c b1       	in	r24, 0x0c	; 12
     848:	89 83       	std	Y+1, r24	; 0x01
					// 이렇게 assign연산자로 UDR0값을 읽어오는 순간, UDR0는 empty가됨 (자동)
	
	if(rx_data == '\n')
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	8a 30       	cpi	r24, 0x0A	; 10
     84e:	49 f5       	brne	.+82     	; 0x8a2 <__vector_18+0x8c>
	{
		rx_buff[rear++][i] = 0; // 문장의 끝은 항상 0
     850:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <rear>
     854:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <rear+0x1>
     858:	c9 01       	movw	r24, r18
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <rear+0x1>
     860:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <rear>
     864:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <i.2086>
     868:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <i.2086+0x1>
     86c:	48 e2       	ldi	r20, 0x28	; 40
     86e:	42 9f       	mul	r20, r18
     870:	f0 01       	movw	r30, r0
     872:	43 9f       	mul	r20, r19
     874:	f0 0d       	add	r31, r0
     876:	11 24       	eor	r1, r1
     878:	e3 50       	subi	r30, 0x03	; 3
     87a:	fe 4f       	sbci	r31, 0xFE	; 254
     87c:	e8 0f       	add	r30, r24
     87e:	f9 1f       	adc	r31, r25
     880:	10 82       	st	Z, r1
		rear %= COMMAND_NUMBER; // 원형큐
     882:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <rear>
     886:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <rear+0x1>
     88a:	6a e0       	ldi	r22, 0x0A	; 10
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	72 d4       	rcall	.+2276   	; 0x1174 <__divmodhi4>
     890:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <rear+0x1>
     894:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <rear>
		i = 0; // 새로오는건 버퍼에 새롭게 채워야함 (다른 메시지니까!)
     898:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <i.2086+0x1>
     89c:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <i.2086>
     8a0:	1c c0       	rjmp	.+56     	; 0x8da <__vector_18+0xc4>
		// 큐 full 여부 확인
	}
	else
	{
		// 그냥 버퍼에 넣기 (push)
		rx_buff[rear][i++] = rx_data;
     8a2:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <rear>
     8a6:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <rear+0x1>
     8aa:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <i.2086>
     8ae:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <i.2086+0x1>
     8b2:	9c 01       	movw	r18, r24
     8b4:	2f 5f       	subi	r18, 0xFF	; 255
     8b6:	3f 4f       	sbci	r19, 0xFF	; 255
     8b8:	30 93 e6 01 	sts	0x01E6, r19	; 0x8001e6 <i.2086+0x1>
     8bc:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <i.2086>
     8c0:	49 81       	ldd	r20, Y+1	; 0x01
     8c2:	58 e2       	ldi	r21, 0x28	; 40
     8c4:	56 9f       	mul	r21, r22
     8c6:	90 01       	movw	r18, r0
     8c8:	57 9f       	mul	r21, r23
     8ca:	30 0d       	add	r19, r0
     8cc:	11 24       	eor	r1, r1
     8ce:	23 50       	subi	r18, 0x03	; 3
     8d0:	3e 4f       	sbci	r19, 0xFE	; 254
     8d2:	f9 01       	movw	r30, r18
     8d4:	e8 0f       	add	r30, r24
     8d6:	f9 1f       	adc	r31, r25
     8d8:	40 83       	st	Z, r20
		// command length 확인
	}
}
     8da:	0f 90       	pop	r0
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	ff 91       	pop	r31
     8e2:	ef 91       	pop	r30
     8e4:	bf 91       	pop	r27
     8e6:	af 91       	pop	r26
     8e8:	9f 91       	pop	r25
     8ea:	8f 91       	pop	r24
     8ec:	7f 91       	pop	r23
     8ee:	6f 91       	pop	r22
     8f0:	5f 91       	pop	r21
     8f2:	4f 91       	pop	r20
     8f4:	3f 91       	pop	r19
     8f6:	2f 91       	pop	r18
     8f8:	0f 90       	pop	r0
     8fa:	0b be       	out	0x3b, r0	; 59
     8fc:	0f 90       	pop	r0
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	0f 90       	pop	r0
     902:	1f 90       	pop	r1
     904:	18 95       	reti

00000906 <init_uart0>:

*/
void init_uart0(void)
{
	// 전송속도 설정
	UBRR0H = 0x00;
     906:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207; // 2배속 모드임
     90a:	8f ec       	ldi	r24, 0xCF	; 207
     90c:	89 b9       	out	0x09, r24	; 9
	//UBRR0L = 16;
	//UBRR0L = 832;
	
	UCSR0A |= 1 << U2X0; // 2배속 통신
     90e:	59 9a       	sbi	0x0b, 1	; 11
	
	UCSR0C |= 0x06; // 비동기, none 8bit, data 8 bit
     910:	e5 e9       	ldi	r30, 0x95	; 149
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	86 60       	ori	r24, 0x06	; 6
     918:	80 83       	st	Z, r24
	
	// 인터럽트, uart 기능 설정
	//UCSR0B |= 1 << RXEN0; // 수신 허용
	//UCSR0B |= 1 << TXEN0; // 송신 허용
	//UCSR0B |= 1 << RXCIE0; // 수신 인터럽트 허용
	UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     91a:	8a b1       	in	r24, 0x0a	; 10
     91c:	88 69       	ori	r24, 0x98	; 152
     91e:	8a b9       	out	0x0a, r24	; 10
	
	rear = front = 0;
     920:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <front+0x1>
     924:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <front>
     928:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <rear+0x1>
     92c:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <rear>
     930:	08 95       	ret

00000932 <UART0_transmit>:

void UART0_transmit(uint8_t data)
{
	// 데이터가 전송중이면, 끝날때까지 기다려야함
	// == 레지스터가 비었는지 안비었는지 확인해양함
	while(!(UCSR0A & 1 << UDRE0)) ; // 버퍼가 비어있을때까지 여기서 무한대기
     932:	5d 9b       	sbis	0x0b, 5	; 11
     934:	fe cf       	rjmp	.-4      	; 0x932 <UART0_transmit>
	
	UDR0 = data; // data를 h/w에 전송
     936:	8c b9       	out	0x0c, r24	; 12
     938:	08 95       	ret

0000093a <__vector_30>:
#include "uart1.h"

volatile uint8_t pre_bt_data = 0;
volatile uint8_t bt_data = 0; // 명령어
ISR(USART1_RX_vect)
{
     93a:	1f 92       	push	r1
     93c:	0f 92       	push	r0
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	0f 92       	push	r0
     942:	11 24       	eor	r1, r1
     944:	8f 93       	push	r24
	pre_bt_data = bt_data;
     946:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <bt_data>
     94a:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <pre_bt_data>
	bt_data = UDR1;
     94e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     952:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <bt_data>
}
     956:	8f 91       	pop	r24
     958:	0f 90       	pop	r0
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	0f 90       	pop	r0
     95e:	1f 90       	pop	r1
     960:	18 95       	reti

00000962 <init_uart1>:

void init_uart1(void)
{
	// 전송속도 설정
	UBRR1H = 0x00;
     962:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207; // 2배속 모드임
     966:	8f ec       	ldi	r24, 0xCF	; 207
     968:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>

	UCSR1A |= 1 << U2X1; // 2배속 통신
     96c:	eb e9       	ldi	r30, 0x9B	; 155
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	80 81       	ld	r24, Z
     972:	82 60       	ori	r24, 0x02	; 2
     974:	80 83       	st	Z, r24
	
	UCSR1C |= 0x06; // 비동기, none 8bit, data 8 bit
     976:	ed e9       	ldi	r30, 0x9D	; 157
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 81       	ld	r24, Z
     97c:	86 60       	ori	r24, 0x06	; 6
     97e:	80 83       	st	Z, r24
	
	// 인터럽트, uart 기능 설정
	UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
     980:	ea e9       	ldi	r30, 0x9A	; 154
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	88 69       	ori	r24, 0x98	; 152
     988:	80 83       	st	Z, r24
     98a:	08 95       	ret

0000098c <trigger_ultrasonic_left>:
	TIMSK |= 1 << TOIE2;
}

void trigger_ultrasonic_left(void)
{
	distance_checking = 1;
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <distance_checking+0x1>
     994:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <distance_checking>
	// TRIG 보내기 전에 일정시간 LOW로 둔 다음에 보내야함!
	// HIGH 보낸 다음에도 LOW로 다시 돌려두기
	
	TRIG_PORT &= ~(1 << TRIG_LEFT_PIN_NUM); // 0으로 초기화
     998:	d8 98       	cbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     99a:	85 e0       	ldi	r24, 0x05	; 5
     99c:	8a 95       	dec	r24
     99e:	f1 f7       	brne	.-4      	; 0x99c <trigger_ultrasonic_left+0x10>
     9a0:	00 00       	nop
	
	// 약간의 딜레이
	_delay_us(1);
	
	// HIGH 쏘기!!
	TRIG_PORT |= 1 << TRIG_LEFT_PIN_NUM;
     9a2:	d8 9a       	sbi	0x1b, 0	; 27
     9a4:	80 e5       	ldi	r24, 0x50	; 80
     9a6:	8a 95       	dec	r24
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <trigger_ultrasonic_left+0x1a>
	
	// 10us동안 보내기 -> 약간 여유있게 15로 했당
	_delay_us(15);
	
	// 다시 LOW로 돌리기
	TRIG_PORT &= ~(1 << TRIG_LEFT_PIN_NUM);
     9aa:	d8 98       	cbi	0x1b, 0	; 27
     9ac:	08 95       	ret

000009ae <trigger_ultrasonic_center>:
}

void trigger_ultrasonic_center(void)
{
	distance_checking = 1;
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <distance_checking+0x1>
     9b6:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <distance_checking>
	
	TRIG_PORT &= ~(1 << TRIG_CENTER_PIN_NUM); 
     9ba:	d9 98       	cbi	0x1b, 1	; 27
     9bc:	85 e0       	ldi	r24, 0x05	; 5
     9be:	8a 95       	dec	r24
     9c0:	f1 f7       	brne	.-4      	; 0x9be <trigger_ultrasonic_center+0x10>
     9c2:	00 00       	nop
	
	_delay_us(1);
	
	TRIG_PORT |= 1 << TRIG_CENTER_PIN_NUM;
     9c4:	d9 9a       	sbi	0x1b, 1	; 27
     9c6:	80 e5       	ldi	r24, 0x50	; 80
     9c8:	8a 95       	dec	r24
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <trigger_ultrasonic_center+0x1a>
	
	_delay_us(15);
	
	TRIG_PORT &= ~(1 << TRIG_CENTER_PIN_NUM);
     9cc:	d9 98       	cbi	0x1b, 1	; 27
     9ce:	08 95       	ret

000009d0 <trigger_ultrasonic_right>:
}

void trigger_ultrasonic_right(void)
{
	distance_checking = 1;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <distance_checking+0x1>
     9d8:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <distance_checking>
	// TRIG 보내기 전에 일정시간 LOW로 둔 다음에 보내야함!
	// HIGH 보낸 다음에도 LOW로 다시 돌려두기
	
	TRIG_PORT &= ~(1 << TRIG_RIGHT_PIN_NUM); // 0으로 초기화
     9dc:	da 98       	cbi	0x1b, 2	; 27
     9de:	85 e0       	ldi	r24, 0x05	; 5
     9e0:	8a 95       	dec	r24
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <trigger_ultrasonic_right+0x10>
     9e4:	00 00       	nop
	
	// 약간의 딜레이
	_delay_us(1);
	
	// HIGH 쏘기!!
	TRIG_PORT |= 1 << TRIG_RIGHT_PIN_NUM;
     9e6:	da 9a       	sbi	0x1b, 2	; 27
     9e8:	80 e5       	ldi	r24, 0x50	; 80
     9ea:	8a 95       	dec	r24
     9ec:	f1 f7       	brne	.-4      	; 0x9ea <trigger_ultrasonic_right+0x1a>
	
	// 10us동안 보내기 -> 약간 여유있게 15로 했당
	_delay_us(15);
	
	// 다시 LOW로 돌리기
	TRIG_PORT &= ~(1 << TRIG_RIGHT_PIN_NUM);
     9ee:	da 98       	cbi	0x1b, 2	; 27
     9f0:	08 95       	ret

000009f2 <__vector_10>:
	trigger_ultrasonic_center,
	trigger_ultrasonic_right
};

ISR(TIMER2_OVF_vect)
{
     9f2:	1f 92       	push	r1
     9f4:	0f 92       	push	r0
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	0f 92       	push	r0
     9fa:	11 24       	eor	r1, r1
     9fc:	8f 93       	push	r24
     9fe:	9f 93       	push	r25
	overflows++;
     a00:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <overflows>
     a04:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <overflows+0x1>
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <overflows+0x1>
     a0e:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <overflows>
}
     a12:	9f 91       	pop	r25
     a14:	8f 91       	pop	r24
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	0f 90       	pop	r0
     a1c:	1f 90       	pop	r1
     a1e:	18 95       	reti

00000a20 <__vector_5>:

// left
ISR(INT4_vect)
{
     a20:	1f 92       	push	r1
     a22:	0f 92       	push	r0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	0f 92       	push	r0
     a28:	11 24       	eor	r1, r1
     a2a:	0b b6       	in	r0, 0x3b	; 59
     a2c:	0f 92       	push	r0
     a2e:	cf 92       	push	r12
     a30:	df 92       	push	r13
     a32:	ef 92       	push	r14
     a34:	ff 92       	push	r15
     a36:	2f 93       	push	r18
     a38:	3f 93       	push	r19
     a3a:	4f 93       	push	r20
     a3c:	5f 93       	push	r21
     a3e:	6f 93       	push	r22
     a40:	7f 93       	push	r23
     a42:	8f 93       	push	r24
     a44:	9f 93       	push	r25
     a46:	af 93       	push	r26
     a48:	bf 93       	push	r27
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	ef 93       	push	r30
     a50:	ff 93       	push	r31
	static int state = 1;
	// 1. rising edge -> 지금 echo는 HIGH
	if(state)
     a52:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <state.1758>
     a56:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <state.1758+0x1>
     a5a:	89 2b       	or	r24, r25
     a5c:	51 f0       	breq	.+20     	; 0xa72 <__vector_5+0x52>
	{
		TCNT2 = 0;
     a5e:	14 bc       	out	0x24, r1	; 36
		state = 0;
     a60:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <state.1758+0x1>
     a64:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <state.1758>
		overflows = 0;
     a68:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <overflows+0x1>
     a6c:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <overflows>
     a70:	61 c0       	rjmp	.+194    	; 0xb34 <__vector_5+0x114>
	}
	// 2. falling edge -> 지금 echo는 LOW
	else
	{
		tcnt_value = TCNT2;
     a72:	84 b5       	in	r24, 0x24	; 36
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <tcnt_value+0x1>
     a7a:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <tcnt_value>
		overflows_value = overflows;
     a7e:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <overflows>
     a82:	70 91 ec 01 	lds	r23, 0x01EC	; 0x8001ec <overflows+0x1>
     a86:	70 93 ea 01 	sts	0x01EA, r23	; 0x8001ea <overflows_value+0x1>
     a8a:	60 93 e9 01 	sts	0x01E9, r22	; 0x8001e9 <overflows_value>
		ultrasonic_dis = (tcnt_value + overflows_value * 256.0) * 128.0 / 16;
     a8e:	c0 91 ed 01 	lds	r28, 0x01ED	; 0x8001ed <tcnt_value>
     a92:	d0 91 ee 01 	lds	r29, 0x01EE	; 0x8001ee <tcnt_value+0x1>
     a96:	07 2e       	mov	r0, r23
     a98:	00 0c       	add	r0, r0
     a9a:	88 0b       	sbc	r24, r24
     a9c:	99 0b       	sbc	r25, r25
     a9e:	7b d2       	rcall	.+1270   	; 0xf96 <__floatsisf>
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	40 e8       	ldi	r20, 0x80	; 128
     aa6:	53 e4       	ldi	r21, 0x43	; 67
     aa8:	02 d3       	rcall	.+1540   	; 0x10ae <__mulsf3>
     aaa:	6b 01       	movw	r12, r22
     aac:	7c 01       	movw	r14, r24
     aae:	be 01       	movw	r22, r28
     ab0:	dd 0f       	add	r29, r29
     ab2:	88 0b       	sbc	r24, r24
     ab4:	99 0b       	sbc	r25, r25
     ab6:	6f d2       	rcall	.+1246   	; 0xf96 <__floatsisf>
     ab8:	9b 01       	movw	r18, r22
     aba:	ac 01       	movw	r20, r24
     abc:	c7 01       	movw	r24, r14
     abe:	b6 01       	movw	r22, r12
     ac0:	d3 d1       	rcall	.+934    	; 0xe68 <__addsf3>
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	53 e4       	ldi	r21, 0x43	; 67
     aca:	f1 d2       	rcall	.+1506   	; 0x10ae <__mulsf3>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 e8       	ldi	r20, 0x80	; 128
     ad2:	5d e3       	ldi	r21, 0x3D	; 61
     ad4:	ec d2       	rcall	.+1496   	; 0x10ae <__mulsf3>
     ad6:	2c d2       	rcall	.+1112   	; 0xf30 <__fixsfsi>
     ad8:	70 93 f0 01 	sts	0x01F0, r23	; 0x8001f0 <ultrasonic_dis+0x1>
     adc:	60 93 ef 01 	sts	0x01EF, r22	; 0x8001ef <ultrasonic_dis>
		ultrasonic_dis /= 58;
     ae0:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ultrasonic_dis>
     ae4:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <ultrasonic_dis+0x1>
     ae8:	6a e3       	ldi	r22, 0x3A	; 58
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	43 d3       	rcall	.+1670   	; 0x1174 <__divmodhi4>
     aee:	70 93 f0 01 	sts	0x01F0, r23	; 0x8001f0 <ultrasonic_dis+0x1>
     af2:	60 93 ef 01 	sts	0x01EF, r22	; 0x8001ef <ultrasonic_dis>
     af6:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ultrasonic_dis>
		
		if(ultrasonic_dis <= MAX_LENGHT){
     afa:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <ultrasonic_dis+0x1>
     afe:	07 97       	sbiw	r24, 0x07	; 7
     b00:	3c f4       	brge	.+14     	; 0xb10 <__vector_5+0xf0>
     b02:	81 e0       	ldi	r24, 0x01	; 1
			obstacle_info[0] = 1;
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <obstacle_info+0x1>
     b0a:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <obstacle_info>
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__vector_5+0xf8>
     b10:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <obstacle_info+0x1>
		}else{
			obstacle_info[0] = 0;
     b14:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <obstacle_info>
     b18:	81 e0       	ldi	r24, 0x01	; 1
		}
		
		state = 1;
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <state.1758+0x1>
     b20:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <state.1758>
     b24:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <check_distance_index+0x1>
		check_distance_index = 1;
     b28:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <check_distance_index>
     b2c:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <distance_checking+0x1>
		distance_checking = 0;
     b30:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <distance_checking>
     b34:	ff 91       	pop	r31
	}
}
     b36:	ef 91       	pop	r30
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	bf 91       	pop	r27
     b3e:	af 91       	pop	r26
     b40:	9f 91       	pop	r25
     b42:	8f 91       	pop	r24
     b44:	7f 91       	pop	r23
     b46:	6f 91       	pop	r22
     b48:	5f 91       	pop	r21
     b4a:	4f 91       	pop	r20
     b4c:	3f 91       	pop	r19
     b4e:	2f 91       	pop	r18
     b50:	ff 90       	pop	r15
     b52:	ef 90       	pop	r14
     b54:	df 90       	pop	r13
     b56:	cf 90       	pop	r12
     b58:	0f 90       	pop	r0
     b5a:	0b be       	out	0x3b, r0	; 59
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <__vector_6>:
     b66:	1f 92       	push	r1

// center
ISR(INT5_vect)
{
     b68:	0f 92       	push	r0
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	0f 92       	push	r0
     b6e:	11 24       	eor	r1, r1
     b70:	0b b6       	in	r0, 0x3b	; 59
     b72:	0f 92       	push	r0
     b74:	cf 92       	push	r12
     b76:	df 92       	push	r13
     b78:	ef 92       	push	r14
     b7a:	ff 92       	push	r15
     b7c:	2f 93       	push	r18
     b7e:	3f 93       	push	r19
     b80:	4f 93       	push	r20
     b82:	5f 93       	push	r21
     b84:	6f 93       	push	r22
     b86:	7f 93       	push	r23
     b88:	8f 93       	push	r24
     b8a:	9f 93       	push	r25
     b8c:	af 93       	push	r26
     b8e:	bf 93       	push	r27
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	ef 93       	push	r30
     b96:	ff 93       	push	r31
	static int state = 1;
	if(state)
     b98:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <state.1764>
     b9c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <state.1764+0x1>
     ba0:	89 2b       	or	r24, r25
     ba2:	51 f0       	breq	.+20     	; 0xbb8 <__vector_6+0x52>
	{
		TCNT2 = 0;
     ba4:	14 bc       	out	0x24, r1	; 36
		state = 0;
     ba6:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <state.1764+0x1>
     baa:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <state.1764>
		overflows = 0;
     bae:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <overflows+0x1>
     bb2:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <overflows>
     bb6:	63 c0       	rjmp	.+198    	; 0xc7e <__vector_6+0x118>
	}
	else
	{
		tcnt_value = TCNT2;
     bb8:	84 b5       	in	r24, 0x24	; 36
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <tcnt_value+0x1>
     bc0:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <tcnt_value>
		overflows_value = overflows;
     bc4:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <overflows>
     bc8:	70 91 ec 01 	lds	r23, 0x01EC	; 0x8001ec <overflows+0x1>
     bcc:	70 93 ea 01 	sts	0x01EA, r23	; 0x8001ea <overflows_value+0x1>
     bd0:	60 93 e9 01 	sts	0x01E9, r22	; 0x8001e9 <overflows_value>
		ultrasonic_dis = (tcnt_value + overflows_value * 256.0) * 128.0 / 16;
     bd4:	c0 91 ed 01 	lds	r28, 0x01ED	; 0x8001ed <tcnt_value>
     bd8:	d0 91 ee 01 	lds	r29, 0x01EE	; 0x8001ee <tcnt_value+0x1>
     bdc:	07 2e       	mov	r0, r23
     bde:	00 0c       	add	r0, r0
     be0:	88 0b       	sbc	r24, r24
     be2:	99 0b       	sbc	r25, r25
     be4:	d8 d1       	rcall	.+944    	; 0xf96 <__floatsisf>
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	40 e8       	ldi	r20, 0x80	; 128
     bec:	53 e4       	ldi	r21, 0x43	; 67
     bee:	5f d2       	rcall	.+1214   	; 0x10ae <__mulsf3>
     bf0:	6b 01       	movw	r12, r22
     bf2:	7c 01       	movw	r14, r24
     bf4:	be 01       	movw	r22, r28
     bf6:	dd 0f       	add	r29, r29
     bf8:	88 0b       	sbc	r24, r24
     bfa:	99 0b       	sbc	r25, r25
     bfc:	cc d1       	rcall	.+920    	; 0xf96 <__floatsisf>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	c7 01       	movw	r24, r14
     c04:	b6 01       	movw	r22, r12
     c06:	30 d1       	rcall	.+608    	; 0xe68 <__addsf3>
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	53 e4       	ldi	r21, 0x43	; 67
     c10:	4e d2       	rcall	.+1180   	; 0x10ae <__mulsf3>
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e8       	ldi	r20, 0x80	; 128
     c18:	5d e3       	ldi	r21, 0x3D	; 61
     c1a:	49 d2       	rcall	.+1170   	; 0x10ae <__mulsf3>
     c1c:	89 d1       	rcall	.+786    	; 0xf30 <__fixsfsi>
     c1e:	70 93 f0 01 	sts	0x01F0, r23	; 0x8001f0 <ultrasonic_dis+0x1>
     c22:	60 93 ef 01 	sts	0x01EF, r22	; 0x8001ef <ultrasonic_dis>
		ultrasonic_dis /= 58;
     c26:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ultrasonic_dis>
     c2a:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <ultrasonic_dis+0x1>
     c2e:	6a e3       	ldi	r22, 0x3A	; 58
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	a0 d2       	rcall	.+1344   	; 0x1174 <__divmodhi4>
     c34:	70 93 f0 01 	sts	0x01F0, r23	; 0x8001f0 <ultrasonic_dis+0x1>
     c38:	60 93 ef 01 	sts	0x01EF, r22	; 0x8001ef <ultrasonic_dis>
     c3c:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ultrasonic_dis>
		
		if(ultrasonic_dis <= MAX_LENGHT){
     c40:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <ultrasonic_dis+0x1>
     c44:	07 97       	sbiw	r24, 0x07	; 7
     c46:	3c f4       	brge	.+14     	; 0xc56 <__vector_6+0xf0>
     c48:	81 e0       	ldi	r24, 0x01	; 1
			obstacle_info[1] = 1;
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <obstacle_info+0x3>
     c50:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <obstacle_info+0x2>
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <__vector_6+0xf8>
     c56:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <obstacle_info+0x3>
		}else{
			obstacle_info[1] = 0;
     c5a:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <obstacle_info+0x2>
     c5e:	81 e0       	ldi	r24, 0x01	; 1
		}
		
		state = 1;
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <state.1764+0x1>
     c66:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <state.1764>
     c6a:	82 e0       	ldi	r24, 0x02	; 2
		check_distance_index = 2;
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <check_distance_index+0x1>
     c72:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <check_distance_index>
     c76:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <distance_checking+0x1>
		distance_checking = 0;
     c7a:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <distance_checking>
     c7e:	ff 91       	pop	r31
	}
}
     c80:	ef 91       	pop	r30
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	bf 91       	pop	r27
     c88:	af 91       	pop	r26
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	7f 91       	pop	r23
     c90:	6f 91       	pop	r22
     c92:	5f 91       	pop	r21
     c94:	4f 91       	pop	r20
     c96:	3f 91       	pop	r19
     c98:	2f 91       	pop	r18
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	df 90       	pop	r13
     ca0:	cf 90       	pop	r12
     ca2:	0f 90       	pop	r0
     ca4:	0b be       	out	0x3b, r0	; 59
     ca6:	0f 90       	pop	r0
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	0f 90       	pop	r0
     cac:	1f 90       	pop	r1
     cae:	18 95       	reti

00000cb0 <__vector_7>:
     cb0:	1f 92       	push	r1

// right
ISR(INT6_vect)
{
     cb2:	0f 92       	push	r0
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	0f 92       	push	r0
     cb8:	11 24       	eor	r1, r1
     cba:	0b b6       	in	r0, 0x3b	; 59
     cbc:	0f 92       	push	r0
     cbe:	cf 92       	push	r12
     cc0:	df 92       	push	r13
     cc2:	ef 92       	push	r14
     cc4:	ff 92       	push	r15
     cc6:	2f 93       	push	r18
     cc8:	3f 93       	push	r19
     cca:	4f 93       	push	r20
     ccc:	5f 93       	push	r21
     cce:	6f 93       	push	r22
     cd0:	7f 93       	push	r23
     cd2:	8f 93       	push	r24
     cd4:	9f 93       	push	r25
     cd6:	af 93       	push	r26
     cd8:	bf 93       	push	r27
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	ef 93       	push	r30
     ce0:	ff 93       	push	r31
	static int state = 1;
	if(state)
     ce2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <state.1770>
     ce6:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <state.1770+0x1>
     cea:	89 2b       	or	r24, r25
     cec:	51 f0       	breq	.+20     	; 0xd02 <__vector_7+0x52>
	{
		TCNT2 = 0;
     cee:	14 bc       	out	0x24, r1	; 36
		state = 0;
     cf0:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <state.1770+0x1>
     cf4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <state.1770>
		overflows = 0;
     cf8:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <overflows+0x1>
     cfc:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <overflows>
     d00:	61 c0       	rjmp	.+194    	; 0xdc4 <__vector_7+0x114>
	}
	else
	{
		tcnt_value = TCNT2;
     d02:	84 b5       	in	r24, 0x24	; 36
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <tcnt_value+0x1>
     d0a:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <tcnt_value>
		overflows_value = overflows;
     d0e:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <overflows>
     d12:	70 91 ec 01 	lds	r23, 0x01EC	; 0x8001ec <overflows+0x1>
     d16:	70 93 ea 01 	sts	0x01EA, r23	; 0x8001ea <overflows_value+0x1>
     d1a:	60 93 e9 01 	sts	0x01E9, r22	; 0x8001e9 <overflows_value>
		ultrasonic_dis = (tcnt_value + overflows_value * 256.0) * 128.0 / 16;
     d1e:	c0 91 ed 01 	lds	r28, 0x01ED	; 0x8001ed <tcnt_value>
     d22:	d0 91 ee 01 	lds	r29, 0x01EE	; 0x8001ee <tcnt_value+0x1>
     d26:	07 2e       	mov	r0, r23
     d28:	00 0c       	add	r0, r0
     d2a:	88 0b       	sbc	r24, r24
     d2c:	99 0b       	sbc	r25, r25
     d2e:	33 d1       	rcall	.+614    	; 0xf96 <__floatsisf>
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e8       	ldi	r20, 0x80	; 128
     d36:	53 e4       	ldi	r21, 0x43	; 67
     d38:	ba d1       	rcall	.+884    	; 0x10ae <__mulsf3>
     d3a:	6b 01       	movw	r12, r22
     d3c:	7c 01       	movw	r14, r24
     d3e:	be 01       	movw	r22, r28
     d40:	dd 0f       	add	r29, r29
     d42:	88 0b       	sbc	r24, r24
     d44:	99 0b       	sbc	r25, r25
     d46:	27 d1       	rcall	.+590    	; 0xf96 <__floatsisf>
     d48:	9b 01       	movw	r18, r22
     d4a:	ac 01       	movw	r20, r24
     d4c:	c7 01       	movw	r24, r14
     d4e:	b6 01       	movw	r22, r12
     d50:	8b d0       	rcall	.+278    	; 0xe68 <__addsf3>
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e0       	ldi	r20, 0x00	; 0
     d58:	53 e4       	ldi	r21, 0x43	; 67
     d5a:	a9 d1       	rcall	.+850    	; 0x10ae <__mulsf3>
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e8       	ldi	r20, 0x80	; 128
     d62:	5d e3       	ldi	r21, 0x3D	; 61
     d64:	a4 d1       	rcall	.+840    	; 0x10ae <__mulsf3>
     d66:	e4 d0       	rcall	.+456    	; 0xf30 <__fixsfsi>
     d68:	70 93 f0 01 	sts	0x01F0, r23	; 0x8001f0 <ultrasonic_dis+0x1>
     d6c:	60 93 ef 01 	sts	0x01EF, r22	; 0x8001ef <ultrasonic_dis>
		ultrasonic_dis /= 10;
     d70:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ultrasonic_dis>
     d74:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <ultrasonic_dis+0x1>
     d78:	6a e0       	ldi	r22, 0x0A	; 10
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	fb d1       	rcall	.+1014   	; 0x1174 <__divmodhi4>
     d7e:	70 93 f0 01 	sts	0x01F0, r23	; 0x8001f0 <ultrasonic_dis+0x1>
     d82:	60 93 ef 01 	sts	0x01EF, r22	; 0x8001ef <ultrasonic_dis>
     d86:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ultrasonic_dis>
		
		if(ultrasonic_dis <= MAX_LENGHT){
     d8a:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <ultrasonic_dis+0x1>
     d8e:	07 97       	sbiw	r24, 0x07	; 7
     d90:	3c f4       	brge	.+14     	; 0xda0 <__vector_7+0xf0>
     d92:	81 e0       	ldi	r24, 0x01	; 1
			obstacle_info[2] = 1;
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <obstacle_info+0x5>
     d9a:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <obstacle_info+0x4>
     d9e:	04 c0       	rjmp	.+8      	; 0xda8 <__vector_7+0xf8>
     da0:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <obstacle_info+0x5>
			}else{
			obstacle_info[2] = 0;
     da4:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <obstacle_info+0x4>
     da8:	81 e0       	ldi	r24, 0x01	; 1
		}
		
		state = 1;
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <state.1770+0x1>
     db0:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <state.1770>
     db4:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <check_distance_index+0x1>
		check_distance_index = 0;
     db8:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <check_distance_index>
     dbc:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <distance_checking+0x1>
		distance_checking = 0;
     dc0:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <distance_checking>
     dc4:	ff 91       	pop	r31
	}
}
     dc6:	ef 91       	pop	r30
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	df 90       	pop	r13
     de6:	cf 90       	pop	r12
     de8:	0f 90       	pop	r0
     dea:	0b be       	out	0x3b, r0	; 59
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	0f 90       	pop	r0
     df2:	1f 90       	pop	r1
     df4:	18 95       	reti

00000df6 <init_ultrasonic>:
     df6:	8a b3       	in	r24, 0x1a	; 26


void init_ultrasonic(void)
{
	// ddr
	TRIG_DDR |= 1 << TRIG_LEFT_PIN_NUM | 1 << TRIG_CENTER_PIN_NUM | 1 << TRIG_RIGHT_PIN_NUM;
     df8:	87 60       	ori	r24, 0x07	; 7
     dfa:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR &= ~(1 << ECHO_LEFT_PIN_NUM | 1 << ECHO_CENTER_PIN_NUM | 1 << ECHO_RIGHT_PIN_NUM);
     dfc:	82 b1       	in	r24, 0x02	; 2
     dfe:	8f 78       	andi	r24, 0x8F	; 143
     e00:	82 b9       	out	0x02, r24	; 2
	
	// interrupt 설정 (echo)
	EICRB |= 0 << ISC41 | 1 << ISC40 | 0 << ISC51 | 1 << ISC50 | 0 << ISC61 | 1 << ISC60;
     e02:	8a b7       	in	r24, 0x3a	; 58
     e04:	85 61       	ori	r24, 0x15	; 21
     e06:	8a bf       	out	0x3a, r24	; 58
	
	// timer 설정 (64분주)
	TCCR2 |= 1 << CS22 | 0 << CS21 | 1 << CS20;
     e08:	85 b5       	in	r24, 0x25	; 37
     e0a:	85 60       	ori	r24, 0x05	; 5
     e0c:	85 bd       	out	0x25, r24	; 37
	
	// local interrupt 마스크
	EIMSK |= 1 << INT4 | 1 << INT5 | 1 << INT6; // EXTERNAL interrupt 활성화
     e0e:	89 b7       	in	r24, 0x39	; 57
     e10:	80 67       	ori	r24, 0x70	; 112
     e12:	89 bf       	out	0x39, r24	; 57
	
	// timer overflow interrupt 마스크
	TIMSK |= 1 << TOIE2;
     e14:	87 b7       	in	r24, 0x37	; 55
     e16:	80 64       	ori	r24, 0x40	; 64
     e18:	87 bf       	out	0x37, r24	; 55
     e1a:	08 95       	ret

00000e1c <check_obstacle>:
}

void check_obstacle(void)
{

	if(!distance_checking)
     e1c:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <distance_checking>
     e20:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <distance_checking+0x1>
     e24:	89 2b       	or	r24, r25
     e26:	f1 f4       	brne	.+60     	; 0xe64 <check_obstacle+0x48>
	{
		printf("%d\n", ultrasonic_dis);
     e28:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ultrasonic_dis>
     e2c:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <ultrasonic_dis+0x1>
     e30:	9f 93       	push	r25
     e32:	8f 93       	push	r24
     e34:	83 ed       	ldi	r24, 0xD3	; 211
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	9f 93       	push	r25
     e3a:	8f 93       	push	r24
     e3c:	cb d1       	rcall	.+918    	; 0x11d4 <printf>
		printf("trigger\n");
     e3e:	87 ed       	ldi	r24, 0xD7	; 215
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	db d1       	rcall	.+950    	; 0x11fa <puts>
		triger_funcs[check_distance_index]();
     e44:	e0 91 f3 01 	lds	r30, 0x01F3	; 0x8001f3 <check_distance_index>
     e48:	f0 91 f4 01 	lds	r31, 0x01F4	; 0x8001f4 <check_distance_index+0x1>
     e4c:	ee 0f       	add	r30, r30
     e4e:	ff 1f       	adc	r31, r31
     e50:	e0 5b       	subi	r30, 0xB0	; 176
     e52:	fe 4f       	sbci	r31, 0xFE	; 254
     e54:	01 90       	ld	r0, Z+
     e56:	f0 81       	ld	r31, Z
     e58:	e0 2d       	mov	r30, r0
     e5a:	09 95       	icall
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	08 95       	ret

00000e66 <__subsf3>:
     e66:	50 58       	subi	r21, 0x80	; 128

00000e68 <__addsf3>:
     e68:	bb 27       	eor	r27, r27
     e6a:	aa 27       	eor	r26, r26
     e6c:	0e d0       	rcall	.+28     	; 0xe8a <__addsf3x>
     e6e:	e5 c0       	rjmp	.+458    	; 0x103a <__fp_round>
     e70:	d6 d0       	rcall	.+428    	; 0x101e <__fp_pscA>
     e72:	30 f0       	brcs	.+12     	; 0xe80 <__addsf3+0x18>
     e74:	db d0       	rcall	.+438    	; 0x102c <__fp_pscB>
     e76:	20 f0       	brcs	.+8      	; 0xe80 <__addsf3+0x18>
     e78:	31 f4       	brne	.+12     	; 0xe86 <__addsf3+0x1e>
     e7a:	9f 3f       	cpi	r25, 0xFF	; 255
     e7c:	11 f4       	brne	.+4      	; 0xe82 <__addsf3+0x1a>
     e7e:	1e f4       	brtc	.+6      	; 0xe86 <__addsf3+0x1e>
     e80:	cb c0       	rjmp	.+406    	; 0x1018 <__fp_nan>
     e82:	0e f4       	brtc	.+2      	; 0xe86 <__addsf3+0x1e>
     e84:	e0 95       	com	r30
     e86:	e7 fb       	bst	r30, 7
     e88:	c1 c0       	rjmp	.+386    	; 0x100c <__fp_inf>

00000e8a <__addsf3x>:
     e8a:	e9 2f       	mov	r30, r25
     e8c:	e7 d0       	rcall	.+462    	; 0x105c <__fp_split3>
     e8e:	80 f3       	brcs	.-32     	; 0xe70 <__addsf3+0x8>
     e90:	ba 17       	cp	r27, r26
     e92:	62 07       	cpc	r22, r18
     e94:	73 07       	cpc	r23, r19
     e96:	84 07       	cpc	r24, r20
     e98:	95 07       	cpc	r25, r21
     e9a:	18 f0       	brcs	.+6      	; 0xea2 <__addsf3x+0x18>
     e9c:	71 f4       	brne	.+28     	; 0xeba <__addsf3x+0x30>
     e9e:	9e f5       	brtc	.+102    	; 0xf06 <__addsf3x+0x7c>
     ea0:	ff c0       	rjmp	.+510    	; 0x10a0 <__fp_zero>
     ea2:	0e f4       	brtc	.+2      	; 0xea6 <__addsf3x+0x1c>
     ea4:	e0 95       	com	r30
     ea6:	0b 2e       	mov	r0, r27
     ea8:	ba 2f       	mov	r27, r26
     eaa:	a0 2d       	mov	r26, r0
     eac:	0b 01       	movw	r0, r22
     eae:	b9 01       	movw	r22, r18
     eb0:	90 01       	movw	r18, r0
     eb2:	0c 01       	movw	r0, r24
     eb4:	ca 01       	movw	r24, r20
     eb6:	a0 01       	movw	r20, r0
     eb8:	11 24       	eor	r1, r1
     eba:	ff 27       	eor	r31, r31
     ebc:	59 1b       	sub	r21, r25
     ebe:	99 f0       	breq	.+38     	; 0xee6 <__addsf3x+0x5c>
     ec0:	59 3f       	cpi	r21, 0xF9	; 249
     ec2:	50 f4       	brcc	.+20     	; 0xed8 <__addsf3x+0x4e>
     ec4:	50 3e       	cpi	r21, 0xE0	; 224
     ec6:	68 f1       	brcs	.+90     	; 0xf22 <__addsf3x+0x98>
     ec8:	1a 16       	cp	r1, r26
     eca:	f0 40       	sbci	r31, 0x00	; 0
     ecc:	a2 2f       	mov	r26, r18
     ece:	23 2f       	mov	r18, r19
     ed0:	34 2f       	mov	r19, r20
     ed2:	44 27       	eor	r20, r20
     ed4:	58 5f       	subi	r21, 0xF8	; 248
     ed6:	f3 cf       	rjmp	.-26     	; 0xebe <__addsf3x+0x34>
     ed8:	46 95       	lsr	r20
     eda:	37 95       	ror	r19
     edc:	27 95       	ror	r18
     ede:	a7 95       	ror	r26
     ee0:	f0 40       	sbci	r31, 0x00	; 0
     ee2:	53 95       	inc	r21
     ee4:	c9 f7       	brne	.-14     	; 0xed8 <__addsf3x+0x4e>
     ee6:	7e f4       	brtc	.+30     	; 0xf06 <__addsf3x+0x7c>
     ee8:	1f 16       	cp	r1, r31
     eea:	ba 0b       	sbc	r27, r26
     eec:	62 0b       	sbc	r22, r18
     eee:	73 0b       	sbc	r23, r19
     ef0:	84 0b       	sbc	r24, r20
     ef2:	ba f0       	brmi	.+46     	; 0xf22 <__addsf3x+0x98>
     ef4:	91 50       	subi	r25, 0x01	; 1
     ef6:	a1 f0       	breq	.+40     	; 0xf20 <__addsf3x+0x96>
     ef8:	ff 0f       	add	r31, r31
     efa:	bb 1f       	adc	r27, r27
     efc:	66 1f       	adc	r22, r22
     efe:	77 1f       	adc	r23, r23
     f00:	88 1f       	adc	r24, r24
     f02:	c2 f7       	brpl	.-16     	; 0xef4 <__addsf3x+0x6a>
     f04:	0e c0       	rjmp	.+28     	; 0xf22 <__addsf3x+0x98>
     f06:	ba 0f       	add	r27, r26
     f08:	62 1f       	adc	r22, r18
     f0a:	73 1f       	adc	r23, r19
     f0c:	84 1f       	adc	r24, r20
     f0e:	48 f4       	brcc	.+18     	; 0xf22 <__addsf3x+0x98>
     f10:	87 95       	ror	r24
     f12:	77 95       	ror	r23
     f14:	67 95       	ror	r22
     f16:	b7 95       	ror	r27
     f18:	f7 95       	ror	r31
     f1a:	9e 3f       	cpi	r25, 0xFE	; 254
     f1c:	08 f0       	brcs	.+2      	; 0xf20 <__addsf3x+0x96>
     f1e:	b3 cf       	rjmp	.-154    	; 0xe86 <__addsf3+0x1e>
     f20:	93 95       	inc	r25
     f22:	88 0f       	add	r24, r24
     f24:	08 f0       	brcs	.+2      	; 0xf28 <__addsf3x+0x9e>
     f26:	99 27       	eor	r25, r25
     f28:	ee 0f       	add	r30, r30
     f2a:	97 95       	ror	r25
     f2c:	87 95       	ror	r24
     f2e:	08 95       	ret

00000f30 <__fixsfsi>:
     f30:	04 d0       	rcall	.+8      	; 0xf3a <__fixunssfsi>
     f32:	68 94       	set
     f34:	b1 11       	cpse	r27, r1
     f36:	b5 c0       	rjmp	.+362    	; 0x10a2 <__fp_szero>
     f38:	08 95       	ret

00000f3a <__fixunssfsi>:
     f3a:	98 d0       	rcall	.+304    	; 0x106c <__fp_splitA>
     f3c:	88 f0       	brcs	.+34     	; 0xf60 <__fixunssfsi+0x26>
     f3e:	9f 57       	subi	r25, 0x7F	; 127
     f40:	90 f0       	brcs	.+36     	; 0xf66 <__fixunssfsi+0x2c>
     f42:	b9 2f       	mov	r27, r25
     f44:	99 27       	eor	r25, r25
     f46:	b7 51       	subi	r27, 0x17	; 23
     f48:	a0 f0       	brcs	.+40     	; 0xf72 <__fixunssfsi+0x38>
     f4a:	d1 f0       	breq	.+52     	; 0xf80 <__fixunssfsi+0x46>
     f4c:	66 0f       	add	r22, r22
     f4e:	77 1f       	adc	r23, r23
     f50:	88 1f       	adc	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	1a f0       	brmi	.+6      	; 0xf5c <__fixunssfsi+0x22>
     f56:	ba 95       	dec	r27
     f58:	c9 f7       	brne	.-14     	; 0xf4c <__fixunssfsi+0x12>
     f5a:	12 c0       	rjmp	.+36     	; 0xf80 <__fixunssfsi+0x46>
     f5c:	b1 30       	cpi	r27, 0x01	; 1
     f5e:	81 f0       	breq	.+32     	; 0xf80 <__fixunssfsi+0x46>
     f60:	9f d0       	rcall	.+318    	; 0x10a0 <__fp_zero>
     f62:	b1 e0       	ldi	r27, 0x01	; 1
     f64:	08 95       	ret
     f66:	9c c0       	rjmp	.+312    	; 0x10a0 <__fp_zero>
     f68:	67 2f       	mov	r22, r23
     f6a:	78 2f       	mov	r23, r24
     f6c:	88 27       	eor	r24, r24
     f6e:	b8 5f       	subi	r27, 0xF8	; 248
     f70:	39 f0       	breq	.+14     	; 0xf80 <__fixunssfsi+0x46>
     f72:	b9 3f       	cpi	r27, 0xF9	; 249
     f74:	cc f3       	brlt	.-14     	; 0xf68 <__fixunssfsi+0x2e>
     f76:	86 95       	lsr	r24
     f78:	77 95       	ror	r23
     f7a:	67 95       	ror	r22
     f7c:	b3 95       	inc	r27
     f7e:	d9 f7       	brne	.-10     	; 0xf76 <__fixunssfsi+0x3c>
     f80:	3e f4       	brtc	.+14     	; 0xf90 <__fixunssfsi+0x56>
     f82:	90 95       	com	r25
     f84:	80 95       	com	r24
     f86:	70 95       	com	r23
     f88:	61 95       	neg	r22
     f8a:	7f 4f       	sbci	r23, 0xFF	; 255
     f8c:	8f 4f       	sbci	r24, 0xFF	; 255
     f8e:	9f 4f       	sbci	r25, 0xFF	; 255
     f90:	08 95       	ret

00000f92 <__floatunsisf>:
     f92:	e8 94       	clt
     f94:	09 c0       	rjmp	.+18     	; 0xfa8 <__floatsisf+0x12>

00000f96 <__floatsisf>:
     f96:	97 fb       	bst	r25, 7
     f98:	3e f4       	brtc	.+14     	; 0xfa8 <__floatsisf+0x12>
     f9a:	90 95       	com	r25
     f9c:	80 95       	com	r24
     f9e:	70 95       	com	r23
     fa0:	61 95       	neg	r22
     fa2:	7f 4f       	sbci	r23, 0xFF	; 255
     fa4:	8f 4f       	sbci	r24, 0xFF	; 255
     fa6:	9f 4f       	sbci	r25, 0xFF	; 255
     fa8:	99 23       	and	r25, r25
     faa:	a9 f0       	breq	.+42     	; 0xfd6 <__floatsisf+0x40>
     fac:	f9 2f       	mov	r31, r25
     fae:	96 e9       	ldi	r25, 0x96	; 150
     fb0:	bb 27       	eor	r27, r27
     fb2:	93 95       	inc	r25
     fb4:	f6 95       	lsr	r31
     fb6:	87 95       	ror	r24
     fb8:	77 95       	ror	r23
     fba:	67 95       	ror	r22
     fbc:	b7 95       	ror	r27
     fbe:	f1 11       	cpse	r31, r1
     fc0:	f8 cf       	rjmp	.-16     	; 0xfb2 <__floatsisf+0x1c>
     fc2:	fa f4       	brpl	.+62     	; 0x1002 <__floatsisf+0x6c>
     fc4:	bb 0f       	add	r27, r27
     fc6:	11 f4       	brne	.+4      	; 0xfcc <__floatsisf+0x36>
     fc8:	60 ff       	sbrs	r22, 0
     fca:	1b c0       	rjmp	.+54     	; 0x1002 <__floatsisf+0x6c>
     fcc:	6f 5f       	subi	r22, 0xFF	; 255
     fce:	7f 4f       	sbci	r23, 0xFF	; 255
     fd0:	8f 4f       	sbci	r24, 0xFF	; 255
     fd2:	9f 4f       	sbci	r25, 0xFF	; 255
     fd4:	16 c0       	rjmp	.+44     	; 0x1002 <__floatsisf+0x6c>
     fd6:	88 23       	and	r24, r24
     fd8:	11 f0       	breq	.+4      	; 0xfde <__floatsisf+0x48>
     fda:	96 e9       	ldi	r25, 0x96	; 150
     fdc:	11 c0       	rjmp	.+34     	; 0x1000 <__floatsisf+0x6a>
     fde:	77 23       	and	r23, r23
     fe0:	21 f0       	breq	.+8      	; 0xfea <__floatsisf+0x54>
     fe2:	9e e8       	ldi	r25, 0x8E	; 142
     fe4:	87 2f       	mov	r24, r23
     fe6:	76 2f       	mov	r23, r22
     fe8:	05 c0       	rjmp	.+10     	; 0xff4 <__floatsisf+0x5e>
     fea:	66 23       	and	r22, r22
     fec:	71 f0       	breq	.+28     	; 0x100a <__floatsisf+0x74>
     fee:	96 e8       	ldi	r25, 0x86	; 134
     ff0:	86 2f       	mov	r24, r22
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	2a f0       	brmi	.+10     	; 0x1002 <__floatsisf+0x6c>
     ff8:	9a 95       	dec	r25
     ffa:	66 0f       	add	r22, r22
     ffc:	77 1f       	adc	r23, r23
     ffe:	88 1f       	adc	r24, r24
    1000:	da f7       	brpl	.-10     	; 0xff8 <__floatsisf+0x62>
    1002:	88 0f       	add	r24, r24
    1004:	96 95       	lsr	r25
    1006:	87 95       	ror	r24
    1008:	97 f9       	bld	r25, 7
    100a:	08 95       	ret

0000100c <__fp_inf>:
    100c:	97 f9       	bld	r25, 7
    100e:	9f 67       	ori	r25, 0x7F	; 127
    1010:	80 e8       	ldi	r24, 0x80	; 128
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	08 95       	ret

00001018 <__fp_nan>:
    1018:	9f ef       	ldi	r25, 0xFF	; 255
    101a:	80 ec       	ldi	r24, 0xC0	; 192
    101c:	08 95       	ret

0000101e <__fp_pscA>:
    101e:	00 24       	eor	r0, r0
    1020:	0a 94       	dec	r0
    1022:	16 16       	cp	r1, r22
    1024:	17 06       	cpc	r1, r23
    1026:	18 06       	cpc	r1, r24
    1028:	09 06       	cpc	r0, r25
    102a:	08 95       	ret

0000102c <__fp_pscB>:
    102c:	00 24       	eor	r0, r0
    102e:	0a 94       	dec	r0
    1030:	12 16       	cp	r1, r18
    1032:	13 06       	cpc	r1, r19
    1034:	14 06       	cpc	r1, r20
    1036:	05 06       	cpc	r0, r21
    1038:	08 95       	ret

0000103a <__fp_round>:
    103a:	09 2e       	mov	r0, r25
    103c:	03 94       	inc	r0
    103e:	00 0c       	add	r0, r0
    1040:	11 f4       	brne	.+4      	; 0x1046 <__fp_round+0xc>
    1042:	88 23       	and	r24, r24
    1044:	52 f0       	brmi	.+20     	; 0x105a <__fp_round+0x20>
    1046:	bb 0f       	add	r27, r27
    1048:	40 f4       	brcc	.+16     	; 0x105a <__fp_round+0x20>
    104a:	bf 2b       	or	r27, r31
    104c:	11 f4       	brne	.+4      	; 0x1052 <__fp_round+0x18>
    104e:	60 ff       	sbrs	r22, 0
    1050:	04 c0       	rjmp	.+8      	; 0x105a <__fp_round+0x20>
    1052:	6f 5f       	subi	r22, 0xFF	; 255
    1054:	7f 4f       	sbci	r23, 0xFF	; 255
    1056:	8f 4f       	sbci	r24, 0xFF	; 255
    1058:	9f 4f       	sbci	r25, 0xFF	; 255
    105a:	08 95       	ret

0000105c <__fp_split3>:
    105c:	57 fd       	sbrc	r21, 7
    105e:	90 58       	subi	r25, 0x80	; 128
    1060:	44 0f       	add	r20, r20
    1062:	55 1f       	adc	r21, r21
    1064:	59 f0       	breq	.+22     	; 0x107c <__fp_splitA+0x10>
    1066:	5f 3f       	cpi	r21, 0xFF	; 255
    1068:	71 f0       	breq	.+28     	; 0x1086 <__fp_splitA+0x1a>
    106a:	47 95       	ror	r20

0000106c <__fp_splitA>:
    106c:	88 0f       	add	r24, r24
    106e:	97 fb       	bst	r25, 7
    1070:	99 1f       	adc	r25, r25
    1072:	61 f0       	breq	.+24     	; 0x108c <__fp_splitA+0x20>
    1074:	9f 3f       	cpi	r25, 0xFF	; 255
    1076:	79 f0       	breq	.+30     	; 0x1096 <__fp_splitA+0x2a>
    1078:	87 95       	ror	r24
    107a:	08 95       	ret
    107c:	12 16       	cp	r1, r18
    107e:	13 06       	cpc	r1, r19
    1080:	14 06       	cpc	r1, r20
    1082:	55 1f       	adc	r21, r21
    1084:	f2 cf       	rjmp	.-28     	; 0x106a <__fp_split3+0xe>
    1086:	46 95       	lsr	r20
    1088:	f1 df       	rcall	.-30     	; 0x106c <__fp_splitA>
    108a:	08 c0       	rjmp	.+16     	; 0x109c <__fp_splitA+0x30>
    108c:	16 16       	cp	r1, r22
    108e:	17 06       	cpc	r1, r23
    1090:	18 06       	cpc	r1, r24
    1092:	99 1f       	adc	r25, r25
    1094:	f1 cf       	rjmp	.-30     	; 0x1078 <__fp_splitA+0xc>
    1096:	86 95       	lsr	r24
    1098:	71 05       	cpc	r23, r1
    109a:	61 05       	cpc	r22, r1
    109c:	08 94       	sec
    109e:	08 95       	ret

000010a0 <__fp_zero>:
    10a0:	e8 94       	clt

000010a2 <__fp_szero>:
    10a2:	bb 27       	eor	r27, r27
    10a4:	66 27       	eor	r22, r22
    10a6:	77 27       	eor	r23, r23
    10a8:	cb 01       	movw	r24, r22
    10aa:	97 f9       	bld	r25, 7
    10ac:	08 95       	ret

000010ae <__mulsf3>:
    10ae:	0b d0       	rcall	.+22     	; 0x10c6 <__mulsf3x>
    10b0:	c4 cf       	rjmp	.-120    	; 0x103a <__fp_round>
    10b2:	b5 df       	rcall	.-150    	; 0x101e <__fp_pscA>
    10b4:	28 f0       	brcs	.+10     	; 0x10c0 <__mulsf3+0x12>
    10b6:	ba df       	rcall	.-140    	; 0x102c <__fp_pscB>
    10b8:	18 f0       	brcs	.+6      	; 0x10c0 <__mulsf3+0x12>
    10ba:	95 23       	and	r25, r21
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <__mulsf3+0x12>
    10be:	a6 cf       	rjmp	.-180    	; 0x100c <__fp_inf>
    10c0:	ab cf       	rjmp	.-170    	; 0x1018 <__fp_nan>
    10c2:	11 24       	eor	r1, r1
    10c4:	ee cf       	rjmp	.-36     	; 0x10a2 <__fp_szero>

000010c6 <__mulsf3x>:
    10c6:	ca df       	rcall	.-108    	; 0x105c <__fp_split3>
    10c8:	a0 f3       	brcs	.-24     	; 0x10b2 <__mulsf3+0x4>

000010ca <__mulsf3_pse>:
    10ca:	95 9f       	mul	r25, r21
    10cc:	d1 f3       	breq	.-12     	; 0x10c2 <__mulsf3+0x14>
    10ce:	95 0f       	add	r25, r21
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	55 1f       	adc	r21, r21
    10d4:	62 9f       	mul	r22, r18
    10d6:	f0 01       	movw	r30, r0
    10d8:	72 9f       	mul	r23, r18
    10da:	bb 27       	eor	r27, r27
    10dc:	f0 0d       	add	r31, r0
    10de:	b1 1d       	adc	r27, r1
    10e0:	63 9f       	mul	r22, r19
    10e2:	aa 27       	eor	r26, r26
    10e4:	f0 0d       	add	r31, r0
    10e6:	b1 1d       	adc	r27, r1
    10e8:	aa 1f       	adc	r26, r26
    10ea:	64 9f       	mul	r22, r20
    10ec:	66 27       	eor	r22, r22
    10ee:	b0 0d       	add	r27, r0
    10f0:	a1 1d       	adc	r26, r1
    10f2:	66 1f       	adc	r22, r22
    10f4:	82 9f       	mul	r24, r18
    10f6:	22 27       	eor	r18, r18
    10f8:	b0 0d       	add	r27, r0
    10fa:	a1 1d       	adc	r26, r1
    10fc:	62 1f       	adc	r22, r18
    10fe:	73 9f       	mul	r23, r19
    1100:	b0 0d       	add	r27, r0
    1102:	a1 1d       	adc	r26, r1
    1104:	62 1f       	adc	r22, r18
    1106:	83 9f       	mul	r24, r19
    1108:	a0 0d       	add	r26, r0
    110a:	61 1d       	adc	r22, r1
    110c:	22 1f       	adc	r18, r18
    110e:	74 9f       	mul	r23, r20
    1110:	33 27       	eor	r19, r19
    1112:	a0 0d       	add	r26, r0
    1114:	61 1d       	adc	r22, r1
    1116:	23 1f       	adc	r18, r19
    1118:	84 9f       	mul	r24, r20
    111a:	60 0d       	add	r22, r0
    111c:	21 1d       	adc	r18, r1
    111e:	82 2f       	mov	r24, r18
    1120:	76 2f       	mov	r23, r22
    1122:	6a 2f       	mov	r22, r26
    1124:	11 24       	eor	r1, r1
    1126:	9f 57       	subi	r25, 0x7F	; 127
    1128:	50 40       	sbci	r21, 0x00	; 0
    112a:	8a f0       	brmi	.+34     	; 0x114e <__stack+0x4f>
    112c:	e1 f0       	breq	.+56     	; 0x1166 <__stack+0x67>
    112e:	88 23       	and	r24, r24
    1130:	4a f0       	brmi	.+18     	; 0x1144 <__stack+0x45>
    1132:	ee 0f       	add	r30, r30
    1134:	ff 1f       	adc	r31, r31
    1136:	bb 1f       	adc	r27, r27
    1138:	66 1f       	adc	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	88 1f       	adc	r24, r24
    113e:	91 50       	subi	r25, 0x01	; 1
    1140:	50 40       	sbci	r21, 0x00	; 0
    1142:	a9 f7       	brne	.-22     	; 0x112e <__stack+0x2f>
    1144:	9e 3f       	cpi	r25, 0xFE	; 254
    1146:	51 05       	cpc	r21, r1
    1148:	70 f0       	brcs	.+28     	; 0x1166 <__stack+0x67>
    114a:	60 cf       	rjmp	.-320    	; 0x100c <__fp_inf>
    114c:	aa cf       	rjmp	.-172    	; 0x10a2 <__fp_szero>
    114e:	5f 3f       	cpi	r21, 0xFF	; 255
    1150:	ec f3       	brlt	.-6      	; 0x114c <__stack+0x4d>
    1152:	98 3e       	cpi	r25, 0xE8	; 232
    1154:	dc f3       	brlt	.-10     	; 0x114c <__stack+0x4d>
    1156:	86 95       	lsr	r24
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	b7 95       	ror	r27
    115e:	f7 95       	ror	r31
    1160:	e7 95       	ror	r30
    1162:	9f 5f       	subi	r25, 0xFF	; 255
    1164:	c1 f7       	brne	.-16     	; 0x1156 <__stack+0x57>
    1166:	fe 2b       	or	r31, r30
    1168:	88 0f       	add	r24, r24
    116a:	91 1d       	adc	r25, r1
    116c:	96 95       	lsr	r25
    116e:	87 95       	ror	r24
    1170:	97 f9       	bld	r25, 7
    1172:	08 95       	ret

00001174 <__divmodhi4>:
    1174:	97 fb       	bst	r25, 7
    1176:	07 2e       	mov	r0, r23
    1178:	16 f4       	brtc	.+4      	; 0x117e <__divmodhi4+0xa>
    117a:	00 94       	com	r0
    117c:	06 d0       	rcall	.+12     	; 0x118a <__divmodhi4_neg1>
    117e:	77 fd       	sbrc	r23, 7
    1180:	08 d0       	rcall	.+16     	; 0x1192 <__divmodhi4_neg2>
    1182:	14 d0       	rcall	.+40     	; 0x11ac <__udivmodhi4>
    1184:	07 fc       	sbrc	r0, 7
    1186:	05 d0       	rcall	.+10     	; 0x1192 <__divmodhi4_neg2>
    1188:	3e f4       	brtc	.+14     	; 0x1198 <__divmodhi4_exit>

0000118a <__divmodhi4_neg1>:
    118a:	90 95       	com	r25
    118c:	81 95       	neg	r24
    118e:	9f 4f       	sbci	r25, 0xFF	; 255
    1190:	08 95       	ret

00001192 <__divmodhi4_neg2>:
    1192:	70 95       	com	r23
    1194:	61 95       	neg	r22
    1196:	7f 4f       	sbci	r23, 0xFF	; 255

00001198 <__divmodhi4_exit>:
    1198:	08 95       	ret

0000119a <__tablejump2__>:
    119a:	ee 0f       	add	r30, r30
    119c:	ff 1f       	adc	r31, r31
    119e:	00 24       	eor	r0, r0
    11a0:	00 1c       	adc	r0, r0
    11a2:	0b be       	out	0x3b, r0	; 59
    11a4:	07 90       	elpm	r0, Z+
    11a6:	f6 91       	elpm	r31, Z
    11a8:	e0 2d       	mov	r30, r0
    11aa:	09 94       	ijmp

000011ac <__udivmodhi4>:
    11ac:	aa 1b       	sub	r26, r26
    11ae:	bb 1b       	sub	r27, r27
    11b0:	51 e1       	ldi	r21, 0x11	; 17
    11b2:	07 c0       	rjmp	.+14     	; 0x11c2 <__udivmodhi4_ep>

000011b4 <__udivmodhi4_loop>:
    11b4:	aa 1f       	adc	r26, r26
    11b6:	bb 1f       	adc	r27, r27
    11b8:	a6 17       	cp	r26, r22
    11ba:	b7 07       	cpc	r27, r23
    11bc:	10 f0       	brcs	.+4      	; 0x11c2 <__udivmodhi4_ep>
    11be:	a6 1b       	sub	r26, r22
    11c0:	b7 0b       	sbc	r27, r23

000011c2 <__udivmodhi4_ep>:
    11c2:	88 1f       	adc	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	5a 95       	dec	r21
    11c8:	a9 f7       	brne	.-22     	; 0x11b4 <__udivmodhi4_loop>
    11ca:	80 95       	com	r24
    11cc:	90 95       	com	r25
    11ce:	bc 01       	movw	r22, r24
    11d0:	cd 01       	movw	r24, r26
    11d2:	08 95       	ret

000011d4 <printf>:
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	ae 01       	movw	r20, r28
    11de:	4b 5f       	subi	r20, 0xFB	; 251
    11e0:	5f 4f       	sbci	r21, 0xFF	; 255
    11e2:	fa 01       	movw	r30, r20
    11e4:	61 91       	ld	r22, Z+
    11e6:	71 91       	ld	r23, Z+
    11e8:	af 01       	movw	r20, r30
    11ea:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <__iob+0x2>
    11ee:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <__iob+0x3>
    11f2:	33 d0       	rcall	.+102    	; 0x125a <vfprintf>
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	08 95       	ret

000011fa <puts>:
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <__iob+0x2>
    1206:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <__iob+0x3>
    120a:	23 81       	ldd	r18, Z+3	; 0x03
    120c:	21 ff       	sbrs	r18, 1
    120e:	1b c0       	rjmp	.+54     	; 0x1246 <puts+0x4c>
    1210:	8c 01       	movw	r16, r24
    1212:	d0 e0       	ldi	r29, 0x00	; 0
    1214:	c0 e0       	ldi	r28, 0x00	; 0
    1216:	f8 01       	movw	r30, r16
    1218:	81 91       	ld	r24, Z+
    121a:	8f 01       	movw	r16, r30
    121c:	60 91 91 03 	lds	r22, 0x0391	; 0x800391 <__iob+0x2>
    1220:	70 91 92 03 	lds	r23, 0x0392	; 0x800392 <__iob+0x3>
    1224:	db 01       	movw	r26, r22
    1226:	18 96       	adiw	r26, 0x08	; 8
    1228:	ed 91       	ld	r30, X+
    122a:	fc 91       	ld	r31, X
    122c:	19 97       	sbiw	r26, 0x09	; 9
    122e:	88 23       	and	r24, r24
    1230:	31 f0       	breq	.+12     	; 0x123e <puts+0x44>
    1232:	09 95       	icall
    1234:	89 2b       	or	r24, r25
    1236:	79 f3       	breq	.-34     	; 0x1216 <puts+0x1c>
    1238:	df ef       	ldi	r29, 0xFF	; 255
    123a:	cf ef       	ldi	r28, 0xFF	; 255
    123c:	ec cf       	rjmp	.-40     	; 0x1216 <puts+0x1c>
    123e:	8a e0       	ldi	r24, 0x0A	; 10
    1240:	09 95       	icall
    1242:	89 2b       	or	r24, r25
    1244:	19 f0       	breq	.+6      	; 0x124c <puts+0x52>
    1246:	8f ef       	ldi	r24, 0xFF	; 255
    1248:	9f ef       	ldi	r25, 0xFF	; 255
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <puts+0x56>
    124c:	8d 2f       	mov	r24, r29
    124e:	9c 2f       	mov	r25, r28
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	08 95       	ret

0000125a <vfprintf>:
    125a:	2f 92       	push	r2
    125c:	3f 92       	push	r3
    125e:	4f 92       	push	r4
    1260:	5f 92       	push	r5
    1262:	6f 92       	push	r6
    1264:	7f 92       	push	r7
    1266:	8f 92       	push	r8
    1268:	9f 92       	push	r9
    126a:	af 92       	push	r10
    126c:	bf 92       	push	r11
    126e:	cf 92       	push	r12
    1270:	df 92       	push	r13
    1272:	ef 92       	push	r14
    1274:	ff 92       	push	r15
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	2b 97       	sbiw	r28, 0x0b	; 11
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	6c 01       	movw	r12, r24
    1290:	7b 01       	movw	r14, r22
    1292:	8a 01       	movw	r16, r20
    1294:	fc 01       	movw	r30, r24
    1296:	17 82       	std	Z+7, r1	; 0x07
    1298:	16 82       	std	Z+6, r1	; 0x06
    129a:	83 81       	ldd	r24, Z+3	; 0x03
    129c:	81 ff       	sbrs	r24, 1
    129e:	bf c1       	rjmp	.+894    	; 0x161e <vfprintf+0x3c4>
    12a0:	ce 01       	movw	r24, r28
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	3c 01       	movw	r6, r24
    12a6:	f6 01       	movw	r30, r12
    12a8:	93 81       	ldd	r25, Z+3	; 0x03
    12aa:	f7 01       	movw	r30, r14
    12ac:	93 fd       	sbrc	r25, 3
    12ae:	85 91       	lpm	r24, Z+
    12b0:	93 ff       	sbrs	r25, 3
    12b2:	81 91       	ld	r24, Z+
    12b4:	7f 01       	movw	r14, r30
    12b6:	88 23       	and	r24, r24
    12b8:	09 f4       	brne	.+2      	; 0x12bc <vfprintf+0x62>
    12ba:	ad c1       	rjmp	.+858    	; 0x1616 <vfprintf+0x3bc>
    12bc:	85 32       	cpi	r24, 0x25	; 37
    12be:	39 f4       	brne	.+14     	; 0x12ce <vfprintf+0x74>
    12c0:	93 fd       	sbrc	r25, 3
    12c2:	85 91       	lpm	r24, Z+
    12c4:	93 ff       	sbrs	r25, 3
    12c6:	81 91       	ld	r24, Z+
    12c8:	7f 01       	movw	r14, r30
    12ca:	85 32       	cpi	r24, 0x25	; 37
    12cc:	21 f4       	brne	.+8      	; 0x12d6 <vfprintf+0x7c>
    12ce:	b6 01       	movw	r22, r12
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	d6 d1       	rcall	.+940    	; 0x1680 <fputc>
    12d4:	e8 cf       	rjmp	.-48     	; 0x12a6 <vfprintf+0x4c>
    12d6:	91 2c       	mov	r9, r1
    12d8:	21 2c       	mov	r2, r1
    12da:	31 2c       	mov	r3, r1
    12dc:	ff e1       	ldi	r31, 0x1F	; 31
    12de:	f3 15       	cp	r31, r3
    12e0:	d8 f0       	brcs	.+54     	; 0x1318 <vfprintf+0xbe>
    12e2:	8b 32       	cpi	r24, 0x2B	; 43
    12e4:	79 f0       	breq	.+30     	; 0x1304 <vfprintf+0xaa>
    12e6:	38 f4       	brcc	.+14     	; 0x12f6 <vfprintf+0x9c>
    12e8:	80 32       	cpi	r24, 0x20	; 32
    12ea:	79 f0       	breq	.+30     	; 0x130a <vfprintf+0xb0>
    12ec:	83 32       	cpi	r24, 0x23	; 35
    12ee:	a1 f4       	brne	.+40     	; 0x1318 <vfprintf+0xbe>
    12f0:	23 2d       	mov	r18, r3
    12f2:	20 61       	ori	r18, 0x10	; 16
    12f4:	1d c0       	rjmp	.+58     	; 0x1330 <vfprintf+0xd6>
    12f6:	8d 32       	cpi	r24, 0x2D	; 45
    12f8:	61 f0       	breq	.+24     	; 0x1312 <vfprintf+0xb8>
    12fa:	80 33       	cpi	r24, 0x30	; 48
    12fc:	69 f4       	brne	.+26     	; 0x1318 <vfprintf+0xbe>
    12fe:	23 2d       	mov	r18, r3
    1300:	21 60       	ori	r18, 0x01	; 1
    1302:	16 c0       	rjmp	.+44     	; 0x1330 <vfprintf+0xd6>
    1304:	83 2d       	mov	r24, r3
    1306:	82 60       	ori	r24, 0x02	; 2
    1308:	38 2e       	mov	r3, r24
    130a:	e3 2d       	mov	r30, r3
    130c:	e4 60       	ori	r30, 0x04	; 4
    130e:	3e 2e       	mov	r3, r30
    1310:	2a c0       	rjmp	.+84     	; 0x1366 <vfprintf+0x10c>
    1312:	f3 2d       	mov	r31, r3
    1314:	f8 60       	ori	r31, 0x08	; 8
    1316:	1d c0       	rjmp	.+58     	; 0x1352 <vfprintf+0xf8>
    1318:	37 fc       	sbrc	r3, 7
    131a:	2d c0       	rjmp	.+90     	; 0x1376 <vfprintf+0x11c>
    131c:	20 ed       	ldi	r18, 0xD0	; 208
    131e:	28 0f       	add	r18, r24
    1320:	2a 30       	cpi	r18, 0x0A	; 10
    1322:	40 f0       	brcs	.+16     	; 0x1334 <vfprintf+0xda>
    1324:	8e 32       	cpi	r24, 0x2E	; 46
    1326:	b9 f4       	brne	.+46     	; 0x1356 <vfprintf+0xfc>
    1328:	36 fc       	sbrc	r3, 6
    132a:	75 c1       	rjmp	.+746    	; 0x1616 <vfprintf+0x3bc>
    132c:	23 2d       	mov	r18, r3
    132e:	20 64       	ori	r18, 0x40	; 64
    1330:	32 2e       	mov	r3, r18
    1332:	19 c0       	rjmp	.+50     	; 0x1366 <vfprintf+0x10c>
    1334:	36 fe       	sbrs	r3, 6
    1336:	06 c0       	rjmp	.+12     	; 0x1344 <vfprintf+0xea>
    1338:	8a e0       	ldi	r24, 0x0A	; 10
    133a:	98 9e       	mul	r9, r24
    133c:	20 0d       	add	r18, r0
    133e:	11 24       	eor	r1, r1
    1340:	92 2e       	mov	r9, r18
    1342:	11 c0       	rjmp	.+34     	; 0x1366 <vfprintf+0x10c>
    1344:	ea e0       	ldi	r30, 0x0A	; 10
    1346:	2e 9e       	mul	r2, r30
    1348:	20 0d       	add	r18, r0
    134a:	11 24       	eor	r1, r1
    134c:	22 2e       	mov	r2, r18
    134e:	f3 2d       	mov	r31, r3
    1350:	f0 62       	ori	r31, 0x20	; 32
    1352:	3f 2e       	mov	r3, r31
    1354:	08 c0       	rjmp	.+16     	; 0x1366 <vfprintf+0x10c>
    1356:	8c 36       	cpi	r24, 0x6C	; 108
    1358:	21 f4       	brne	.+8      	; 0x1362 <vfprintf+0x108>
    135a:	83 2d       	mov	r24, r3
    135c:	80 68       	ori	r24, 0x80	; 128
    135e:	38 2e       	mov	r3, r24
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <vfprintf+0x10c>
    1362:	88 36       	cpi	r24, 0x68	; 104
    1364:	41 f4       	brne	.+16     	; 0x1376 <vfprintf+0x11c>
    1366:	f7 01       	movw	r30, r14
    1368:	93 fd       	sbrc	r25, 3
    136a:	85 91       	lpm	r24, Z+
    136c:	93 ff       	sbrs	r25, 3
    136e:	81 91       	ld	r24, Z+
    1370:	7f 01       	movw	r14, r30
    1372:	81 11       	cpse	r24, r1
    1374:	b3 cf       	rjmp	.-154    	; 0x12dc <vfprintf+0x82>
    1376:	98 2f       	mov	r25, r24
    1378:	9f 7d       	andi	r25, 0xDF	; 223
    137a:	95 54       	subi	r25, 0x45	; 69
    137c:	93 30       	cpi	r25, 0x03	; 3
    137e:	28 f4       	brcc	.+10     	; 0x138a <vfprintf+0x130>
    1380:	0c 5f       	subi	r16, 0xFC	; 252
    1382:	1f 4f       	sbci	r17, 0xFF	; 255
    1384:	9f e3       	ldi	r25, 0x3F	; 63
    1386:	99 83       	std	Y+1, r25	; 0x01
    1388:	0d c0       	rjmp	.+26     	; 0x13a4 <vfprintf+0x14a>
    138a:	83 36       	cpi	r24, 0x63	; 99
    138c:	31 f0       	breq	.+12     	; 0x139a <vfprintf+0x140>
    138e:	83 37       	cpi	r24, 0x73	; 115
    1390:	71 f0       	breq	.+28     	; 0x13ae <vfprintf+0x154>
    1392:	83 35       	cpi	r24, 0x53	; 83
    1394:	09 f0       	breq	.+2      	; 0x1398 <vfprintf+0x13e>
    1396:	55 c0       	rjmp	.+170    	; 0x1442 <vfprintf+0x1e8>
    1398:	20 c0       	rjmp	.+64     	; 0x13da <vfprintf+0x180>
    139a:	f8 01       	movw	r30, r16
    139c:	80 81       	ld	r24, Z
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	0e 5f       	subi	r16, 0xFE	; 254
    13a2:	1f 4f       	sbci	r17, 0xFF	; 255
    13a4:	88 24       	eor	r8, r8
    13a6:	83 94       	inc	r8
    13a8:	91 2c       	mov	r9, r1
    13aa:	53 01       	movw	r10, r6
    13ac:	12 c0       	rjmp	.+36     	; 0x13d2 <vfprintf+0x178>
    13ae:	28 01       	movw	r4, r16
    13b0:	f2 e0       	ldi	r31, 0x02	; 2
    13b2:	4f 0e       	add	r4, r31
    13b4:	51 1c       	adc	r5, r1
    13b6:	f8 01       	movw	r30, r16
    13b8:	a0 80       	ld	r10, Z
    13ba:	b1 80       	ldd	r11, Z+1	; 0x01
    13bc:	36 fe       	sbrs	r3, 6
    13be:	03 c0       	rjmp	.+6      	; 0x13c6 <vfprintf+0x16c>
    13c0:	69 2d       	mov	r22, r9
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <vfprintf+0x170>
    13c6:	6f ef       	ldi	r22, 0xFF	; 255
    13c8:	7f ef       	ldi	r23, 0xFF	; 255
    13ca:	c5 01       	movw	r24, r10
    13cc:	4e d1       	rcall	.+668    	; 0x166a <strnlen>
    13ce:	4c 01       	movw	r8, r24
    13d0:	82 01       	movw	r16, r4
    13d2:	f3 2d       	mov	r31, r3
    13d4:	ff 77       	andi	r31, 0x7F	; 127
    13d6:	3f 2e       	mov	r3, r31
    13d8:	15 c0       	rjmp	.+42     	; 0x1404 <vfprintf+0x1aa>
    13da:	28 01       	movw	r4, r16
    13dc:	22 e0       	ldi	r18, 0x02	; 2
    13de:	42 0e       	add	r4, r18
    13e0:	51 1c       	adc	r5, r1
    13e2:	f8 01       	movw	r30, r16
    13e4:	a0 80       	ld	r10, Z
    13e6:	b1 80       	ldd	r11, Z+1	; 0x01
    13e8:	36 fe       	sbrs	r3, 6
    13ea:	03 c0       	rjmp	.+6      	; 0x13f2 <vfprintf+0x198>
    13ec:	69 2d       	mov	r22, r9
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <vfprintf+0x19c>
    13f2:	6f ef       	ldi	r22, 0xFF	; 255
    13f4:	7f ef       	ldi	r23, 0xFF	; 255
    13f6:	c5 01       	movw	r24, r10
    13f8:	2d d1       	rcall	.+602    	; 0x1654 <strnlen_P>
    13fa:	4c 01       	movw	r8, r24
    13fc:	f3 2d       	mov	r31, r3
    13fe:	f0 68       	ori	r31, 0x80	; 128
    1400:	3f 2e       	mov	r3, r31
    1402:	82 01       	movw	r16, r4
    1404:	33 fc       	sbrc	r3, 3
    1406:	19 c0       	rjmp	.+50     	; 0x143a <vfprintf+0x1e0>
    1408:	82 2d       	mov	r24, r2
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	88 16       	cp	r8, r24
    140e:	99 06       	cpc	r9, r25
    1410:	a0 f4       	brcc	.+40     	; 0x143a <vfprintf+0x1e0>
    1412:	b6 01       	movw	r22, r12
    1414:	80 e2       	ldi	r24, 0x20	; 32
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	33 d1       	rcall	.+614    	; 0x1680 <fputc>
    141a:	2a 94       	dec	r2
    141c:	f5 cf       	rjmp	.-22     	; 0x1408 <vfprintf+0x1ae>
    141e:	f5 01       	movw	r30, r10
    1420:	37 fc       	sbrc	r3, 7
    1422:	85 91       	lpm	r24, Z+
    1424:	37 fe       	sbrs	r3, 7
    1426:	81 91       	ld	r24, Z+
    1428:	5f 01       	movw	r10, r30
    142a:	b6 01       	movw	r22, r12
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	28 d1       	rcall	.+592    	; 0x1680 <fputc>
    1430:	21 10       	cpse	r2, r1
    1432:	2a 94       	dec	r2
    1434:	21 e0       	ldi	r18, 0x01	; 1
    1436:	82 1a       	sub	r8, r18
    1438:	91 08       	sbc	r9, r1
    143a:	81 14       	cp	r8, r1
    143c:	91 04       	cpc	r9, r1
    143e:	79 f7       	brne	.-34     	; 0x141e <vfprintf+0x1c4>
    1440:	e1 c0       	rjmp	.+450    	; 0x1604 <vfprintf+0x3aa>
    1442:	84 36       	cpi	r24, 0x64	; 100
    1444:	11 f0       	breq	.+4      	; 0x144a <vfprintf+0x1f0>
    1446:	89 36       	cpi	r24, 0x69	; 105
    1448:	39 f5       	brne	.+78     	; 0x1498 <vfprintf+0x23e>
    144a:	f8 01       	movw	r30, r16
    144c:	37 fe       	sbrs	r3, 7
    144e:	07 c0       	rjmp	.+14     	; 0x145e <vfprintf+0x204>
    1450:	60 81       	ld	r22, Z
    1452:	71 81       	ldd	r23, Z+1	; 0x01
    1454:	82 81       	ldd	r24, Z+2	; 0x02
    1456:	93 81       	ldd	r25, Z+3	; 0x03
    1458:	0c 5f       	subi	r16, 0xFC	; 252
    145a:	1f 4f       	sbci	r17, 0xFF	; 255
    145c:	08 c0       	rjmp	.+16     	; 0x146e <vfprintf+0x214>
    145e:	60 81       	ld	r22, Z
    1460:	71 81       	ldd	r23, Z+1	; 0x01
    1462:	07 2e       	mov	r0, r23
    1464:	00 0c       	add	r0, r0
    1466:	88 0b       	sbc	r24, r24
    1468:	99 0b       	sbc	r25, r25
    146a:	0e 5f       	subi	r16, 0xFE	; 254
    146c:	1f 4f       	sbci	r17, 0xFF	; 255
    146e:	f3 2d       	mov	r31, r3
    1470:	ff 76       	andi	r31, 0x6F	; 111
    1472:	3f 2e       	mov	r3, r31
    1474:	97 ff       	sbrs	r25, 7
    1476:	09 c0       	rjmp	.+18     	; 0x148a <vfprintf+0x230>
    1478:	90 95       	com	r25
    147a:	80 95       	com	r24
    147c:	70 95       	com	r23
    147e:	61 95       	neg	r22
    1480:	7f 4f       	sbci	r23, 0xFF	; 255
    1482:	8f 4f       	sbci	r24, 0xFF	; 255
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	f0 68       	ori	r31, 0x80	; 128
    1488:	3f 2e       	mov	r3, r31
    148a:	2a e0       	ldi	r18, 0x0A	; 10
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	a3 01       	movw	r20, r6
    1490:	33 d1       	rcall	.+614    	; 0x16f8 <__ultoa_invert>
    1492:	88 2e       	mov	r8, r24
    1494:	86 18       	sub	r8, r6
    1496:	44 c0       	rjmp	.+136    	; 0x1520 <vfprintf+0x2c6>
    1498:	85 37       	cpi	r24, 0x75	; 117
    149a:	31 f4       	brne	.+12     	; 0x14a8 <vfprintf+0x24e>
    149c:	23 2d       	mov	r18, r3
    149e:	2f 7e       	andi	r18, 0xEF	; 239
    14a0:	b2 2e       	mov	r11, r18
    14a2:	2a e0       	ldi	r18, 0x0A	; 10
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	25 c0       	rjmp	.+74     	; 0x14f2 <vfprintf+0x298>
    14a8:	93 2d       	mov	r25, r3
    14aa:	99 7f       	andi	r25, 0xF9	; 249
    14ac:	b9 2e       	mov	r11, r25
    14ae:	8f 36       	cpi	r24, 0x6F	; 111
    14b0:	c1 f0       	breq	.+48     	; 0x14e2 <vfprintf+0x288>
    14b2:	18 f4       	brcc	.+6      	; 0x14ba <vfprintf+0x260>
    14b4:	88 35       	cpi	r24, 0x58	; 88
    14b6:	79 f0       	breq	.+30     	; 0x14d6 <vfprintf+0x27c>
    14b8:	ae c0       	rjmp	.+348    	; 0x1616 <vfprintf+0x3bc>
    14ba:	80 37       	cpi	r24, 0x70	; 112
    14bc:	19 f0       	breq	.+6      	; 0x14c4 <vfprintf+0x26a>
    14be:	88 37       	cpi	r24, 0x78	; 120
    14c0:	21 f0       	breq	.+8      	; 0x14ca <vfprintf+0x270>
    14c2:	a9 c0       	rjmp	.+338    	; 0x1616 <vfprintf+0x3bc>
    14c4:	e9 2f       	mov	r30, r25
    14c6:	e0 61       	ori	r30, 0x10	; 16
    14c8:	be 2e       	mov	r11, r30
    14ca:	b4 fe       	sbrs	r11, 4
    14cc:	0d c0       	rjmp	.+26     	; 0x14e8 <vfprintf+0x28e>
    14ce:	fb 2d       	mov	r31, r11
    14d0:	f4 60       	ori	r31, 0x04	; 4
    14d2:	bf 2e       	mov	r11, r31
    14d4:	09 c0       	rjmp	.+18     	; 0x14e8 <vfprintf+0x28e>
    14d6:	34 fe       	sbrs	r3, 4
    14d8:	0a c0       	rjmp	.+20     	; 0x14ee <vfprintf+0x294>
    14da:	29 2f       	mov	r18, r25
    14dc:	26 60       	ori	r18, 0x06	; 6
    14de:	b2 2e       	mov	r11, r18
    14e0:	06 c0       	rjmp	.+12     	; 0x14ee <vfprintf+0x294>
    14e2:	28 e0       	ldi	r18, 0x08	; 8
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	05 c0       	rjmp	.+10     	; 0x14f2 <vfprintf+0x298>
    14e8:	20 e1       	ldi	r18, 0x10	; 16
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <vfprintf+0x298>
    14ee:	20 e1       	ldi	r18, 0x10	; 16
    14f0:	32 e0       	ldi	r19, 0x02	; 2
    14f2:	f8 01       	movw	r30, r16
    14f4:	b7 fe       	sbrs	r11, 7
    14f6:	07 c0       	rjmp	.+14     	; 0x1506 <vfprintf+0x2ac>
    14f8:	60 81       	ld	r22, Z
    14fa:	71 81       	ldd	r23, Z+1	; 0x01
    14fc:	82 81       	ldd	r24, Z+2	; 0x02
    14fe:	93 81       	ldd	r25, Z+3	; 0x03
    1500:	0c 5f       	subi	r16, 0xFC	; 252
    1502:	1f 4f       	sbci	r17, 0xFF	; 255
    1504:	06 c0       	rjmp	.+12     	; 0x1512 <vfprintf+0x2b8>
    1506:	60 81       	ld	r22, Z
    1508:	71 81       	ldd	r23, Z+1	; 0x01
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 5f       	subi	r16, 0xFE	; 254
    1510:	1f 4f       	sbci	r17, 0xFF	; 255
    1512:	a3 01       	movw	r20, r6
    1514:	f1 d0       	rcall	.+482    	; 0x16f8 <__ultoa_invert>
    1516:	88 2e       	mov	r8, r24
    1518:	86 18       	sub	r8, r6
    151a:	fb 2d       	mov	r31, r11
    151c:	ff 77       	andi	r31, 0x7F	; 127
    151e:	3f 2e       	mov	r3, r31
    1520:	36 fe       	sbrs	r3, 6
    1522:	0d c0       	rjmp	.+26     	; 0x153e <vfprintf+0x2e4>
    1524:	23 2d       	mov	r18, r3
    1526:	2e 7f       	andi	r18, 0xFE	; 254
    1528:	a2 2e       	mov	r10, r18
    152a:	89 14       	cp	r8, r9
    152c:	58 f4       	brcc	.+22     	; 0x1544 <vfprintf+0x2ea>
    152e:	34 fe       	sbrs	r3, 4
    1530:	0b c0       	rjmp	.+22     	; 0x1548 <vfprintf+0x2ee>
    1532:	32 fc       	sbrc	r3, 2
    1534:	09 c0       	rjmp	.+18     	; 0x1548 <vfprintf+0x2ee>
    1536:	83 2d       	mov	r24, r3
    1538:	8e 7e       	andi	r24, 0xEE	; 238
    153a:	a8 2e       	mov	r10, r24
    153c:	05 c0       	rjmp	.+10     	; 0x1548 <vfprintf+0x2ee>
    153e:	b8 2c       	mov	r11, r8
    1540:	a3 2c       	mov	r10, r3
    1542:	03 c0       	rjmp	.+6      	; 0x154a <vfprintf+0x2f0>
    1544:	b8 2c       	mov	r11, r8
    1546:	01 c0       	rjmp	.+2      	; 0x154a <vfprintf+0x2f0>
    1548:	b9 2c       	mov	r11, r9
    154a:	a4 fe       	sbrs	r10, 4
    154c:	0f c0       	rjmp	.+30     	; 0x156c <vfprintf+0x312>
    154e:	fe 01       	movw	r30, r28
    1550:	e8 0d       	add	r30, r8
    1552:	f1 1d       	adc	r31, r1
    1554:	80 81       	ld	r24, Z
    1556:	80 33       	cpi	r24, 0x30	; 48
    1558:	21 f4       	brne	.+8      	; 0x1562 <vfprintf+0x308>
    155a:	9a 2d       	mov	r25, r10
    155c:	99 7e       	andi	r25, 0xE9	; 233
    155e:	a9 2e       	mov	r10, r25
    1560:	09 c0       	rjmp	.+18     	; 0x1574 <vfprintf+0x31a>
    1562:	a2 fe       	sbrs	r10, 2
    1564:	06 c0       	rjmp	.+12     	; 0x1572 <vfprintf+0x318>
    1566:	b3 94       	inc	r11
    1568:	b3 94       	inc	r11
    156a:	04 c0       	rjmp	.+8      	; 0x1574 <vfprintf+0x31a>
    156c:	8a 2d       	mov	r24, r10
    156e:	86 78       	andi	r24, 0x86	; 134
    1570:	09 f0       	breq	.+2      	; 0x1574 <vfprintf+0x31a>
    1572:	b3 94       	inc	r11
    1574:	a3 fc       	sbrc	r10, 3
    1576:	10 c0       	rjmp	.+32     	; 0x1598 <vfprintf+0x33e>
    1578:	a0 fe       	sbrs	r10, 0
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <vfprintf+0x32e>
    157c:	b2 14       	cp	r11, r2
    157e:	80 f4       	brcc	.+32     	; 0x15a0 <vfprintf+0x346>
    1580:	28 0c       	add	r2, r8
    1582:	92 2c       	mov	r9, r2
    1584:	9b 18       	sub	r9, r11
    1586:	0d c0       	rjmp	.+26     	; 0x15a2 <vfprintf+0x348>
    1588:	b2 14       	cp	r11, r2
    158a:	58 f4       	brcc	.+22     	; 0x15a2 <vfprintf+0x348>
    158c:	b6 01       	movw	r22, r12
    158e:	80 e2       	ldi	r24, 0x20	; 32
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	76 d0       	rcall	.+236    	; 0x1680 <fputc>
    1594:	b3 94       	inc	r11
    1596:	f8 cf       	rjmp	.-16     	; 0x1588 <vfprintf+0x32e>
    1598:	b2 14       	cp	r11, r2
    159a:	18 f4       	brcc	.+6      	; 0x15a2 <vfprintf+0x348>
    159c:	2b 18       	sub	r2, r11
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <vfprintf+0x34a>
    15a0:	98 2c       	mov	r9, r8
    15a2:	21 2c       	mov	r2, r1
    15a4:	a4 fe       	sbrs	r10, 4
    15a6:	0f c0       	rjmp	.+30     	; 0x15c6 <vfprintf+0x36c>
    15a8:	b6 01       	movw	r22, r12
    15aa:	80 e3       	ldi	r24, 0x30	; 48
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	68 d0       	rcall	.+208    	; 0x1680 <fputc>
    15b0:	a2 fe       	sbrs	r10, 2
    15b2:	16 c0       	rjmp	.+44     	; 0x15e0 <vfprintf+0x386>
    15b4:	a1 fc       	sbrc	r10, 1
    15b6:	03 c0       	rjmp	.+6      	; 0x15be <vfprintf+0x364>
    15b8:	88 e7       	ldi	r24, 0x78	; 120
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <vfprintf+0x368>
    15be:	88 e5       	ldi	r24, 0x58	; 88
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	b6 01       	movw	r22, r12
    15c4:	0c c0       	rjmp	.+24     	; 0x15de <vfprintf+0x384>
    15c6:	8a 2d       	mov	r24, r10
    15c8:	86 78       	andi	r24, 0x86	; 134
    15ca:	51 f0       	breq	.+20     	; 0x15e0 <vfprintf+0x386>
    15cc:	a1 fe       	sbrs	r10, 1
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <vfprintf+0x37a>
    15d0:	8b e2       	ldi	r24, 0x2B	; 43
    15d2:	01 c0       	rjmp	.+2      	; 0x15d6 <vfprintf+0x37c>
    15d4:	80 e2       	ldi	r24, 0x20	; 32
    15d6:	a7 fc       	sbrc	r10, 7
    15d8:	8d e2       	ldi	r24, 0x2D	; 45
    15da:	b6 01       	movw	r22, r12
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	50 d0       	rcall	.+160    	; 0x1680 <fputc>
    15e0:	89 14       	cp	r8, r9
    15e2:	30 f4       	brcc	.+12     	; 0x15f0 <vfprintf+0x396>
    15e4:	b6 01       	movw	r22, r12
    15e6:	80 e3       	ldi	r24, 0x30	; 48
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	4a d0       	rcall	.+148    	; 0x1680 <fputc>
    15ec:	9a 94       	dec	r9
    15ee:	f8 cf       	rjmp	.-16     	; 0x15e0 <vfprintf+0x386>
    15f0:	8a 94       	dec	r8
    15f2:	f3 01       	movw	r30, r6
    15f4:	e8 0d       	add	r30, r8
    15f6:	f1 1d       	adc	r31, r1
    15f8:	80 81       	ld	r24, Z
    15fa:	b6 01       	movw	r22, r12
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	40 d0       	rcall	.+128    	; 0x1680 <fputc>
    1600:	81 10       	cpse	r8, r1
    1602:	f6 cf       	rjmp	.-20     	; 0x15f0 <vfprintf+0x396>
    1604:	22 20       	and	r2, r2
    1606:	09 f4       	brne	.+2      	; 0x160a <vfprintf+0x3b0>
    1608:	4e ce       	rjmp	.-868    	; 0x12a6 <vfprintf+0x4c>
    160a:	b6 01       	movw	r22, r12
    160c:	80 e2       	ldi	r24, 0x20	; 32
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	37 d0       	rcall	.+110    	; 0x1680 <fputc>
    1612:	2a 94       	dec	r2
    1614:	f7 cf       	rjmp	.-18     	; 0x1604 <vfprintf+0x3aa>
    1616:	f6 01       	movw	r30, r12
    1618:	86 81       	ldd	r24, Z+6	; 0x06
    161a:	97 81       	ldd	r25, Z+7	; 0x07
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <vfprintf+0x3c8>
    161e:	8f ef       	ldi	r24, 0xFF	; 255
    1620:	9f ef       	ldi	r25, 0xFF	; 255
    1622:	2b 96       	adiw	r28, 0x0b	; 11
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    163e:	bf 90       	pop	r11
    1640:	af 90       	pop	r10
    1642:	9f 90       	pop	r9
    1644:	8f 90       	pop	r8
    1646:	7f 90       	pop	r7
    1648:	6f 90       	pop	r6
    164a:	5f 90       	pop	r5
    164c:	4f 90       	pop	r4
    164e:	3f 90       	pop	r3
    1650:	2f 90       	pop	r2
    1652:	08 95       	ret

00001654 <strnlen_P>:
    1654:	fc 01       	movw	r30, r24
    1656:	05 90       	lpm	r0, Z+
    1658:	61 50       	subi	r22, 0x01	; 1
    165a:	70 40       	sbci	r23, 0x00	; 0
    165c:	01 10       	cpse	r0, r1
    165e:	d8 f7       	brcc	.-10     	; 0x1656 <strnlen_P+0x2>
    1660:	80 95       	com	r24
    1662:	90 95       	com	r25
    1664:	8e 0f       	add	r24, r30
    1666:	9f 1f       	adc	r25, r31
    1668:	08 95       	ret

0000166a <strnlen>:
    166a:	fc 01       	movw	r30, r24
    166c:	61 50       	subi	r22, 0x01	; 1
    166e:	70 40       	sbci	r23, 0x00	; 0
    1670:	01 90       	ld	r0, Z+
    1672:	01 10       	cpse	r0, r1
    1674:	d8 f7       	brcc	.-10     	; 0x166c <strnlen+0x2>
    1676:	80 95       	com	r24
    1678:	90 95       	com	r25
    167a:	8e 0f       	add	r24, r30
    167c:	9f 1f       	adc	r25, r31
    167e:	08 95       	ret

00001680 <fputc>:
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	fb 01       	movw	r30, r22
    168a:	23 81       	ldd	r18, Z+3	; 0x03
    168c:	21 fd       	sbrc	r18, 1
    168e:	03 c0       	rjmp	.+6      	; 0x1696 <fputc+0x16>
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    1692:	9f ef       	ldi	r25, 0xFF	; 255
    1694:	2c c0       	rjmp	.+88     	; 0x16ee <fputc+0x6e>
    1696:	22 ff       	sbrs	r18, 2
    1698:	16 c0       	rjmp	.+44     	; 0x16c6 <fputc+0x46>
    169a:	46 81       	ldd	r20, Z+6	; 0x06
    169c:	57 81       	ldd	r21, Z+7	; 0x07
    169e:	24 81       	ldd	r18, Z+4	; 0x04
    16a0:	35 81       	ldd	r19, Z+5	; 0x05
    16a2:	42 17       	cp	r20, r18
    16a4:	53 07       	cpc	r21, r19
    16a6:	44 f4       	brge	.+16     	; 0x16b8 <fputc+0x38>
    16a8:	a0 81       	ld	r26, Z
    16aa:	b1 81       	ldd	r27, Z+1	; 0x01
    16ac:	9d 01       	movw	r18, r26
    16ae:	2f 5f       	subi	r18, 0xFF	; 255
    16b0:	3f 4f       	sbci	r19, 0xFF	; 255
    16b2:	31 83       	std	Z+1, r19	; 0x01
    16b4:	20 83       	st	Z, r18
    16b6:	8c 93       	st	X, r24
    16b8:	26 81       	ldd	r18, Z+6	; 0x06
    16ba:	37 81       	ldd	r19, Z+7	; 0x07
    16bc:	2f 5f       	subi	r18, 0xFF	; 255
    16be:	3f 4f       	sbci	r19, 0xFF	; 255
    16c0:	37 83       	std	Z+7, r19	; 0x07
    16c2:	26 83       	std	Z+6, r18	; 0x06
    16c4:	14 c0       	rjmp	.+40     	; 0x16ee <fputc+0x6e>
    16c6:	8b 01       	movw	r16, r22
    16c8:	ec 01       	movw	r28, r24
    16ca:	fb 01       	movw	r30, r22
    16cc:	00 84       	ldd	r0, Z+8	; 0x08
    16ce:	f1 85       	ldd	r31, Z+9	; 0x09
    16d0:	e0 2d       	mov	r30, r0
    16d2:	09 95       	icall
    16d4:	89 2b       	or	r24, r25
    16d6:	e1 f6       	brne	.-72     	; 0x1690 <fputc+0x10>
    16d8:	d8 01       	movw	r26, r16
    16da:	16 96       	adiw	r26, 0x06	; 6
    16dc:	8d 91       	ld	r24, X+
    16de:	9c 91       	ld	r25, X
    16e0:	17 97       	sbiw	r26, 0x07	; 7
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	17 96       	adiw	r26, 0x07	; 7
    16e6:	9c 93       	st	X, r25
    16e8:	8e 93       	st	-X, r24
    16ea:	16 97       	sbiw	r26, 0x06	; 6
    16ec:	ce 01       	movw	r24, r28
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	1f 91       	pop	r17
    16f4:	0f 91       	pop	r16
    16f6:	08 95       	ret

000016f8 <__ultoa_invert>:
    16f8:	fa 01       	movw	r30, r20
    16fa:	aa 27       	eor	r26, r26
    16fc:	28 30       	cpi	r18, 0x08	; 8
    16fe:	51 f1       	breq	.+84     	; 0x1754 <__ultoa_invert+0x5c>
    1700:	20 31       	cpi	r18, 0x10	; 16
    1702:	81 f1       	breq	.+96     	; 0x1764 <__ultoa_invert+0x6c>
    1704:	e8 94       	clt
    1706:	6f 93       	push	r22
    1708:	6e 7f       	andi	r22, 0xFE	; 254
    170a:	6e 5f       	subi	r22, 0xFE	; 254
    170c:	7f 4f       	sbci	r23, 0xFF	; 255
    170e:	8f 4f       	sbci	r24, 0xFF	; 255
    1710:	9f 4f       	sbci	r25, 0xFF	; 255
    1712:	af 4f       	sbci	r26, 0xFF	; 255
    1714:	b1 e0       	ldi	r27, 0x01	; 1
    1716:	3e d0       	rcall	.+124    	; 0x1794 <__ultoa_invert+0x9c>
    1718:	b4 e0       	ldi	r27, 0x04	; 4
    171a:	3c d0       	rcall	.+120    	; 0x1794 <__ultoa_invert+0x9c>
    171c:	67 0f       	add	r22, r23
    171e:	78 1f       	adc	r23, r24
    1720:	89 1f       	adc	r24, r25
    1722:	9a 1f       	adc	r25, r26
    1724:	a1 1d       	adc	r26, r1
    1726:	68 0f       	add	r22, r24
    1728:	79 1f       	adc	r23, r25
    172a:	8a 1f       	adc	r24, r26
    172c:	91 1d       	adc	r25, r1
    172e:	a1 1d       	adc	r26, r1
    1730:	6a 0f       	add	r22, r26
    1732:	71 1d       	adc	r23, r1
    1734:	81 1d       	adc	r24, r1
    1736:	91 1d       	adc	r25, r1
    1738:	a1 1d       	adc	r26, r1
    173a:	20 d0       	rcall	.+64     	; 0x177c <__ultoa_invert+0x84>
    173c:	09 f4       	brne	.+2      	; 0x1740 <__ultoa_invert+0x48>
    173e:	68 94       	set
    1740:	3f 91       	pop	r19
    1742:	2a e0       	ldi	r18, 0x0A	; 10
    1744:	26 9f       	mul	r18, r22
    1746:	11 24       	eor	r1, r1
    1748:	30 19       	sub	r19, r0
    174a:	30 5d       	subi	r19, 0xD0	; 208
    174c:	31 93       	st	Z+, r19
    174e:	de f6       	brtc	.-74     	; 0x1706 <__ultoa_invert+0xe>
    1750:	cf 01       	movw	r24, r30
    1752:	08 95       	ret
    1754:	46 2f       	mov	r20, r22
    1756:	47 70       	andi	r20, 0x07	; 7
    1758:	40 5d       	subi	r20, 0xD0	; 208
    175a:	41 93       	st	Z+, r20
    175c:	b3 e0       	ldi	r27, 0x03	; 3
    175e:	0f d0       	rcall	.+30     	; 0x177e <__ultoa_invert+0x86>
    1760:	c9 f7       	brne	.-14     	; 0x1754 <__ultoa_invert+0x5c>
    1762:	f6 cf       	rjmp	.-20     	; 0x1750 <__ultoa_invert+0x58>
    1764:	46 2f       	mov	r20, r22
    1766:	4f 70       	andi	r20, 0x0F	; 15
    1768:	40 5d       	subi	r20, 0xD0	; 208
    176a:	4a 33       	cpi	r20, 0x3A	; 58
    176c:	18 f0       	brcs	.+6      	; 0x1774 <__ultoa_invert+0x7c>
    176e:	49 5d       	subi	r20, 0xD9	; 217
    1770:	31 fd       	sbrc	r19, 1
    1772:	40 52       	subi	r20, 0x20	; 32
    1774:	41 93       	st	Z+, r20
    1776:	02 d0       	rcall	.+4      	; 0x177c <__ultoa_invert+0x84>
    1778:	a9 f7       	brne	.-22     	; 0x1764 <__ultoa_invert+0x6c>
    177a:	ea cf       	rjmp	.-44     	; 0x1750 <__ultoa_invert+0x58>
    177c:	b4 e0       	ldi	r27, 0x04	; 4
    177e:	a6 95       	lsr	r26
    1780:	97 95       	ror	r25
    1782:	87 95       	ror	r24
    1784:	77 95       	ror	r23
    1786:	67 95       	ror	r22
    1788:	ba 95       	dec	r27
    178a:	c9 f7       	brne	.-14     	; 0x177e <__ultoa_invert+0x86>
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	61 05       	cpc	r22, r1
    1790:	71 05       	cpc	r23, r1
    1792:	08 95       	ret
    1794:	9b 01       	movw	r18, r22
    1796:	ac 01       	movw	r20, r24
    1798:	0a 2e       	mov	r0, r26
    179a:	06 94       	lsr	r0
    179c:	57 95       	ror	r21
    179e:	47 95       	ror	r20
    17a0:	37 95       	ror	r19
    17a2:	27 95       	ror	r18
    17a4:	ba 95       	dec	r27
    17a6:	c9 f7       	brne	.-14     	; 0x179a <__ultoa_invert+0xa2>
    17a8:	62 0f       	add	r22, r18
    17aa:	73 1f       	adc	r23, r19
    17ac:	84 1f       	adc	r24, r20
    17ae:	95 1f       	adc	r25, r21
    17b0:	a0 1d       	adc	r26, r0
    17b2:	08 95       	ret

000017b4 <_exit>:
    17b4:	f8 94       	cli

000017b6 <__stop_program>:
    17b6:	ff cf       	rjmp	.-2      	; 0x17b6 <__stop_program>
