
AUTO_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  00000ef2  00000f86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b9  0080021e  0080021e  000010a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024c0  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012d1  00000000  00000000  0000385c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016a2  00000000  00000000  00004b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c0  00000000  00000000  000061d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ef  00000000  00000000  00006790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001139  00000000  00000000  0000717f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  000082b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
   2:	00 00       	nop
   4:	94 c0       	rjmp	.+296    	; 0x12e <__bad_interrupt>
   6:	00 00       	nop
   8:	92 c0       	rjmp	.+292    	; 0x12e <__bad_interrupt>
   a:	00 00       	nop
   c:	90 c0       	rjmp	.+288    	; 0x12e <__bad_interrupt>
   e:	00 00       	nop
  10:	8e c0       	rjmp	.+284    	; 0x12e <__bad_interrupt>
  12:	00 00       	nop
  14:	3d c6       	rjmp	.+3194   	; 0xc90 <__vector_5>
  16:	00 00       	nop
  18:	7f c6       	rjmp	.+3326   	; 0xd18 <__vector_6>
  1a:	00 00       	nop
  1c:	c1 c6       	rjmp	.+3458   	; 0xda0 <__vector_7>
  1e:	00 00       	nop
  20:	86 c0       	rjmp	.+268    	; 0x12e <__bad_interrupt>
  22:	00 00       	nop
  24:	84 c0       	rjmp	.+264    	; 0x12e <__bad_interrupt>
  26:	00 00       	nop
  28:	1c c6       	rjmp	.+3128   	; 0xc62 <__vector_10>
  2a:	00 00       	nop
  2c:	80 c0       	rjmp	.+256    	; 0x12e <__bad_interrupt>
  2e:	00 00       	nop
  30:	7e c0       	rjmp	.+252    	; 0x12e <__bad_interrupt>
  32:	00 00       	nop
  34:	7c c0       	rjmp	.+248    	; 0x12e <__bad_interrupt>
  36:	00 00       	nop
  38:	7a c0       	rjmp	.+244    	; 0x12e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	78 c0       	rjmp	.+240    	; 0x12e <__bad_interrupt>
  3e:	00 00       	nop
  40:	95 c3       	rjmp	.+1834   	; 0x76c <__vector_16>
  42:	00 00       	nop
  44:	74 c0       	rjmp	.+232    	; 0x12e <__bad_interrupt>
  46:	00 00       	nop
  48:	1e c5       	rjmp	.+2620   	; 0xa86 <__vector_18>
  4a:	00 00       	nop
  4c:	70 c0       	rjmp	.+224    	; 0x12e <__bad_interrupt>
  4e:	00 00       	nop
  50:	6e c0       	rjmp	.+220    	; 0x12e <__bad_interrupt>
  52:	00 00       	nop
  54:	6c c0       	rjmp	.+216    	; 0x12e <__bad_interrupt>
  56:	00 00       	nop
  58:	6a c0       	rjmp	.+212    	; 0x12e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	68 c0       	rjmp	.+208    	; 0x12e <__bad_interrupt>
  5e:	00 00       	nop
  60:	66 c0       	rjmp	.+204    	; 0x12e <__bad_interrupt>
  62:	00 00       	nop
  64:	64 c0       	rjmp	.+200    	; 0x12e <__bad_interrupt>
  66:	00 00       	nop
  68:	62 c0       	rjmp	.+196    	; 0x12e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	60 c0       	rjmp	.+192    	; 0x12e <__bad_interrupt>
  6e:	00 00       	nop
  70:	5e c0       	rjmp	.+188    	; 0x12e <__bad_interrupt>
  72:	00 00       	nop
  74:	5c c0       	rjmp	.+184    	; 0x12e <__bad_interrupt>
  76:	00 00       	nop
  78:	98 c5       	rjmp	.+2864   	; 0xbaa <__vector_30>
  7a:	00 00       	nop
  7c:	58 c0       	rjmp	.+176    	; 0x12e <__bad_interrupt>
  7e:	00 00       	nop
  80:	56 c0       	rjmp	.+172    	; 0x12e <__bad_interrupt>
  82:	00 00       	nop
  84:	54 c0       	rjmp	.+168    	; 0x12e <__bad_interrupt>
  86:	00 00       	nop
  88:	52 c0       	rjmp	.+164    	; 0x12e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	0f 02       	muls	r16, r31
  8e:	48 02       	muls	r20, r24
  90:	37 02       	muls	r19, r23
  92:	48 02       	muls	r20, r24
  94:	0a 02       	muls	r16, r26
  96:	48 02       	muls	r20, r24
  98:	48 02       	muls	r20, r24
  9a:	48 02       	muls	r20, r24
  9c:	48 02       	muls	r20, r24
  9e:	48 02       	muls	r20, r24
  a0:	16 02       	muls	r17, r22
  a2:	48 02       	muls	r20, r24
  a4:	48 02       	muls	r20, r24
  a6:	48 02       	muls	r20, r24
  a8:	48 02       	muls	r20, r24
  aa:	48 02       	muls	r20, r24
  ac:	1d 02       	muls	r17, r29
  ae:	48 02       	muls	r20, r24
  b0:	48 02       	muls	r20, r24
  b2:	24 02       	muls	r18, r20
  b4:	48 02       	muls	r20, r24
  b6:	48 02       	muls	r20, r24
  b8:	48 02       	muls	r20, r24
  ba:	48 02       	muls	r20, r24
  bc:	48 02       	muls	r20, r24
  be:	48 02       	muls	r20, r24
  c0:	48 02       	muls	r20, r24
  c2:	48 02       	muls	r20, r24
  c4:	48 02       	muls	r20, r24
  c6:	48 02       	muls	r20, r24
  c8:	48 02       	muls	r20, r24
  ca:	48 02       	muls	r20, r24
  cc:	0f 02       	muls	r16, r31
  ce:	48 02       	muls	r20, r24
  d0:	37 02       	muls	r19, r23
  d2:	48 02       	muls	r20, r24
  d4:	0a 02       	muls	r16, r26
  d6:	48 02       	muls	r20, r24
  d8:	48 02       	muls	r20, r24
  da:	48 02       	muls	r20, r24
  dc:	48 02       	muls	r20, r24
  de:	48 02       	muls	r20, r24
  e0:	16 02       	muls	r17, r22
  e2:	48 02       	muls	r20, r24
  e4:	48 02       	muls	r20, r24
  e6:	48 02       	muls	r20, r24
  e8:	48 02       	muls	r20, r24
  ea:	48 02       	muls	r20, r24
  ec:	1d 02       	muls	r17, r29
  ee:	48 02       	muls	r20, r24
  f0:	48 02       	muls	r20, r24
  f2:	24 02       	muls	r18, r20

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	d0 e1       	ldi	r29, 0x10	; 16
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_copy_data>:
 100:	12 e0       	ldi	r17, 0x02	; 2
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b1 e0       	ldi	r27, 0x01	; 1
 106:	e2 ef       	ldi	r30, 0xF2	; 242
 108:	fe e0       	ldi	r31, 0x0E	; 14
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	ae 31       	cpi	r26, 0x1E	; 30
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	23 e0       	ldi	r18, 0x03	; 3
 11c:	ae e1       	ldi	r26, 0x1E	; 30
 11e:	b2 e0       	ldi	r27, 0x02	; 2
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a7 3d       	cpi	r26, 0xD7	; 215
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	11 d4       	rcall	.+2082   	; 0x94e <main>
 12c:	e0 c6       	rjmp	.+3520   	; 0xeee <_exit>

0000012e <__bad_interrupt>:
 12e:	68 cf       	rjmp	.-304    	; 0x0 <__vectors>

00000130 <init_button>:
 

                                                
void init_button(void)
{
	BUTTON_DDR &= ~( 1 << BUTTON0PIN);
 130:	d3 98       	cbi	0x1a, 3	; 26
 132:	08 95       	ret

00000134 <get_button>:
	static unsigned char button_status[BUTTON_NUMER] =
	{BUTTON_RELEASE};
	// 	지역 변수에 static을 쓰면 전역 변수처럼 함수를 빠져 나갔다 다시 들어 와도 값을 유지 한다.  
	int currtn_state;
	
	currtn_state = BUTTON_PIN & (1 << button_pin);   // 버튼을 읽는다. 
 134:	49 b3       	in	r20, 0x19	; 25
	if (currtn_state && button_status[button_num] == BUTTON_RELEASE)  // 버튼이 처음 눌려진 noise high 
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <get_button+0xc>
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <get_button+0x8>
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	24 23       	and	r18, r20
 148:	35 23       	and	r19, r21
 14a:	23 2b       	or	r18, r19
 14c:	b9 f0       	breq	.+46     	; 0x17c <get_button+0x48>
 14e:	fc 01       	movw	r30, r24
 150:	e2 5e       	subi	r30, 0xE2	; 226
 152:	fd 4f       	sbci	r31, 0xFD	; 253
 154:	20 81       	ld	r18, Z
 156:	21 11       	cpse	r18, r1
 158:	27 c0       	rjmp	.+78     	; 0x1a8 <get_button+0x74>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	3d ee       	ldi	r19, 0xED	; 237
 15e:	42 e0       	ldi	r20, 0x02	; 2
 160:	21 50       	subi	r18, 0x01	; 1
 162:	30 40       	sbci	r19, 0x00	; 0
 164:	40 40       	sbci	r20, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <get_button+0x2c>
 168:	00 c0       	rjmp	.+0      	; 0x16a <get_button+0x36>
 16a:	00 00       	nop
	{
		_delay_ms(60);   // noise가 지나가기를 기다린다. 
		button_status[button_num] = BUTTON_PRESS;   // noise가 지나간 상태의 High 상태 
 16c:	fc 01       	movw	r30, r24
 16e:	e2 5e       	subi	r30, 0xE2	; 226
 170:	fd 4f       	sbci	r31, 0xFD	; 253
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	20 83       	st	Z, r18
		return 0;   // 아직은 완전히 눌렸다 떼어진 상태가 아니다. 
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	08 95       	ret
	}
	else if (currtn_state==BUTTON_RELEASE && button_status[button_num] == BUTTON_PRESS)
 17c:	fc 01       	movw	r30, r24
 17e:	e2 5e       	subi	r30, 0xE2	; 226
 180:	fd 4f       	sbci	r31, 0xFD	; 253
 182:	20 81       	ld	r18, Z
 184:	21 30       	cpi	r18, 0x01	; 1
 186:	99 f4       	brne	.+38     	; 0x1ae <get_button+0x7a>
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	3d ee       	ldi	r19, 0xED	; 237
 18c:	42 e0       	ldi	r20, 0x02	; 2
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	30 40       	sbci	r19, 0x00	; 0
 192:	40 40       	sbci	r20, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <get_button+0x5a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <get_button+0x64>
 198:	00 00       	nop
	{
		_delay_ms(60);
		button_status[button_num] = BUTTON_RELEASE;   // 다음 버튼 체크를 위해서 초기화
 19a:	fc 01       	movw	r30, r24
 19c:	e2 5e       	subi	r30, 0xE2	; 226
 19e:	fd 4f       	sbci	r31, 0xFD	; 253
 1a0:	10 82       	st	Z, r1
		return 1;   // 완전히 1번 눌렸다 떼어진 상태로 인정		
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	08 95       	ret
	}
	
	return 0;   // 버튼이 open상태 
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	08 95       	ret
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	08 95       	ret

000001b4 <init_fnd>:

// fnd0에 문자 하나 출력
void fnd_display_0(int c)
{
	FND_DIGIT_PORT |= 1 << FND_DIGIT_D1;
	FND_DATA_PORT = c;
 1b4:	9f ef       	ldi	r25, 0xFF	; 255
 1b6:	94 bb       	out	0x14, r25	; 20
 1b8:	8a b3       	in	r24, 0x1a	; 26
 1ba:	80 6f       	ori	r24, 0xF0	; 240
 1bc:	8a bb       	out	0x1a, r24	; 26
 1be:	95 bb       	out	0x15, r25	; 21
 1c0:	08 95       	ret

000001c2 <fnd_clear_digit>:
 1c2:	8b b3       	in	r24, 0x1b	; 27
 1c4:	8f 70       	andi	r24, 0x0F	; 15
 1c6:	8b bb       	out	0x1b, r24	; 27
 1c8:	08 95       	ret

000001ca <fnd_display_all>:
}

// fnd0123에 입력받은 배열 그대로 출력
void fnd_display_all(int *fnd_font)
{
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	ec 01       	movw	r28, r24
	static int i = 0;
	
	fnd_clear_digit();
 1d0:	f8 df       	rcall	.-16     	; 0x1c2 <fnd_clear_digit>
	switch(i)
 1d2:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <i.1746>
 1d6:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <i.1746+0x1>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	91 05       	cpc	r25, r1
 1de:	71 f0       	breq	.+28     	; 0x1fc <fnd_display_all+0x32>
 1e0:	1c f4       	brge	.+6      	; 0x1e8 <fnd_display_all+0x1e>
 1e2:	89 2b       	or	r24, r25
 1e4:	39 f0       	breq	.+14     	; 0x1f4 <fnd_display_all+0x2a>
 1e6:	15 c0       	rjmp	.+42     	; 0x212 <fnd_display_all+0x48>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	91 05       	cpc	r25, r1
 1ec:	59 f0       	breq	.+22     	; 0x204 <fnd_display_all+0x3a>
 1ee:	03 97       	sbiw	r24, 0x03	; 3
 1f0:	69 f0       	breq	.+26     	; 0x20c <fnd_display_all+0x42>
 1f2:	0f c0       	rjmp	.+30     	; 0x212 <fnd_display_all+0x48>
	{
		case 0:
			FND_DIGIT_PORT |= 1 << FND_DIGIT_D1;
 1f4:	dc 9a       	sbi	0x1b, 4	; 27
			FND_DATA_PORT = fnd_font[0];
 1f6:	88 81       	ld	r24, Y
 1f8:	85 bb       	out	0x15, r24	; 21
			break;
 1fa:	0b c0       	rjmp	.+22     	; 0x212 <fnd_display_all+0x48>
		case 1:
			FND_DIGIT_PORT |= 1 << FND_DIGIT_D2;
 1fc:	dd 9a       	sbi	0x1b, 5	; 27
			FND_DATA_PORT = fnd_font[1];
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	85 bb       	out	0x15, r24	; 21
			break;
 202:	07 c0       	rjmp	.+14     	; 0x212 <fnd_display_all+0x48>
		case 2:
			FND_DIGIT_PORT |= 1 << FND_DIGIT_D3;
 204:	de 9a       	sbi	0x1b, 6	; 27
			FND_DATA_PORT = fnd_font[2];
 206:	8c 81       	ldd	r24, Y+4	; 0x04
 208:	85 bb       	out	0x15, r24	; 21
			break;
 20a:	03 c0       	rjmp	.+6      	; 0x212 <fnd_display_all+0x48>
		case 3:
			FND_DIGIT_PORT |= 1 << FND_DIGIT_D4;
 20c:	df 9a       	sbi	0x1b, 7	; 27
			FND_DATA_PORT = fnd_font[3];
 20e:	8e 81       	ldd	r24, Y+6	; 0x06
 210:	85 bb       	out	0x15, r24	; 21
			break;
	}
	i++;
	i %= 4;
 212:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <i.1746>
 216:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <i.1746+0x1>
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	83 70       	andi	r24, 0x03	; 3
 21e:	90 78       	andi	r25, 0x80	; 128
 220:	99 23       	and	r25, r25
 222:	24 f4       	brge	.+8      	; 0x22c <fnd_display_all+0x62>
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	8c 6f       	ori	r24, 0xFC	; 252
 228:	9f 6f       	ori	r25, 0xFF	; 255
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <i.1746+0x1>
 230:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <i.1746>
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <I2C_init>:
 */ 
#include <avr/io.h>
#include "I2C.h"

void I2C_init(unsigned int baud){
	TWBR = baud;
 23a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 23e:	08 95       	ret

00000240 <I2C_start>:
}

void I2C_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 240:	84 ea       	ldi	r24, 0xA4	; 164
 242:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));  // 시작 완료 대기
 246:	e4 e7       	ldi	r30, 0x74	; 116
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	88 23       	and	r24, r24
 24e:	ec f7       	brge	.-6      	; 0x24a <I2C_start+0xa>
}
 250:	08 95       	ret

00000252 <I2C_transmit>:

void I2C_transmit(uint8_t data)
{
	TWDR = data;
 252:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
 256:	84 e8       	ldi	r24, 0x84	; 132
 258:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
 25c:	e4 e7       	ldi	r30, 0x74	; 116
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	88 23       	and	r24, r24
 264:	ec f7       	brge	.-6      	; 0x260 <I2C_transmit+0xe>
}
 266:	08 95       	ret

00000268 <I2C_write_byte>:

void I2C_write_byte(uint8_t address, uint8_t data)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	d8 2f       	mov	r29, r24
 26e:	c6 2f       	mov	r28, r22
	I2C_start();
 270:	e7 df       	rcall	.-50     	; 0x240 <I2C_start>
	I2C_transmit(address);
 272:	8d 2f       	mov	r24, r29
 274:	ee df       	rcall	.-36     	; 0x252 <I2C_transmit>
	I2C_transmit(data);
 276:	8c 2f       	mov	r24, r28
 278:	ec df       	rcall	.-40     	; 0x252 <I2C_transmit>
 27a:	84 e9       	ldi	r24, 0x94	; 148
	I2C_stop();
}

void I2C_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 27c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 280:	df 91       	pop	r29
{
	I2C_start();
	I2C_transmit(address);
	I2C_transmit(data);
	I2C_stop();
}
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <I2C_LCD_write_data>:
 286:	ef 92       	push	r14
	//}
#endif 
}
// 1byte를 write
void I2C_LCD_write_data(uint8_t data)
{
 288:	ff 92       	push	r15
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	00 d0       	rcall	.+0      	; 0x294 <I2C_LCD_write_data+0xe>
 294:	00 d0       	rcall	.+0      	; 0x296 <I2C_LCD_write_data+0x10>
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
	char data_u, data_l;
	uint8_t data_t[4] = {0,};
		
	data_u = (data&0xf0);      // 상위 4bit 데이터
 29a:	28 2f       	mov	r18, r24
 29c:	20 7f       	andi	r18, 0xF0	; 240
	data_l = ((data<<4)&0xf0); // 하위 4bit 데이터
 29e:	30 e1       	ldi	r19, 0x10	; 16
 2a0:	83 9f       	mul	r24, r19
 2a2:	c0 01       	movw	r24, r0
 2a4:	11 24       	eor	r1, r1
	data_t[0] = data_u|0x0D;   //en=1, rs=1           |D7|D6|D5|D4|X|E|RW|RS|
 2a6:	92 2f       	mov	r25, r18
 2a8:	9d 60       	ori	r25, 0x0D	; 13
 2aa:	99 83       	std	Y+1, r25	; 0x01
	data_t[1] = data_u|0x09;   //en=0, rs=1
 2ac:	29 60       	ori	r18, 0x09	; 9
 2ae:	2a 83       	std	Y+2, r18	; 0x02
	data_t[2] = data_l|0x0D;   //en=1, rs=1
 2b0:	98 2f       	mov	r25, r24
 2b2:	9d 60       	ori	r25, 0x0D	; 13
 2b4:	9b 83       	std	Y+3, r25	; 0x03
	data_t[3] = data_l|0x09;   //en=0, rs=1
 2b6:	89 60       	ori	r24, 0x09	; 9
 2b8:	8c 83       	std	Y+4, r24	; 0x04
 2ba:	8e 01       	movw	r16, r28
 2bc:	0f 5f       	subi	r16, 0xFF	; 255
 2be:	1f 4f       	sbci	r17, 0xFF	; 255
 2c0:	7e 01       	movw	r14, r28
 2c2:	85 e0       	ldi	r24, 0x05	; 5
 2c4:	e8 0e       	add	r14, r24
 2c6:	f1 1c       	adc	r15, r1

	for(char i=0;i<4;i++){
		I2C_write_byte(SLA_W, data_t[i]);
 2c8:	f8 01       	movw	r30, r16
 2ca:	61 91       	ld	r22, Z+
 2cc:	8f 01       	movw	r16, r30
 2ce:	8e e4       	ldi	r24, 0x4E	; 78
 2d0:	cb df       	rcall	.-106    	; 0x268 <I2C_write_byte>
	data_t[0] = data_u|0x0D;   //en=1, rs=1           |D7|D6|D5|D4|X|E|RW|RS|
	data_t[1] = data_u|0x09;   //en=0, rs=1
	data_t[2] = data_l|0x0D;   //en=1, rs=1
	data_t[3] = data_l|0x09;   //en=0, rs=1

	for(char i=0;i<4;i++){
 2d2:	0e 15       	cp	r16, r14
 2d4:	1f 05       	cpc	r17, r15
 2d6:	c1 f7       	brne	.-16     	; 0x2c8 <I2C_LCD_write_data+0x42>
		I2C_write_byte(SLA_W, data_t[i]);
	}
}
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	08 95       	ret

000002ee <I2C_LCD_write_command>:

void I2C_LCD_write_command(uint8_t command)
{
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	00 d0       	rcall	.+0      	; 0x2fc <I2C_LCD_write_command+0xe>
 2fc:	00 d0       	rcall	.+0      	; 0x2fe <I2C_LCD_write_command+0x10>
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (command&0xf0);      // command의 상위 4bit 저장
 302:	28 2f       	mov	r18, r24
 304:	20 7f       	andi	r18, 0xF0	; 240
	data_l = ((command<<4)&0xf0); // command의 하위 4bit 저장
 306:	30 e1       	ldi	r19, 0x10	; 16
 308:	83 9f       	mul	r24, r19
 30a:	c0 01       	movw	r24, r0
 30c:	11 24       	eor	r1, r1
	data_t[0] = data_u|0x0C;  //en=1, rs=0           |D7|D6|D5|D4|X|E|RW|RS|
 30e:	92 2f       	mov	r25, r18
 310:	9c 60       	ori	r25, 0x0C	; 12
 312:	99 83       	std	Y+1, r25	; 0x01
	data_t[1] = data_u|0x08;  //en=0, rs=0
 314:	28 60       	ori	r18, 0x08	; 8
 316:	2a 83       	std	Y+2, r18	; 0x02
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 318:	98 2f       	mov	r25, r24
 31a:	9c 60       	ori	r25, 0x0C	; 12
 31c:	9b 83       	std	Y+3, r25	; 0x03
	data_t[3] = data_l|0x08;  //en=0, rs=0
 31e:	88 60       	ori	r24, 0x08	; 8
 320:	8c 83       	std	Y+4, r24	; 0x04
 322:	8e 01       	movw	r16, r28
 324:	0f 5f       	subi	r16, 0xFF	; 255
 326:	1f 4f       	sbci	r17, 0xFF	; 255
 328:	7e 01       	movw	r14, r28
 32a:	85 e0       	ldi	r24, 0x05	; 5
 32c:	e8 0e       	add	r14, r24
 32e:	f1 1c       	adc	r15, r1
	
	for(char i=0;i<4;i++){
		I2C_write_byte(SLA_W, data_t[i]);
 330:	f8 01       	movw	r30, r16
 332:	61 91       	ld	r22, Z+
 334:	8f 01       	movw	r16, r30
 336:	8e e4       	ldi	r24, 0x4E	; 78
 338:	97 df       	rcall	.-210    	; 0x268 <I2C_write_byte>
	data_t[0] = data_u|0x0C;  //en=1, rs=0           |D7|D6|D5|D4|X|E|RW|RS|
	data_t[1] = data_u|0x08;  //en=0, rs=0
	data_t[2] = data_l|0x0C;  //en=1, rs=0
	data_t[3] = data_l|0x08;  //en=0, rs=0
	
	for(char i=0;i<4;i++){
 33a:	0e 15       	cp	r16, r14
 33c:	1f 05       	cpc	r17, r15
 33e:	c1 f7       	brne	.-16     	; 0x330 <I2C_LCD_write_command+0x42>
		I2C_write_byte(SLA_W, data_t[i]);
	}
}
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	08 95       	ret

00000356 <I2C_LCD_clear>:

// 화면 clear
// 화면에 있는 내용만 지운다. 
void I2C_LCD_clear(void)
{
	I2C_LCD_write_command(COMMAND_CLEAR_DISPLAY);
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	ca df       	rcall	.-108    	; 0x2ee <I2C_LCD_write_command>
 35a:	8f e3       	ldi	r24, 0x3F	; 63
 35c:	9f e1       	ldi	r25, 0x1F	; 31
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <I2C_LCD_clear+0x8>
 362:	00 c0       	rjmp	.+0      	; 0x364 <I2C_LCD_clear+0xe>
 364:	00 00       	nop
 366:	08 95       	ret

00000368 <I2C_LCD_init>:
}

// LCD를 초기화
void I2C_LCD_init(void)
{
	I2C_init(10000);
 368:	80 e1       	ldi	r24, 0x10	; 16
 36a:	97 e2       	ldi	r25, 0x27	; 39
 36c:	66 df       	rcall	.-308    	; 0x23a <I2C_init>
 36e:	2f ef       	ldi	r18, 0xFF	; 255
 370:	80 e7       	ldi	r24, 0x70	; 112
 372:	92 e0       	ldi	r25, 0x02	; 2
 374:	21 50       	subi	r18, 0x01	; 1
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	90 40       	sbci	r25, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <I2C_LCD_init+0xc>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <I2C_LCD_init+0x16>
 37e:	00 00       	nop
	_delay_ms(50);
	//Initialization of HD44780-based LCD (4-bit HW)
	I2C_LCD_write_command(0x33);
 380:	83 e3       	ldi	r24, 0x33	; 51
 382:	b5 df       	rcall	.-150    	; 0x2ee <I2C_LCD_write_command>
	I2C_LCD_write_command(0x32);
 384:	82 e3       	ldi	r24, 0x32	; 50
 386:	b3 df       	rcall	.-154    	; 0x2ee <I2C_LCD_write_command>
	I2C_LCD_write_command(0x28);   //Function Set 4-bit mode
 388:	88 e2       	ldi	r24, 0x28	; 40
 38a:	b1 df       	rcall	.-158    	; 0x2ee <I2C_LCD_write_command>
	I2C_LCD_write_command(0x0c);   //Display On/Off Control
 38c:	8c e0       	ldi	r24, 0x0C	; 12
 38e:	af df       	rcall	.-162    	; 0x2ee <I2C_LCD_write_command>
	I2C_LCD_write_command(0x06);   //Entry mode set
 390:	86 e0       	ldi	r24, 0x06	; 6
 392:	ad df       	rcall	.-166    	; 0x2ee <I2C_LCD_write_command>
 394:	81 e0       	ldi	r24, 0x01	; 1
	I2C_LCD_write_command(0x01);   //Clear Display
 396:	ab df       	rcall	.-170    	; 0x2ee <I2C_LCD_write_command>
 398:	8f e3       	ldi	r24, 0x3F	; 63
 39a:	9c e9       	ldi	r25, 0x9C	; 156
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <I2C_LCD_init+0x34>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <I2C_LCD_init+0x3a>
 3a2:	00 00       	nop
 3a4:	08 95       	ret

000003a6 <I2C_LCD_write_string>:
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
	//Minimum delay to wait before driving LCD module
	_delay_ms(10);
}
// 현재의 xy좌표에 printf처럼 스트링 값을 출력 
void I2C_LCD_write_string(char *string)
{
 3aa:	cf 93       	push	r28
 3ac:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0; string[i]; i++) //"hello !!\0" 마지막 널문자에서 조건 거짓이 되어 빠져나온다.
 3ae:	80 81       	ld	r24, Z
 3b0:	88 23       	and	r24, r24
 3b2:	51 f0       	breq	.+20     	; 0x3c8 <I2C_LCD_write_string+0x22>
 3b4:	8f 01       	movw	r16, r30
 3b6:	c0 e0       	ldi	r28, 0x00	; 0
	I2C_LCD_write_data(string[i]);
 3b8:	66 df       	rcall	.-308    	; 0x286 <I2C_LCD_write_data>
}
// 현재의 xy좌표에 printf처럼 스트링 값을 출력 
void I2C_LCD_write_string(char *string)
{
	uint8_t i;
	for(i=0; string[i]; i++) //"hello !!\0" 마지막 널문자에서 조건 거짓이 되어 빠져나온다.
 3ba:	cf 5f       	subi	r28, 0xFF	; 255
 3bc:	f8 01       	movw	r30, r16
 3be:	ec 0f       	add	r30, r28
 3c0:	f1 1d       	adc	r31, r1
 3c2:	80 81       	ld	r24, Z
 3c4:	81 11       	cpse	r24, r1
 3c6:	f8 cf       	rjmp	.-16     	; 0x3b8 <I2C_LCD_write_string+0x12>
	I2C_LCD_write_data(string[i]);
}
 3c8:	cf 91       	pop	r28
 3ca:	1f 91       	pop	r17
 3cc:	0f 91       	pop	r16
 3ce:	08 95       	ret

000003d0 <I2C_LCD_goto_XY>:
	row %= 2;
	
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	
	I2C_LCD_write_command(command);
 3d0:	81 70       	andi	r24, 0x01	; 1
 3d2:	6f 70       	andi	r22, 0x0F	; 15
 3d4:	90 e4       	ldi	r25, 0x40	; 64
 3d6:	89 9f       	mul	r24, r25
 3d8:	60 0d       	add	r22, r0
 3da:	11 24       	eor	r1, r1
 3dc:	86 2f       	mov	r24, r22
 3de:	80 58       	subi	r24, 0x80	; 128
 3e0:	86 cf       	rjmp	.-244    	; 0x2ee <I2C_LCD_write_command>
 3e2:	08 95       	ret

000003e4 <I2C_LCD_write_string_XY>:
}

// x,y좌표로 이동을 하고 string값을 출력 한다. 
void I2C_LCD_write_string_XY(uint8_t row, uint8_t col, char *string)
{
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	ea 01       	movw	r28, r20
	I2C_LCD_goto_XY(row, col);
 3ea:	f2 df       	rcall	.-28     	; 0x3d0 <I2C_LCD_goto_XY>
	I2C_LCD_write_string(string);
 3ec:	ce 01       	movw	r24, r28
 3ee:	db df       	rcall	.-74     	; 0x3a6 <I2C_LCD_write_string>
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <moving_manual_mode>:
		_delay_ms(1000);
		
		motor_turn_left_bi(1000);
		_delay_ms(500);
		
		motor_stop(0);
 3f6:	dc 01       	movw	r26, r24
 3f8:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <bt_data>
 3fc:	4e 2f       	mov	r20, r30
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	fa 01       	movw	r30, r20
 402:	e2 54       	subi	r30, 0x42	; 66
 404:	f1 09       	sbc	r31, r1
 406:	e4 33       	cpi	r30, 0x34	; 52
 408:	f1 05       	cpc	r31, r1
 40a:	08 f0       	brcs	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	41 c0       	rjmp	.+130    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 40e:	ea 5b       	subi	r30, 0xBA	; 186
 410:	ff 4f       	sbci	r31, 0xFF	; 255
 412:	50 c5       	rjmp	.+2720   	; 0xeb4 <__tablejump2__>
 414:	13 96       	adiw	r26, 0x03	; 3
 416:	1c 92       	st	X, r1
 418:	1e 92       	st	-X, r1
 41a:	12 97       	sbiw	r26, 0x02	; 2
 41c:	87 c0       	rjmp	.+270    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	13 96       	adiw	r26, 0x03	; 3
 424:	9c 93       	st	X, r25
 426:	8e 93       	st	-X, r24
 428:	12 97       	sbiw	r26, 0x02	; 2
 42a:	80 c0       	rjmp	.+256    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 42c:	82 e0       	ldi	r24, 0x02	; 2
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	13 96       	adiw	r26, 0x03	; 3
 432:	9c 93       	st	X, r25
 434:	8e 93       	st	-X, r24
 436:	12 97       	sbiw	r26, 0x02	; 2
 438:	79 c0       	rjmp	.+242    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 43a:	83 e0       	ldi	r24, 0x03	; 3
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	13 96       	adiw	r26, 0x03	; 3
 440:	9c 93       	st	X, r25
 442:	8e 93       	st	-X, r24
 444:	12 97       	sbiw	r26, 0x02	; 2
 446:	72 c0       	rjmp	.+228    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 448:	16 96       	adiw	r26, 0x06	; 6
 44a:	8d 91       	ld	r24, X+
 44c:	9c 91       	ld	r25, X
 44e:	17 97       	sbiw	r26, 0x07	; 7
 450:	01 96       	adiw	r24, 0x01	; 1
 452:	8a 30       	cpi	r24, 0x0A	; 10
 454:	91 05       	cpc	r25, r1
 456:	14 f0       	brlt	.+4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 458:	89 e0       	ldi	r24, 0x09	; 9
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	17 96       	adiw	r26, 0x07	; 7
 45e:	9c 93       	st	X, r25
 460:	8e 93       	st	-X, r24
 462:	16 97       	sbiw	r26, 0x06	; 6
 464:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <pre_bt_data>
 468:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <bt_data>
 46c:	1e c0       	rjmp	.+60     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 46e:	16 96       	adiw	r26, 0x06	; 6
 470:	8d 91       	ld	r24, X+
 472:	9c 91       	ld	r25, X
 474:	17 97       	sbiw	r26, 0x07	; 7
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	12 f4       	brpl	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	17 96       	adiw	r26, 0x07	; 7
 480:	9c 93       	st	X, r25
 482:	8e 93       	st	-X, r24
 484:	16 97       	sbiw	r26, 0x06	; 6
 486:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <pre_bt_data>
 48a:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <bt_data>
 48e:	0d c0       	rjmp	.+26     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 490:	84 e0       	ldi	r24, 0x04	; 4
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	13 96       	adiw	r26, 0x03	; 3
 496:	9c 93       	st	X, r25
 498:	8e 93       	st	-X, r24
 49a:	12 97       	sbiw	r26, 0x02	; 2
 49c:	80 e2       	ldi	r24, 0x20	; 32
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	1d 96       	adiw	r26, 0x0d	; 13
 4a2:	9c 93       	st	X, r25
 4a4:	8e 93       	st	-X, r24
 4a6:	1c 97       	sbiw	r26, 0x0c	; 12
 4a8:	23 c0       	rjmp	.+70     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4aa:	12 96       	adiw	r26, 0x02	; 2
 4ac:	2d 91       	ld	r18, X+
 4ae:	3c 91       	ld	r19, X
 4b0:	13 97       	sbiw	r26, 0x03	; 3
 4b2:	c9 01       	movw	r24, r18
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	80 50       	subi	r24, 0x00	; 0
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	1d 96       	adiw	r26, 0x0d	; 13
 4c6:	9c 93       	st	X, r25
 4c8:	8e 93       	st	-X, r24
 4ca:	1c 97       	sbiw	r26, 0x0c	; 12
 4cc:	24 30       	cpi	r18, 0x04	; 4
 4ce:	31 05       	cpc	r19, r1
 4d0:	79 f0       	breq	.+30     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4d2:	16 96       	adiw	r26, 0x06	; 6
 4d4:	ed 91       	ld	r30, X+
 4d6:	fc 91       	ld	r31, X
 4d8:	17 97       	sbiw	r26, 0x07	; 7
 4da:	ee 0f       	add	r30, r30
 4dc:	ff 1f       	adc	r31, r31
 4de:	e4 5b       	subi	r30, 0xB4	; 180
 4e0:	fe 4f       	sbci	r31, 0xFE	; 254
 4e2:	80 81       	ld	r24, Z
 4e4:	91 81       	ldd	r25, Z+1	; 0x01
 4e6:	1b 96       	adiw	r26, 0x0b	; 11
 4e8:	9c 93       	st	X, r25
 4ea:	8e 93       	st	-X, r24
 4ec:	1a 97       	sbiw	r26, 0x0a	; 10
 4ee:	0a c0       	rjmp	.+20     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 4f0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <lcd_texts+0x18>
 4f4:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <lcd_texts+0x19>
 4f8:	1b 96       	adiw	r26, 0x0b	; 11
 4fa:	9c 93       	st	X, r25
 4fc:	8e 93       	st	-X, r24
 4fe:	1a 97       	sbiw	r26, 0x0a	; 10
 500:	24 e0       	ldi	r18, 0x04	; 4
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	16 96       	adiw	r26, 0x06	; 6
 506:	0d 90       	ld	r0, X+
 508:	bc 91       	ld	r27, X
 50a:	a0 2d       	mov	r26, r0
 50c:	aa 0f       	add	r26, r26
 50e:	bb 1f       	adc	r27, r27
 510:	ae 59       	subi	r26, 0x9E	; 158
 512:	be 4f       	sbci	r27, 0xFE	; 254
 514:	22 0f       	add	r18, r18
 516:	33 1f       	adc	r19, r19
 518:	f9 01       	movw	r30, r18
 51a:	e6 58       	subi	r30, 0x86	; 134
 51c:	fe 4f       	sbci	r31, 0xFE	; 254
 51e:	01 90       	ld	r0, Z+
 520:	f0 81       	ld	r31, Z
 522:	e0 2d       	mov	r30, r0
 524:	8d 91       	ld	r24, X+
 526:	9c 91       	ld	r25, X
 528:	09 95       	icall
 52a:	08 95       	ret
 52c:	12 96       	adiw	r26, 0x02	; 2
 52e:	2d 91       	ld	r18, X+
 530:	3c 91       	ld	r19, X
 532:	13 97       	sbiw	r26, 0x03	; 3
 534:	c9 01       	movw	r24, r18
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	80 50       	subi	r24, 0x00	; 0
 544:	9f 4f       	sbci	r25, 0xFF	; 255
 546:	1d 96       	adiw	r26, 0x0d	; 13
 548:	9c 93       	st	X, r25
 54a:	8e 93       	st	-X, r24
 54c:	1c 97       	sbiw	r26, 0x0c	; 12
 54e:	c1 cf       	rjmp	.-126    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>

00000550 <moving_auto_mode>:
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	ec 01       	movw	r28, r24
 556:	79 d4       	rcall	.+2290   	; 0xe4a <check_obstacle>
 558:	8a 81       	ldd	r24, Y+2	; 0x02
 55a:	9b 81       	ldd	r25, Y+3	; 0x03
 55c:	9c 01       	movw	r18, r24
 55e:	27 50       	subi	r18, 0x07	; 7
 560:	31 09       	sbc	r19, r1
 562:	22 30       	cpi	r18, 0x02	; 2
 564:	31 05       	cpc	r19, r1
 566:	18 f5       	brcc	.+70     	; 0x5ae <moving_auto_mode+0x5e>
 568:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <bi_count.2210>
 56c:	30 91 22 02 	lds	r19, 0x0222	; 0x800222 <bi_count.2210+0x1>
 570:	2f 5f       	subi	r18, 0xFF	; 255
 572:	3f 4f       	sbci	r19, 0xFF	; 255
 574:	30 93 22 02 	sts	0x0222, r19	; 0x800222 <bi_count.2210+0x1>
 578:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <bi_count.2210>
 57c:	24 3f       	cpi	r18, 0xF4	; 244
 57e:	31 40       	sbci	r19, 0x01	; 1
 580:	94 f4       	brge	.+36     	; 0x5a6 <moving_auto_mode+0x56>
 582:	ae 81       	ldd	r26, Y+6	; 0x06
 584:	bf 81       	ldd	r27, Y+7	; 0x07
 586:	aa 0f       	add	r26, r26
 588:	bb 1f       	adc	r27, r27
 58a:	ae 59       	subi	r26, 0x9E	; 158
 58c:	be 4f       	sbci	r27, 0xFE	; 254
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	fc 01       	movw	r30, r24
 594:	e6 58       	subi	r30, 0x86	; 134
 596:	fe 4f       	sbci	r31, 0xFE	; 254
 598:	01 90       	ld	r0, Z+
 59a:	f0 81       	ld	r31, Z
 59c:	e0 2d       	mov	r30, r0
 59e:	8d 91       	ld	r24, X+
 5a0:	9c 91       	ld	r25, X
 5a2:	09 95       	icall
 5a4:	04 c0       	rjmp	.+8      	; 0x5ae <moving_auto_mode+0x5e>
 5a6:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <bi_count.2210+0x1>
 5aa:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <bi_count.2210>
 5ae:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <obstacle_info>
 5b2:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <obstacle_info+0x1>
 5b6:	4a 97       	sbiw	r24, 0x1a	; 26
 5b8:	9c f0       	brlt	.+38     	; 0x5e0 <moving_auto_mode+0x90>
 5ba:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <obstacle_info+0x2>
 5be:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <obstacle_info+0x3>
 5c2:	4a 97       	sbiw	r24, 0x1a	; 26
 5c4:	6c f0       	brlt	.+26     	; 0x5e0 <moving_auto_mode+0x90>
 5c6:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <obstacle_info+0x4>
 5ca:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <obstacle_info+0x5>
 5ce:	4a 97       	sbiw	r24, 0x1a	; 26
 5d0:	3c f0       	brlt	.+14     	; 0x5e0 <moving_auto_mode+0x90>
 5d2:	89 e0       	ldi	r24, 0x09	; 9
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	9f 83       	std	Y+7, r25	; 0x07
 5d8:	8e 83       	std	Y+6, r24	; 0x06
 5da:	1b 82       	std	Y+3, r1	; 0x03
 5dc:	1a 82       	std	Y+2, r1	; 0x02
 5de:	ab c0       	rjmp	.+342    	; 0x736 <moving_auto_mode+0x1e6>
 5e0:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <obstacle_info>
 5e4:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <obstacle_info+0x1>
 5e8:	0a 97       	sbiw	r24, 0x0a	; 10
 5ea:	ac f4       	brge	.+42     	; 0x616 <moving_auto_mode+0xc6>
 5ec:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <obstacle_info+0x2>
 5f0:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <obstacle_info+0x3>
 5f4:	49 97       	sbiw	r24, 0x19	; 25
 5f6:	7c f4       	brge	.+30     	; 0x616 <moving_auto_mode+0xc6>
 5f8:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <obstacle_info+0x4>
 5fc:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <obstacle_info+0x5>
 600:	40 97       	sbiw	r24, 0x10	; 16
 602:	4c f0       	brlt	.+18     	; 0x616 <moving_auto_mode+0xc6>
 604:	89 e0       	ldi	r24, 0x09	; 9
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	9f 83       	std	Y+7, r25	; 0x07
 60a:	8e 83       	std	Y+6, r24	; 0x06
 60c:	88 e0       	ldi	r24, 0x08	; 8
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	9b 83       	std	Y+3, r25	; 0x03
 612:	8a 83       	std	Y+2, r24	; 0x02
 614:	90 c0       	rjmp	.+288    	; 0x736 <moving_auto_mode+0x1e6>
 616:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <obstacle_info+0x4>
 61a:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <obstacle_info+0x5>
 61e:	0a 97       	sbiw	r24, 0x0a	; 10
 620:	ac f4       	brge	.+42     	; 0x64c <moving_auto_mode+0xfc>
 622:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <obstacle_info+0x2>
 626:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <obstacle_info+0x3>
 62a:	49 97       	sbiw	r24, 0x19	; 25
 62c:	7c f4       	brge	.+30     	; 0x64c <moving_auto_mode+0xfc>
 62e:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <obstacle_info>
 632:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <obstacle_info+0x1>
 636:	40 97       	sbiw	r24, 0x10	; 16
 638:	4c f0       	brlt	.+18     	; 0x64c <moving_auto_mode+0xfc>
 63a:	89 e0       	ldi	r24, 0x09	; 9
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	9f 83       	std	Y+7, r25	; 0x07
 640:	8e 83       	std	Y+6, r24	; 0x06
 642:	87 e0       	ldi	r24, 0x07	; 7
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	9b 83       	std	Y+3, r25	; 0x03
 648:	8a 83       	std	Y+2, r24	; 0x02
 64a:	75 c0       	rjmp	.+234    	; 0x736 <moving_auto_mode+0x1e6>
 64c:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <obstacle_info>
 650:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <obstacle_info+0x1>
 654:	0a 97       	sbiw	r24, 0x0a	; 10
 656:	7c f4       	brge	.+30     	; 0x676 <moving_auto_mode+0x126>
 658:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <obstacle_info+0x4>
 65c:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <obstacle_info+0x5>
 660:	0b 97       	sbiw	r24, 0x0b	; 11
 662:	4c f0       	brlt	.+18     	; 0x676 <moving_auto_mode+0x126>
 664:	89 e0       	ldi	r24, 0x09	; 9
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	9f 83       	std	Y+7, r25	; 0x07
 66a:	8e 83       	std	Y+6, r24	; 0x06
 66c:	83 e0       	ldi	r24, 0x03	; 3
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	9b 83       	std	Y+3, r25	; 0x03
 672:	8a 83       	std	Y+2, r24	; 0x02
 674:	60 c0       	rjmp	.+192    	; 0x736 <moving_auto_mode+0x1e6>
 676:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <obstacle_info+0x4>
 67a:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <obstacle_info+0x5>
 67e:	0a 97       	sbiw	r24, 0x0a	; 10
 680:	7c f4       	brge	.+30     	; 0x6a0 <moving_auto_mode+0x150>
 682:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <obstacle_info>
 686:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <obstacle_info+0x1>
 68a:	0b 97       	sbiw	r24, 0x0b	; 11
 68c:	4c f0       	brlt	.+18     	; 0x6a0 <moving_auto_mode+0x150>
 68e:	89 e0       	ldi	r24, 0x09	; 9
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	9f 83       	std	Y+7, r25	; 0x07
 694:	8e 83       	std	Y+6, r24	; 0x06
 696:	82 e0       	ldi	r24, 0x02	; 2
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	9b 83       	std	Y+3, r25	; 0x03
 69c:	8a 83       	std	Y+2, r24	; 0x02
 69e:	4b c0       	rjmp	.+150    	; 0x736 <moving_auto_mode+0x1e6>
 6a0:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <obstacle_info>
 6a4:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <obstacle_info+0x1>
 6a8:	05 97       	sbiw	r24, 0x05	; 5
 6aa:	ac f4       	brge	.+42     	; 0x6d6 <moving_auto_mode+0x186>
 6ac:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <obstacle_info+0x2>
 6b0:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <obstacle_info+0x3>
 6b4:	05 97       	sbiw	r24, 0x05	; 5
 6b6:	7c f4       	brge	.+30     	; 0x6d6 <moving_auto_mode+0x186>
 6b8:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <obstacle_info+0x4>
 6bc:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <obstacle_info+0x5>
 6c0:	05 97       	sbiw	r24, 0x05	; 5
 6c2:	4c f4       	brge	.+18     	; 0x6d6 <moving_auto_mode+0x186>
 6c4:	83 e0       	ldi	r24, 0x03	; 3
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	9f 83       	std	Y+7, r25	; 0x07
 6ca:	8e 83       	std	Y+6, r24	; 0x06
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	9b 83       	std	Y+3, r25	; 0x03
 6d2:	8a 83       	std	Y+2, r24	; 0x02
 6d4:	30 c0       	rjmp	.+96     	; 0x736 <moving_auto_mode+0x1e6>
 6d6:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <obstacle_info+0x2>
 6da:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <obstacle_info+0x3>
 6de:	05 97       	sbiw	r24, 0x05	; 5
 6e0:	8c f4       	brge	.+34     	; 0x704 <moving_auto_mode+0x1b4>
 6e2:	84 e0       	ldi	r24, 0x04	; 4
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	9b 83       	std	Y+3, r25	; 0x03
 6e8:	8a 83       	std	Y+2, r24	; 0x02
 6ea:	80 e2       	ldi	r24, 0x20	; 32
 6ec:	91 e0       	ldi	r25, 0x01	; 1
 6ee:	9d 87       	std	Y+13, r25	; 0x0d
 6f0:	8c 87       	std	Y+12, r24	; 0x0c
 6f2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <lcd_texts+0x18>
 6f6:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <lcd_texts+0x19>
 6fa:	9b 87       	std	Y+11, r25	; 0x0b
 6fc:	8a 87       	std	Y+10, r24	; 0x0a
 6fe:	84 e0       	ldi	r24, 0x04	; 4
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	07 c0       	rjmp	.+14     	; 0x712 <moving_auto_mode+0x1c2>
 704:	85 e0       	ldi	r24, 0x05	; 5
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	9f 83       	std	Y+7, r25	; 0x07
 70a:	8e 83       	std	Y+6, r24	; 0x06
 70c:	1b 82       	std	Y+3, r1	; 0x03
 70e:	1a 82       	std	Y+2, r1	; 0x02
 710:	12 c0       	rjmp	.+36     	; 0x736 <moving_auto_mode+0x1e6>
 712:	ae 81       	ldd	r26, Y+6	; 0x06
 714:	bf 81       	ldd	r27, Y+7	; 0x07
 716:	aa 0f       	add	r26, r26
 718:	bb 1f       	adc	r27, r27
 71a:	ae 59       	subi	r26, 0x9E	; 158
 71c:	be 4f       	sbci	r27, 0xFE	; 254
 71e:	88 0f       	add	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	fc 01       	movw	r30, r24
 724:	e6 58       	subi	r30, 0x86	; 134
 726:	fe 4f       	sbci	r31, 0xFE	; 254
 728:	01 90       	ld	r0, Z+
 72a:	f0 81       	ld	r31, Z
 72c:	e0 2d       	mov	r30, r0
 72e:	8d 91       	ld	r24, X+
 730:	9c 91       	ld	r25, X
 732:	09 95       	icall
 734:	18 c0       	rjmp	.+48     	; 0x766 <moving_auto_mode+0x216>
 736:	8a 81       	ldd	r24, Y+2	; 0x02
 738:	9b 81       	ldd	r25, Y+3	; 0x03
 73a:	9c 01       	movw	r18, r24
 73c:	22 0f       	add	r18, r18
 73e:	33 1f       	adc	r19, r19
 740:	22 0f       	add	r18, r18
 742:	33 1f       	adc	r19, r19
 744:	22 0f       	add	r18, r18
 746:	33 1f       	adc	r19, r19
 748:	20 50       	subi	r18, 0x00	; 0
 74a:	3f 4f       	sbci	r19, 0xFF	; 255
 74c:	3d 87       	std	Y+13, r19	; 0x0d
 74e:	2c 87       	std	Y+12, r18	; 0x0c
 750:	ee 81       	ldd	r30, Y+6	; 0x06
 752:	ff 81       	ldd	r31, Y+7	; 0x07
 754:	ee 0f       	add	r30, r30
 756:	ff 1f       	adc	r31, r31
 758:	e4 5b       	subi	r30, 0xB4	; 180
 75a:	fe 4f       	sbci	r31, 0xFE	; 254
 75c:	20 81       	ld	r18, Z
 75e:	31 81       	ldd	r19, Z+1	; 0x01
 760:	3b 87       	std	Y+11, r19	; 0x0b
 762:	2a 87       	std	Y+10, r18	; 0x0a
 764:	d6 cf       	rjmp	.-84     	; 0x712 <moving_auto_mode+0x1c2>
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	08 95       	ret

0000076c <__vector_16>:
 76c:	1f 92       	push	r1
 76e:	0f 92       	push	r0
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	0f 92       	push	r0
 774:	11 24       	eor	r1, r1
 776:	8f 93       	push	r24
 778:	9f 93       	push	r25
 77a:	86 e0       	ldi	r24, 0x06	; 6
 77c:	82 bf       	out	0x32, r24	; 50
 77e:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <msec_count>
 782:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <msec_count+0x1>
 786:	01 96       	adiw	r24, 0x01	; 1
 788:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <msec_count+0x1>
 78c:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <msec_count>
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <monitor_shoot+0x1>
 798:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <monitor_shoot>
 79c:	9f 91       	pop	r25
 79e:	8f 91       	pop	r24
 7a0:	0f 90       	pop	r0
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	0f 90       	pop	r0
 7a6:	1f 90       	pop	r1
 7a8:	18 95       	reti

000007aa <init_timer0>:
 7aa:	86 e0       	ldi	r24, 0x06	; 6
 7ac:	82 bf       	out	0x32, r24	; 50
 7ae:	83 b7       	in	r24, 0x33	; 51
 7b0:	84 60       	ori	r24, 0x04	; 4
 7b2:	83 bf       	out	0x33, r24	; 51
 7b4:	87 b7       	in	r24, 0x37	; 55
 7b6:	81 60       	ori	r24, 0x01	; 1
 7b8:	87 bf       	out	0x37, r24	; 55
 7ba:	08 95       	ret

000007bc <auto_car_program>:
	
	return 0;
}

int auto_car_program(void)
{
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
 7c0:	cd b7       	in	r28, 0x3d	; 61
 7c2:	de b7       	in	r29, 0x3e	; 62
 7c4:	2e 97       	sbiw	r28, 0x0e	; 14
 7c6:	0f b6       	in	r0, 0x3f	; 63
 7c8:	f8 94       	cli
 7ca:	de bf       	out	0x3e, r29	; 62
 7cc:	0f be       	out	0x3f, r0	; 63
 7ce:	cd bf       	out	0x3d, r28	; 61
	// TODO
    // 각종 초기화
	init_timer0();
 7d0:	ec df       	rcall	.-40     	; 0x7aa <init_timer0>
	init_timer1();
 7d2:	be d0       	rcall	.+380    	; 0x950 <init_timer1>
	init_L298N();
 7d4:	ce d0       	rcall	.+412    	; 0x972 <init_L298N>
	init_uart1();
 7d6:	fd d1       	rcall	.+1018   	; 0xbd2 <init_uart1>
	init_uart0();
 7d8:	ce d1       	rcall	.+924    	; 0xb76 <init_uart0>
	init_ultrasonic();
 7da:	24 d3       	rcall	.+1608   	; 0xe24 <init_ultrasonic>
 7dc:	a9 dc       	rcall	.-1710   	; 0x130 <init_button>
	init_button();
 7de:	c4 dd       	rcall	.-1144   	; 0x368 <I2C_LCD_init>
 7e0:	e9 dc       	rcall	.-1582   	; 0x1b4 <init_fnd>
	I2C_LCD_init();
 7e2:	78 94       	sei
 7e4:	8c e8       	ldi	r24, 0x8C	; 140
	init_fnd();
 7e6:	91 e0       	ldi	r25, 0x01	; 1
 7e8:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <__iob+0x3>
	sei();
	stdout = &OUTPUT;
 7ec:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <__iob+0x2>
 7f0:	1a 82       	std	Y+2, r1	; 0x02
 7f2:	19 82       	std	Y+1, r1	; 0x01
 7f4:	84 e0       	ldi	r24, 0x04	; 4
 7f6:	90 e0       	ldi	r25, 0x00	; 0
	
	t_car_info my_car;
	my_car.mode = MANUAL_MODE;
 7f8:	9c 83       	std	Y+4, r25	; 0x04
 7fa:	8b 83       	std	Y+3, r24	; 0x03
	my_car.state = STOP;
 7fc:	83 e0       	ldi	r24, 0x03	; 3
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	98 87       	std	Y+8, r25	; 0x08
 802:	8f 83       	std	Y+7, r24	; 0x07
	my_car.speed = 3;
 804:	e8 e4       	ldi	r30, 0x48	; 72
 806:	f1 e0       	ldi	r31, 0x01	; 1
 808:	80 81       	ld	r24, Z
 80a:	91 81       	ldd	r25, Z+1	; 0x01
	my_car.lcd_text_up = lcd_texts[0];
 80c:	9a 87       	std	Y+10, r25	; 0x0a
 80e:	89 87       	std	Y+9, r24	; 0x09
 810:	82 85       	ldd	r24, Z+10	; 0x0a
 812:	93 85       	ldd	r25, Z+11	; 0x0b
 814:	9c 87       	std	Y+12, r25	; 0x0c
 816:	8b 87       	std	Y+11, r24	; 0x0b
	my_car.lcd_text_down = lcd_texts[my_car.speed + 2];
 818:	80 e2       	ldi	r24, 0x20	; 32
 81a:	91 e0       	ldi	r25, 0x01	; 1
 81c:	9e 87       	std	Y+14, r25	; 0x0e
	my_car.fnd_char = fnd_fonts[STOP];
 81e:	8d 87       	std	Y+13, r24	; 0x0d
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	b7 d0       	rcall	.+366    	; 0x994 <motor_stop>
	
	motor_stop(0);
 826:	0f 2e       	mov	r0, r31
 828:	f4 e6       	ldi	r31, 0x64	; 100
 82a:	cf 2e       	mov	r12, r31
 82c:	d1 2c       	mov	r13, r1
		
		if(monitor_shoot)
		{
			monitor_shoot = 0;
			fnd_display_all(my_car.fnd_char);
			if(msec_count % 100 == 0)
 82e:	f0 2d       	mov	r31, r0
 830:	08 e4       	ldi	r16, 0x48	; 72
 832:	11 e0       	ldi	r17, 0x01	; 1
 834:	68 94       	set
 836:	88 24       	eor	r8, r8
			{
				bt_data = 0;
				my_car.mode = MANUAL_MODE;
				my_car.state = STOP;
				my_car.speed = 3;
				my_car.lcd_text_up = lcd_texts[0];
 838:	81 f8       	bld	r8, 1
 83a:	91 2c       	mov	r9, r1
		{
			if(my_car.mode == MANUAL_MODE)
			{
				my_car.mode = AUTO_MODE;
				my_car.state = FORWARD;
				my_car.speed = 2;
 83c:	68 94       	set
 83e:	66 24       	eor	r6, r6
 840:	62 f8       	bld	r6, 2
 842:	71 2c       	mov	r7, r1
				my_car.fnd_char = fnd_fonts[FORWARD];
			}else if(my_car.mode == AUTO_MODE)
			{
				bt_data = 0;
				my_car.mode = MANUAL_MODE;
				my_car.state = STOP;
 844:	0f 2e       	mov	r0, r31
 846:	f0 e2       	ldi	r31, 0x20	; 32
 848:	4f 2e       	mov	r4, r31
 84a:	f1 e0       	ldi	r31, 0x01	; 1
				my_car.speed = 3;
				my_car.lcd_text_up = lcd_texts[0];
				my_car.lcd_text_down = lcd_texts[12];
				my_car.fnd_char = fnd_fonts[STOP];
 84c:	5f 2e       	mov	r5, r31
 84e:	f0 2d       	mov	r31, r0
 850:	aa 24       	eor	r10, r10
 852:	a3 94       	inc	r10
 854:	b1 2c       	mov	r11, r1
 856:	0f 2e       	mov	r0, r31
		
		if(get_button(BUTTON0, BUTTON0PIN))
		{
			if(my_car.mode == MANUAL_MODE)
			{
				my_car.mode = AUTO_MODE;
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	ef 2e       	mov	r14, r31
 85c:	f1 e0       	ldi	r31, 0x01	; 1
				my_car.state = FORWARD;
				my_car.speed = 2;
				my_car.lcd_text_up = lcd_texts[1];
				my_car.lcd_text_down = lcd_texts[3];
				my_car.fnd_char = fnd_fonts[FORWARD];
 85e:	ff 2e       	mov	r15, r31
 860:	f0 2d       	mov	r31, r0
 862:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <monitor_shoot>
 866:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <monitor_shoot+0x1>
		// LED 제어하기
		// LCD 제어하기
		// FND 제어하기
		// 부저 제어하기
		
		if(monitor_shoot)
 86a:	89 2b       	or	r24, r25
 86c:	d1 f0       	breq	.+52     	; 0x8a2 <auto_car_program+0xe6>
 86e:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <monitor_shoot+0x1>
 872:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <monitor_shoot>
		{
			monitor_shoot = 0;
 876:	8d 85       	ldd	r24, Y+13	; 0x0d
 878:	9e 85       	ldd	r25, Y+14	; 0x0e
			fnd_display_all(my_car.fnd_char);
 87a:	a7 dc       	rcall	.-1714   	; 0x1ca <fnd_display_all>
 87c:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <msec_count>
			if(msec_count % 100 == 0)
 880:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <msec_count+0x1>
 884:	b6 01       	movw	r22, r12
 886:	03 d3       	rcall	.+1542   	; 0xe8e <__divmodhi4>
 888:	89 2b       	or	r24, r25
 88a:	59 f4       	brne	.+22     	; 0x8a2 <auto_car_program+0xe6>
 88c:	64 dd       	rcall	.-1336   	; 0x356 <I2C_LCD_clear>
			{
				I2C_LCD_clear();
 88e:	49 85       	ldd	r20, Y+9	; 0x09
 890:	5a 85       	ldd	r21, Y+10	; 0x0a
				I2C_LCD_write_string_XY(0,0,my_car.lcd_text_up);
 892:	60 e0       	ldi	r22, 0x00	; 0
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	a6 dd       	rcall	.-1204   	; 0x3e4 <I2C_LCD_write_string_XY>
 898:	4b 85       	ldd	r20, Y+11	; 0x0b
 89a:	5c 85       	ldd	r21, Y+12	; 0x0c
				I2C_LCD_write_string_XY(1,0,my_car.lcd_text_down);
 89c:	60 e0       	ldi	r22, 0x00	; 0
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	a1 dd       	rcall	.-1214   	; 0x3e4 <I2C_LCD_write_string_XY>
 8a2:	63 e0       	ldi	r22, 0x03	; 3
 8a4:	70 e0       	ldi	r23, 0x00	; 0
 8a6:	80 e0       	ldi	r24, 0x00	; 0
			}
			
		}
		
		if(get_button(BUTTON0, BUTTON0PIN))
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	44 dc       	rcall	.-1912   	; 0x134 <get_button>
 8ac:	89 2b       	or	r24, r25
 8ae:	69 f1       	breq	.+90     	; 0x90a <auto_car_program+0x14e>
 8b0:	89 81       	ldd	r24, Y+1	; 0x01
 8b2:	9a 81       	ldd	r25, Y+2	; 0x02
 8b4:	00 97       	sbiw	r24, 0x00	; 0
 8b6:	91 f4       	brne	.+36     	; 0x8dc <auto_car_program+0x120>
		{
			if(my_car.mode == MANUAL_MODE)
 8b8:	ba 82       	std	Y+2, r11	; 0x02
 8ba:	a9 82       	std	Y+1, r10	; 0x01
 8bc:	1c 82       	std	Y+4, r1	; 0x04
 8be:	1b 82       	std	Y+3, r1	; 0x03
			{
				my_car.mode = AUTO_MODE;
 8c0:	98 86       	std	Y+8, r9	; 0x08
 8c2:	8f 82       	std	Y+7, r8	; 0x07
				my_car.state = FORWARD;
 8c4:	f8 01       	movw	r30, r16
 8c6:	82 81       	ldd	r24, Z+2	; 0x02
				my_car.speed = 2;
 8c8:	93 81       	ldd	r25, Z+3	; 0x03
 8ca:	9a 87       	std	Y+10, r25	; 0x0a
				my_car.lcd_text_up = lcd_texts[1];
 8cc:	89 87       	std	Y+9, r24	; 0x09
 8ce:	86 81       	ldd	r24, Z+6	; 0x06
 8d0:	97 81       	ldd	r25, Z+7	; 0x07
 8d2:	9c 87       	std	Y+12, r25	; 0x0c
 8d4:	8b 87       	std	Y+11, r24	; 0x0b
				my_car.lcd_text_down = lcd_texts[3];
 8d6:	fe 86       	std	Y+14, r15	; 0x0e
 8d8:	ed 86       	std	Y+13, r14	; 0x0d
 8da:	17 c0       	rjmp	.+46     	; 0x90a <auto_car_program+0x14e>
 8dc:	01 97       	sbiw	r24, 0x01	; 1
				my_car.fnd_char = fnd_fonts[FORWARD];
 8de:	a9 f4       	brne	.+42     	; 0x90a <auto_car_program+0x14e>
 8e0:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <bt_data>
			}else if(my_car.mode == AUTO_MODE)
 8e4:	1a 82       	std	Y+2, r1	; 0x02
 8e6:	19 82       	std	Y+1, r1	; 0x01
			{
				bt_data = 0;
 8e8:	7c 82       	std	Y+4, r7	; 0x04
 8ea:	6b 82       	std	Y+3, r6	; 0x03
				my_car.mode = MANUAL_MODE;
 8ec:	83 e0       	ldi	r24, 0x03	; 3
 8ee:	90 e0       	ldi	r25, 0x00	; 0
				my_car.state = STOP;
 8f0:	98 87       	std	Y+8, r25	; 0x08
 8f2:	8f 83       	std	Y+7, r24	; 0x07
				my_car.speed = 3;
 8f4:	f8 01       	movw	r30, r16
 8f6:	80 81       	ld	r24, Z
 8f8:	91 81       	ldd	r25, Z+1	; 0x01
 8fa:	9a 87       	std	Y+10, r25	; 0x0a
				my_car.lcd_text_up = lcd_texts[0];
 8fc:	89 87       	std	Y+9, r24	; 0x09
 8fe:	80 8d       	ldd	r24, Z+24	; 0x18
 900:	91 8d       	ldd	r25, Z+25	; 0x19
 902:	9c 87       	std	Y+12, r25	; 0x0c
 904:	8b 87       	std	Y+11, r24	; 0x0b
				my_car.lcd_text_down = lcd_texts[12];
 906:	5e 86       	std	Y+14, r5	; 0x0e
 908:	4d 86       	std	Y+13, r4	; 0x0d
 90a:	e9 81       	ldd	r30, Y+1	; 0x01
 90c:	fa 81       	ldd	r31, Y+2	; 0x02
				my_car.fnd_char = fnd_fonts[STOP];
 90e:	ee 0f       	add	r30, r30
 910:	ff 1f       	adc	r31, r31
			}
			
		}
		
		car_program_modes[my_car.mode](&my_car);
 912:	ea 58       	subi	r30, 0x8A	; 138
 914:	fe 4f       	sbci	r31, 0xFE	; 254
 916:	01 90       	ld	r0, Z+
 918:	f0 81       	ld	r31, Z
 91a:	e0 2d       	mov	r30, r0
 91c:	ce 01       	movw	r24, r28
 91e:	01 96       	adiw	r24, 0x01	; 1
 920:	09 95       	icall
 922:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <msec_count>
 926:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <msec_count+0x1>
		
		if(msec_count > 1000)
 92a:	89 3e       	cpi	r24, 0xE9	; 233
 92c:	93 40       	sbci	r25, 0x03	; 3
 92e:	0c f4       	brge	.+2      	; 0x932 <auto_car_program+0x176>
 930:	98 cf       	rjmp	.-208    	; 0x862 <auto_car_program+0xa6>
 932:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <msec_count+0x1>
 936:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <msec_count>
		{
			msec_count = 0;
 93a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <sec_count>
 93e:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <sec_count+0x1>
			sec_count++;
 942:	01 96       	adiw	r24, 0x01	; 1
 944:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <sec_count+0x1>
 948:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <sec_count>
 94c:	84 cf       	rjmp	.-248    	; 0x856 <auto_car_program+0x9a>

0000094e <main>:
 94e:	36 df       	rcall	.-404    	; 0x7bc <auto_car_program>

00000950 <init_timer1>:


void init_timer1(void)
{
	// 분주비 설정 (64)
	TCCR1B |= 0 << CS12 | 1 << CS11 | 1 << CS10;
 950:	8e b5       	in	r24, 0x2e	; 46
 952:	83 60       	ori	r24, 0x03	; 3
 954:	8e bd       	out	0x2e, r24	; 46
	
	// 모드설정 : 14번 (ICR1이 TOP인 고속 PWM)
	TCCR1A |= 0 << WGM10 | 1 << WGM11;
 956:	8f b5       	in	r24, 0x2f	; 47
 958:	82 60       	ori	r24, 0x02	; 2
 95a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << WGM12 | 1 << WGM13;
 95c:	8e b5       	in	r24, 0x2e	; 46
 95e:	88 61       	ori	r24, 0x18	; 24
 960:	8e bd       	out	0x2e, r24	; 46
	
	// 비반전 모드 (TOP : ICR1레지스터)
	TCCR1A |= 1 << COM1A1 | 1 << COM1B1;
 962:	8f b5       	in	r24, 0x2f	; 47
 964:	80 6a       	ori	r24, 0xA0	; 160
 966:	8f bd       	out	0x2f, r24	; 47
	
	// ICR1레지스터 설정 (TOP 1023으로 설정, TOP까지 4ms로 설정함)
	ICR1 = 0x3ff;
 968:	8f ef       	ldi	r24, 0xFF	; 255
 96a:	93 e0       	ldi	r25, 0x03	; 3
 96c:	97 bd       	out	0x27, r25	; 39
 96e:	86 bd       	out	0x26, r24	; 38
 970:	08 95       	ret

00000972 <init_L298N>:
}

void init_L298N(void)
{
	// DDR 출력모드 (PWM, 방향)
	MOTOR_PWM_DDR |= 1 << MOTOR_LEFT_PORT_DDR_NUM | 1 << MOTOR_RIGHT_PORT_DDR_NUM;
 972:	87 b3       	in	r24, 0x17	; 23
 974:	80 66       	ori	r24, 0x60	; 96
 976:	87 bb       	out	0x17, r24	; 23
	MOTOR_DRIVER_DIRECTION_DDR |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 978:	e1 e6       	ldi	r30, 0x61	; 97
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	80 81       	ld	r24, Z
 97e:	8f 60       	ori	r24, 0x0F	; 15
 980:	80 83       	st	Z, r24
								  1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM;
	
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 982:	e2 e6       	ldi	r30, 0x62	; 98
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	80 81       	ld	r24, Z
 988:	80 7f       	andi	r24, 0xF0	; 240
 98a:	80 83       	st	Z, r24
									 1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
	
	// direction 전진모드 설정 (정회전)
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN3_NUM;
 98c:	80 81       	ld	r24, Z
 98e:	85 60       	ori	r24, 0x05	; 5
 990:	80 83       	st	Z, r24
 992:	08 95       	ret

00000994 <motor_stop>:

// motor driver IN값을 전부 1로 set한다
void motor_stop(int speed)
{
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 994:	e2 e6       	ldi	r30, 0x62	; 98
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	80 81       	ld	r24, Z
 99a:	80 7f       	andi	r24, 0xF0	; 240
 99c:	80 83       	st	Z, r24
								     1 <<MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
	
	// direction port set
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 99e:	80 81       	ld	r24, Z
 9a0:	8f 60       	ori	r24, 0x0F	; 15
 9a2:	80 83       	st	Z, r24
 9a4:	08 95       	ret

000009a6 <motor_direction_forward>:
								   1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM;
}

void motor_direction_forward(int speed)
{
 9a6:	9c 01       	movw	r18, r24
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 9a8:	e2 e6       	ldi	r30, 0x62	; 98
 9aa:	f0 e0       	ldi	r31, 0x00	; 0
 9ac:	90 81       	ld	r25, Z
 9ae:	90 7f       	andi	r25, 0xF0	; 240
 9b0:	90 83       	st	Z, r25
									 1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
		
	// direction 전진모드 설정 (정회전)
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN3_NUM;
 9b2:	90 81       	ld	r25, Z
 9b4:	95 60       	ori	r25, 0x05	; 5
 9b6:	90 83       	st	Z, r25
	
	// 속도 적용 (양쪽 바퀴에 같은 속도)
	MOTOR_LEFT_PWM = MOTOR_RIGHT_PWM = speed;
 9b8:	39 bd       	out	0x29, r19	; 41
 9ba:	28 bd       	out	0x28, r18	; 40
 9bc:	3b bd       	out	0x2b, r19	; 43
 9be:	2a bd       	out	0x2a, r18	; 42
 9c0:	08 95       	ret

000009c2 <motor_direction_backward>:
}

void motor_direction_backward(int speed)
{
 9c2:	9c 01       	movw	r18, r24
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 9c4:	e2 e6       	ldi	r30, 0x62	; 98
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	90 81       	ld	r25, Z
 9ca:	90 7f       	andi	r25, 0xF0	; 240
 9cc:	90 83       	st	Z, r25
									 1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
		
	// direction 후진모드 설정 (역회전)
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN2_NUM | 1 << MOTOR_DRIVER_IN4_NUM;
 9ce:	90 81       	ld	r25, Z
 9d0:	9a 60       	ori	r25, 0x0A	; 10
 9d2:	90 83       	st	Z, r25
	
	// 속도 적용 (양쪽 바퀴에 같은 속도)
	MOTOR_LEFT_PWM = MOTOR_RIGHT_PWM = speed;
 9d4:	39 bd       	out	0x29, r19	; 41
 9d6:	28 bd       	out	0x28, r18	; 40
 9d8:	3b bd       	out	0x2b, r19	; 43
 9da:	2a bd       	out	0x2a, r18	; 42
 9dc:	08 95       	ret

000009de <motor_turn_left>:
}

void motor_turn_left(int speed)
{
 9de:	cf 93       	push	r28
 9e0:	df 93       	push	r29
 9e2:	ec 01       	movw	r28, r24
	motor_direction_forward(0); // 전진모드 설정
 9e4:	80 e0       	ldi	r24, 0x00	; 0
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	de df       	rcall	.-68     	; 0x9a6 <motor_direction_forward>
	
	MOTOR_LEFT_PWM = 0;
 9ea:	1b bc       	out	0x2b, r1	; 43
 9ec:	1a bc       	out	0x2a, r1	; 42
	MOTOR_RIGHT_PWM = speed;
 9ee:	d9 bd       	out	0x29, r29	; 41
 9f0:	c8 bd       	out	0x28, r28	; 40
}
 9f2:	df 91       	pop	r29
 9f4:	cf 91       	pop	r28
 9f6:	08 95       	ret

000009f8 <motor_turn_right>:

void motor_turn_right(int speed)
{
 9f8:	cf 93       	push	r28
 9fa:	df 93       	push	r29
 9fc:	ec 01       	movw	r28, r24
	motor_direction_forward(0); // 전진모드 설정
 9fe:	80 e0       	ldi	r24, 0x00	; 0
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	d1 df       	rcall	.-94     	; 0x9a6 <motor_direction_forward>
	MOTOR_LEFT_PWM = speed;
 a04:	db bd       	out	0x2b, r29	; 43
 a06:	ca bd       	out	0x2a, r28	; 42
	MOTOR_RIGHT_PWM = 0;
 a08:	19 bc       	out	0x29, r1	; 41
 a0a:	18 bc       	out	0x28, r1	; 40
}
 a0c:	df 91       	pop	r29
 a0e:	cf 91       	pop	r28
 a10:	08 95       	ret

00000a12 <motor_backward_left>:

void motor_backward_left(int speed)
{
 a12:	cf 93       	push	r28
 a14:	df 93       	push	r29
 a16:	ec 01       	movw	r28, r24
	motor_direction_backward(0); // 후진모드
 a18:	80 e0       	ldi	r24, 0x00	; 0
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	d2 df       	rcall	.-92     	; 0x9c2 <motor_direction_backward>
	MOTOR_LEFT_PWM = 300;
 a1e:	8c e2       	ldi	r24, 0x2C	; 44
 a20:	91 e0       	ldi	r25, 0x01	; 1
 a22:	9b bd       	out	0x2b, r25	; 43
 a24:	8a bd       	out	0x2a, r24	; 42
	MOTOR_RIGHT_PWM = speed;
 a26:	d9 bd       	out	0x29, r29	; 41
 a28:	c8 bd       	out	0x28, r28	; 40
}
 a2a:	df 91       	pop	r29
 a2c:	cf 91       	pop	r28
 a2e:	08 95       	ret

00000a30 <motor_backward_right>:

void motor_backward_right(int speed)
{
 a30:	cf 93       	push	r28
 a32:	df 93       	push	r29
 a34:	ec 01       	movw	r28, r24
	motor_direction_backward(0);
 a36:	80 e0       	ldi	r24, 0x00	; 0
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	c3 df       	rcall	.-122    	; 0x9c2 <motor_direction_backward>
	MOTOR_LEFT_PWM = speed;
 a3c:	db bd       	out	0x2b, r29	; 43
 a3e:	ca bd       	out	0x2a, r28	; 42
	MOTOR_RIGHT_PWM = 300;
 a40:	8c e2       	ldi	r24, 0x2C	; 44
 a42:	91 e0       	ldi	r25, 0x01	; 1
 a44:	99 bd       	out	0x29, r25	; 41
 a46:	88 bd       	out	0x28, r24	; 40
}
 a48:	df 91       	pop	r29
 a4a:	cf 91       	pop	r28
 a4c:	08 95       	ret

00000a4e <motor_turn_left_bi>:

void motor_turn_left_bi(int speed)
{
 a4e:	9c 01       	movw	r18, r24
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 a50:	e2 e6       	ldi	r30, 0x62	; 98
 a52:	f0 e0       	ldi	r31, 0x00	; 0
 a54:	90 81       	ld	r25, Z
 a56:	90 7f       	andi	r25, 0xF0	; 240
 a58:	90 83       	st	Z, r25
	1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
	
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN2_NUM | 1 << MOTOR_DRIVER_IN3_NUM;
 a5a:	90 81       	ld	r25, Z
 a5c:	96 60       	ori	r25, 0x06	; 6
 a5e:	90 83       	st	Z, r25
	// 왼쪽바퀴 역회전, 오른쪽바퀴 정회전
	
	MOTOR_LEFT_PWM = MOTOR_RIGHT_PWM = speed;
 a60:	39 bd       	out	0x29, r19	; 41
 a62:	28 bd       	out	0x28, r18	; 40
 a64:	3b bd       	out	0x2b, r19	; 43
 a66:	2a bd       	out	0x2a, r18	; 42
 a68:	08 95       	ret

00000a6a <motor_turn_right_bi>:
}

void motor_turn_right_bi(int speed)
{
 a6a:	9c 01       	movw	r18, r24
	// direction port reset
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN2_NUM |
 a6c:	e2 e6       	ldi	r30, 0x62	; 98
 a6e:	f0 e0       	ldi	r31, 0x00	; 0
 a70:	90 81       	ld	r25, Z
 a72:	90 7f       	andi	r25, 0xF0	; 240
 a74:	90 83       	st	Z, r25
									 1 << MOTOR_DRIVER_IN3_NUM | 1 << MOTOR_DRIVER_IN4_NUM);
	
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << MOTOR_DRIVER_IN1_NUM | 1 << MOTOR_DRIVER_IN4_NUM;
 a76:	90 81       	ld	r25, Z
 a78:	99 60       	ori	r25, 0x09	; 9
 a7a:	90 83       	st	Z, r25
	// 왼쪽바퀴 정회전, 오른쪽바퀴 역회전
	
	MOTOR_LEFT_PWM = MOTOR_RIGHT_PWM = speed;
 a7c:	39 bd       	out	0x29, r19	; 41
 a7e:	28 bd       	out	0x28, r18	; 40
 a80:	3b bd       	out	0x2b, r19	; 43
 a82:	2a bd       	out	0x2a, r18	; 42
 a84:	08 95       	ret

00000a86 <__vector_18>:
PC omportmaster로 부터 1byte가 들어오면 (즉, stop bit가 감지되면) RX complete인터럽트가 호출된다
== 한 바이트마다 인터럽트 처리를 해야하는것!
*/

ISR(USART0_RX_vect)
{
 a86:	1f 92       	push	r1
 a88:	0f 92       	push	r0
 a8a:	0f b6       	in	r0, 0x3f	; 63
 a8c:	0f 92       	push	r0
 a8e:	11 24       	eor	r1, r1
 a90:	0b b6       	in	r0, 0x3b	; 59
 a92:	0f 92       	push	r0
 a94:	2f 93       	push	r18
 a96:	3f 93       	push	r19
 a98:	4f 93       	push	r20
 a9a:	5f 93       	push	r21
 a9c:	6f 93       	push	r22
 a9e:	7f 93       	push	r23
 aa0:	8f 93       	push	r24
 aa2:	9f 93       	push	r25
 aa4:	af 93       	push	r26
 aa6:	bf 93       	push	r27
 aa8:	ef 93       	push	r30
 aaa:	ff 93       	push	r31
 aac:	cf 93       	push	r28
 aae:	df 93       	push	r29
 ab0:	1f 92       	push	r1
 ab2:	cd b7       	in	r28, 0x3d	; 61
 ab4:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t rx_data;
	volatile static int i = 0;	// buffer의 index
	
	rx_data = UDR0; // uart0 하드웨어로 들어온 문자 읽어오기
 ab6:	8c b1       	in	r24, 0x0c	; 12
 ab8:	89 83       	std	Y+1, r24	; 0x01
					// 이렇게 assign연산자로 UDR0값을 읽어오는 순간, UDR0는 empty가됨 (자동)
	
	if(rx_data == '\n')
 aba:	89 81       	ldd	r24, Y+1	; 0x01
 abc:	8a 30       	cpi	r24, 0x0A	; 10
 abe:	49 f5       	brne	.+82     	; 0xb12 <__vector_18+0x8c>
	{
		rx_buff[rear++][i] = 0; // 문장의 끝은 항상 0
 ac0:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <rear>
 ac4:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <rear+0x1>
 ac8:	c9 01       	movw	r24, r18
 aca:	01 96       	adiw	r24, 0x01	; 1
 acc:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <rear+0x1>
 ad0:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <rear>
 ad4:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <i.2088>
 ad8:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <i.2088+0x1>
 adc:	48 e2       	ldi	r20, 0x28	; 40
 ade:	42 9f       	mul	r20, r18
 ae0:	f0 01       	movw	r30, r0
 ae2:	43 9f       	mul	r20, r19
 ae4:	f0 0d       	add	r31, r0
 ae6:	11 24       	eor	r1, r1
 ae8:	e1 5c       	subi	r30, 0xC1	; 193
 aea:	fd 4f       	sbci	r31, 0xFD	; 253
 aec:	e8 0f       	add	r30, r24
 aee:	f9 1f       	adc	r31, r25
 af0:	10 82       	st	Z, r1
		rear %= COMMAND_NUMBER; // 원형큐
 af2:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <rear>
 af6:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <rear+0x1>
 afa:	6a e0       	ldi	r22, 0x0A	; 10
 afc:	70 e0       	ldi	r23, 0x00	; 0
 afe:	c7 d1       	rcall	.+910    	; 0xe8e <__divmodhi4>
 b00:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <rear+0x1>
 b04:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <rear>
		i = 0; // 새로오는건 버퍼에 새롭게 채워야함 (다른 메시지니까!)
 b08:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <i.2088+0x1>
 b0c:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <i.2088>
 b10:	1c c0       	rjmp	.+56     	; 0xb4a <__vector_18+0xc4>
		// 큐 full 여부 확인
	}
	else
	{
		// 그냥 버퍼에 넣기 (push)
		rx_buff[rear][i++] = rx_data;
 b12:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <rear>
 b16:	70 91 3e 02 	lds	r23, 0x023E	; 0x80023e <rear+0x1>
 b1a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <i.2088>
 b1e:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <i.2088+0x1>
 b22:	9c 01       	movw	r18, r24
 b24:	2f 5f       	subi	r18, 0xFF	; 255
 b26:	3f 4f       	sbci	r19, 0xFF	; 255
 b28:	30 93 2a 02 	sts	0x022A, r19	; 0x80022a <i.2088+0x1>
 b2c:	20 93 29 02 	sts	0x0229, r18	; 0x800229 <i.2088>
 b30:	49 81       	ldd	r20, Y+1	; 0x01
 b32:	58 e2       	ldi	r21, 0x28	; 40
 b34:	56 9f       	mul	r21, r22
 b36:	90 01       	movw	r18, r0
 b38:	57 9f       	mul	r21, r23
 b3a:	30 0d       	add	r19, r0
 b3c:	11 24       	eor	r1, r1
 b3e:	21 5c       	subi	r18, 0xC1	; 193
 b40:	3d 4f       	sbci	r19, 0xFD	; 253
 b42:	f9 01       	movw	r30, r18
 b44:	e8 0f       	add	r30, r24
 b46:	f9 1f       	adc	r31, r25
 b48:	40 83       	st	Z, r20
		// command length 확인
	}
}
 b4a:	0f 90       	pop	r0
 b4c:	df 91       	pop	r29
 b4e:	cf 91       	pop	r28
 b50:	ff 91       	pop	r31
 b52:	ef 91       	pop	r30
 b54:	bf 91       	pop	r27
 b56:	af 91       	pop	r26
 b58:	9f 91       	pop	r25
 b5a:	8f 91       	pop	r24
 b5c:	7f 91       	pop	r23
 b5e:	6f 91       	pop	r22
 b60:	5f 91       	pop	r21
 b62:	4f 91       	pop	r20
 b64:	3f 91       	pop	r19
 b66:	2f 91       	pop	r18
 b68:	0f 90       	pop	r0
 b6a:	0b be       	out	0x3b, r0	; 59
 b6c:	0f 90       	pop	r0
 b6e:	0f be       	out	0x3f, r0	; 63
 b70:	0f 90       	pop	r0
 b72:	1f 90       	pop	r1
 b74:	18 95       	reti

00000b76 <init_uart0>:

*/
void init_uart0(void)
{
	// 전송속도 설정
	UBRR0H = 0x00;
 b76:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207; // 2배속 모드임
 b7a:	8f ec       	ldi	r24, 0xCF	; 207
 b7c:	89 b9       	out	0x09, r24	; 9
	//UBRR0L = 16;
	//UBRR0L = 832;
	
	UCSR0A |= 1 << U2X0; // 2배속 통신
 b7e:	59 9a       	sbi	0x0b, 1	; 11
	
	UCSR0C |= 0x06; // 비동기, none 8bit, data 8 bit
 b80:	e5 e9       	ldi	r30, 0x95	; 149
 b82:	f0 e0       	ldi	r31, 0x00	; 0
 b84:	80 81       	ld	r24, Z
 b86:	86 60       	ori	r24, 0x06	; 6
 b88:	80 83       	st	Z, r24
	
	// 인터럽트, uart 기능 설정
	//UCSR0B |= 1 << RXEN0; // 수신 허용
	//UCSR0B |= 1 << TXEN0; // 송신 허용
	//UCSR0B |= 1 << RXCIE0; // 수신 인터럽트 허용
	UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
 b8a:	8a b1       	in	r24, 0x0a	; 10
 b8c:	88 69       	ori	r24, 0x98	; 152
 b8e:	8a b9       	out	0x0a, r24	; 10
	
	rear = front = 0;
 b90:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <front+0x1>
 b94:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <front>
 b98:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <rear+0x1>
 b9c:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <rear>
 ba0:	08 95       	ret

00000ba2 <UART0_transmit>:

void UART0_transmit(uint8_t data)
{
	// 데이터가 전송중이면, 끝날때까지 기다려야함
	// == 레지스터가 비었는지 안비었는지 확인해양함
	while(!(UCSR0A & 1 << UDRE0)) ; // 버퍼가 비어있을때까지 여기서 무한대기
 ba2:	5d 9b       	sbis	0x0b, 5	; 11
 ba4:	fe cf       	rjmp	.-4      	; 0xba2 <UART0_transmit>
	
	UDR0 = data; // data를 h/w에 전송
 ba6:	8c b9       	out	0x0c, r24	; 12
 ba8:	08 95       	ret

00000baa <__vector_30>:
#include "uart1.h"

volatile uint8_t pre_bt_data = 0;
volatile uint8_t bt_data = 0; // 명령어
ISR(USART1_RX_vect)
{
 baa:	1f 92       	push	r1
 bac:	0f 92       	push	r0
 bae:	0f b6       	in	r0, 0x3f	; 63
 bb0:	0f 92       	push	r0
 bb2:	11 24       	eor	r1, r1
 bb4:	8f 93       	push	r24
	pre_bt_data = bt_data;
 bb6:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <bt_data>
 bba:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <pre_bt_data>
	bt_data = UDR1;
 bbe:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 bc2:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <bt_data>
}
 bc6:	8f 91       	pop	r24
 bc8:	0f 90       	pop	r0
 bca:	0f be       	out	0x3f, r0	; 63
 bcc:	0f 90       	pop	r0
 bce:	1f 90       	pop	r1
 bd0:	18 95       	reti

00000bd2 <init_uart1>:

void init_uart1(void)
{
	// 전송속도 설정
	UBRR1H = 0x00;
 bd2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207; // 2배속 모드임
 bd6:	8f ec       	ldi	r24, 0xCF	; 207
 bd8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>

	UCSR1A |= 1 << U2X1; // 2배속 통신
 bdc:	eb e9       	ldi	r30, 0x9B	; 155
 bde:	f0 e0       	ldi	r31, 0x00	; 0
 be0:	80 81       	ld	r24, Z
 be2:	82 60       	ori	r24, 0x02	; 2
 be4:	80 83       	st	Z, r24
	
	UCSR1C |= 0x06; // 비동기, none 8bit, data 8 bit
 be6:	ed e9       	ldi	r30, 0x9D	; 157
 be8:	f0 e0       	ldi	r31, 0x00	; 0
 bea:	80 81       	ld	r24, Z
 bec:	86 60       	ori	r24, 0x06	; 6
 bee:	80 83       	st	Z, r24
	
	// 인터럽트, uart 기능 설정
	UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
 bf0:	ea e9       	ldi	r30, 0x9A	; 154
 bf2:	f0 e0       	ldi	r31, 0x00	; 0
 bf4:	80 81       	ld	r24, Z
 bf6:	88 69       	ori	r24, 0x98	; 152
 bf8:	80 83       	st	Z, r24
 bfa:	08 95       	ret

00000bfc <trigger_ultrasonic_left>:
	TIMSK |= 1 << TOIE2;
}

void trigger_ultrasonic_left(void)
{
	distance_checking = 1;
 bfc:	81 e0       	ldi	r24, 0x01	; 1
 bfe:	90 e0       	ldi	r25, 0x00	; 0
 c00:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <distance_checking+0x1>
 c04:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <distance_checking>
	
	TRIG_PORT &= ~(1 << TRIG_LEFT_PIN_NUM); 
 c08:	d8 98       	cbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 c0a:	85 e0       	ldi	r24, 0x05	; 5
 c0c:	8a 95       	dec	r24
 c0e:	f1 f7       	brne	.-4      	; 0xc0c <trigger_ultrasonic_left+0x10>
 c10:	00 00       	nop
	
	_delay_us(1);
	
	TRIG_PORT |= 1 << TRIG_LEFT_PIN_NUM;
 c12:	d8 9a       	sbi	0x1b, 0	; 27
 c14:	80 e5       	ldi	r24, 0x50	; 80
 c16:	8a 95       	dec	r24
 c18:	f1 f7       	brne	.-4      	; 0xc16 <trigger_ultrasonic_left+0x1a>
	
	_delay_us(15);
	
	TRIG_PORT &= ~(1 << TRIG_LEFT_PIN_NUM);
 c1a:	d8 98       	cbi	0x1b, 0	; 27
 c1c:	08 95       	ret

00000c1e <trigger_ultrasonic_center>:
}

void trigger_ultrasonic_center(void)
{
	distance_checking = 1;
 c1e:	81 e0       	ldi	r24, 0x01	; 1
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <distance_checking+0x1>
 c26:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <distance_checking>
	
	TRIG_PORT &= ~(1 << TRIG_CENTER_PIN_NUM); 
 c2a:	d9 98       	cbi	0x1b, 1	; 27
 c2c:	85 e0       	ldi	r24, 0x05	; 5
 c2e:	8a 95       	dec	r24
 c30:	f1 f7       	brne	.-4      	; 0xc2e <trigger_ultrasonic_center+0x10>
 c32:	00 00       	nop
	
	_delay_us(1);
	
	TRIG_PORT |= 1 << TRIG_CENTER_PIN_NUM;
 c34:	d9 9a       	sbi	0x1b, 1	; 27
 c36:	80 e5       	ldi	r24, 0x50	; 80
 c38:	8a 95       	dec	r24
 c3a:	f1 f7       	brne	.-4      	; 0xc38 <trigger_ultrasonic_center+0x1a>
	
	_delay_us(15);
	
	TRIG_PORT &= ~(1 << TRIG_CENTER_PIN_NUM);
 c3c:	d9 98       	cbi	0x1b, 1	; 27
 c3e:	08 95       	ret

00000c40 <trigger_ultrasonic_right>:
}

void trigger_ultrasonic_right(void)
{
	distance_checking = 1;
 c40:	81 e0       	ldi	r24, 0x01	; 1
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <distance_checking+0x1>
 c48:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <distance_checking>
	
	TRIG_PORT &= ~(1 << TRIG_RIGHT_PIN_NUM);
 c4c:	da 98       	cbi	0x1b, 2	; 27
 c4e:	85 e0       	ldi	r24, 0x05	; 5
 c50:	8a 95       	dec	r24
 c52:	f1 f7       	brne	.-4      	; 0xc50 <trigger_ultrasonic_right+0x10>
 c54:	00 00       	nop
	
	_delay_us(1);
	
	TRIG_PORT |= 1 << TRIG_RIGHT_PIN_NUM;
 c56:	da 9a       	sbi	0x1b, 2	; 27
 c58:	80 e5       	ldi	r24, 0x50	; 80
 c5a:	8a 95       	dec	r24
 c5c:	f1 f7       	brne	.-4      	; 0xc5a <trigger_ultrasonic_right+0x1a>
	
	_delay_us(15);
	
	TRIG_PORT &= ~(1 << TRIG_RIGHT_PIN_NUM);
 c5e:	da 98       	cbi	0x1b, 2	; 27
 c60:	08 95       	ret

00000c62 <__vector_10>:
	trigger_ultrasonic_center,
	trigger_ultrasonic_right
};

ISR(TIMER2_OVF_vect)
{
 c62:	1f 92       	push	r1
 c64:	0f 92       	push	r0
 c66:	0f b6       	in	r0, 0x3f	; 63
 c68:	0f 92       	push	r0
 c6a:	11 24       	eor	r1, r1
 c6c:	8f 93       	push	r24
 c6e:	9f 93       	push	r25
	overflows++;
 c70:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <overflows>
 c74:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <overflows+0x1>
 c78:	01 96       	adiw	r24, 0x01	; 1
 c7a:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <overflows+0x1>
 c7e:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <overflows>
}
 c82:	9f 91       	pop	r25
 c84:	8f 91       	pop	r24
 c86:	0f 90       	pop	r0
 c88:	0f be       	out	0x3f, r0	; 63
 c8a:	0f 90       	pop	r0
 c8c:	1f 90       	pop	r1
 c8e:	18 95       	reti

00000c90 <__vector_5>:

// left
ISR(INT4_vect)
{
 c90:	1f 92       	push	r1
 c92:	0f 92       	push	r0
 c94:	0f b6       	in	r0, 0x3f	; 63
 c96:	0f 92       	push	r0
 c98:	11 24       	eor	r1, r1
 c9a:	8f 93       	push	r24
 c9c:	9f 93       	push	r25
 c9e:	85 e0       	ldi	r24, 0x05	; 5
 ca0:	8a 95       	dec	r24
 ca2:	f1 f7       	brne	.-4      	; 0xca0 <__vector_5+0x10>
 ca4:	00 00       	nop
	_delay_us(1);
	if(ECHO_PIN & 1 << ECHO_LEFT_PIN_NUM)
 ca6:	0c 9b       	sbis	0x01, 4	; 1
 ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <__vector_5+0x26>
	{
		TCNT2 = 0;
 caa:	14 bc       	out	0x24, r1	; 36
		overflows = 0;
 cac:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <overflows+0x1>
 cb0:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <overflows>
 cb4:	2a c0       	rjmp	.+84     	; 0xd0a <__vector_5+0x7a>
	}
	else
	{
		tcnt_value = TCNT2;
 cb6:	84 b5       	in	r24, 0x24	; 36
 cb8:	90 e0       	ldi	r25, 0x00	; 0
 cba:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <tcnt_value+0x1>
 cbe:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <tcnt_value>
		overflows_value = overflows;
 cc2:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <overflows>
 cc6:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <overflows+0x1>
 cca:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <overflows_value+0x1>
 cce:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <overflows_value>
		
		if(overflows_value > 0)
 cd2:	18 16       	cp	r1, r24
 cd4:	19 06       	cpc	r1, r25
 cd6:	3c f4       	brge	.+14     	; 0xce6 <__vector_5+0x56>
		{
			// 약 2ms -> 35센치 이상 넘어감
			obstacle_info[0] = 300;
 cd8:	8c e2       	ldi	r24, 0x2C	; 44
 cda:	91 e0       	ldi	r25, 0x01	; 1
 cdc:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <obstacle_info+0x1>
 ce0:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <obstacle_info>
 ce4:	08 c0       	rjmp	.+16     	; 0xcf6 <__vector_5+0x66>
		}else{
			obstacle_info[0] = tcnt_value;
 ce6:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <tcnt_value>
 cea:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <tcnt_value+0x1>
 cee:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <obstacle_info+0x1>
 cf2:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <obstacle_info>
		}
		
		check_distance_index = 1;
 cf6:	81 e0       	ldi	r24, 0x01	; 1
 cf8:	90 e0       	ldi	r25, 0x00	; 0
 cfa:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <check_distance_index+0x1>
 cfe:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <check_distance_index>
		distance_checking = 0;
 d02:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <distance_checking+0x1>
 d06:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <distance_checking>
	}
}
 d0a:	9f 91       	pop	r25
 d0c:	8f 91       	pop	r24
 d0e:	0f 90       	pop	r0
 d10:	0f be       	out	0x3f, r0	; 63
 d12:	0f 90       	pop	r0
 d14:	1f 90       	pop	r1
 d16:	18 95       	reti

00000d18 <__vector_6>:

// center
ISR(INT5_vect)
{
 d18:	1f 92       	push	r1
 d1a:	0f 92       	push	r0
 d1c:	0f b6       	in	r0, 0x3f	; 63
 d1e:	0f 92       	push	r0
 d20:	11 24       	eor	r1, r1
 d22:	8f 93       	push	r24
 d24:	9f 93       	push	r25
 d26:	85 e0       	ldi	r24, 0x05	; 5
 d28:	8a 95       	dec	r24
 d2a:	f1 f7       	brne	.-4      	; 0xd28 <__vector_6+0x10>
 d2c:	00 00       	nop
	_delay_us(1);
	if(ECHO_PIN & 1 << ECHO_CENTER_PIN_NUM)
 d2e:	0d 9b       	sbis	0x01, 5	; 1
 d30:	06 c0       	rjmp	.+12     	; 0xd3e <__vector_6+0x26>
	{
		TCNT2 = 0;
 d32:	14 bc       	out	0x24, r1	; 36
		overflows = 0;
 d34:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <overflows+0x1>
 d38:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <overflows>
 d3c:	2a c0       	rjmp	.+84     	; 0xd92 <__vector_6+0x7a>
	}
	else
	{
		tcnt_value = TCNT2;
 d3e:	84 b5       	in	r24, 0x24	; 36
 d40:	90 e0       	ldi	r25, 0x00	; 0
 d42:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <tcnt_value+0x1>
 d46:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <tcnt_value>
		overflows_value = overflows;
 d4a:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <overflows>
 d4e:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <overflows+0x1>
 d52:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <overflows_value+0x1>
 d56:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <overflows_value>
		
		if(overflows_value > 0)
 d5a:	18 16       	cp	r1, r24
 d5c:	19 06       	cpc	r1, r25
 d5e:	3c f4       	brge	.+14     	; 0xd6e <__vector_6+0x56>
		{
			// 약 2ms -> 35센치 이상 넘어감
			obstacle_info[1] = 300;
 d60:	8c e2       	ldi	r24, 0x2C	; 44
 d62:	91 e0       	ldi	r25, 0x01	; 1
 d64:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <obstacle_info+0x3>
 d68:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <obstacle_info+0x2>
 d6c:	08 c0       	rjmp	.+16     	; 0xd7e <__vector_6+0x66>
		}else{
			obstacle_info[1] = tcnt_value;
 d6e:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <tcnt_value>
 d72:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <tcnt_value+0x1>
 d76:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <obstacle_info+0x3>
 d7a:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <obstacle_info+0x2>

		}
		
		check_distance_index = 2;
 d7e:	82 e0       	ldi	r24, 0x02	; 2
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <check_distance_index+0x1>
 d86:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <check_distance_index>
		distance_checking = 0;
 d8a:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <distance_checking+0x1>
 d8e:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <distance_checking>
	}
}
 d92:	9f 91       	pop	r25
 d94:	8f 91       	pop	r24
 d96:	0f 90       	pop	r0
 d98:	0f be       	out	0x3f, r0	; 63
 d9a:	0f 90       	pop	r0
 d9c:	1f 90       	pop	r1
 d9e:	18 95       	reti

00000da0 <__vector_7>:

// right
ISR(INT6_vect)
{
 da0:	1f 92       	push	r1
 da2:	0f 92       	push	r0
 da4:	0f b6       	in	r0, 0x3f	; 63
 da6:	0f 92       	push	r0
 da8:	11 24       	eor	r1, r1
 daa:	8f 93       	push	r24
 dac:	9f 93       	push	r25
 dae:	85 e0       	ldi	r24, 0x05	; 5
 db0:	8a 95       	dec	r24
 db2:	f1 f7       	brne	.-4      	; 0xdb0 <__vector_7+0x10>
 db4:	00 00       	nop
	_delay_us(1);
	if(ECHO_PIN & 1 << ECHO_RIGHT_PIN_NUM)
 db6:	0e 9b       	sbis	0x01, 6	; 1
 db8:	06 c0       	rjmp	.+12     	; 0xdc6 <__vector_7+0x26>
	{
		TCNT2 = 0;
 dba:	14 bc       	out	0x24, r1	; 36
		overflows = 0;
 dbc:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <overflows+0x1>
 dc0:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <overflows>
 dc4:	28 c0       	rjmp	.+80     	; 0xe16 <__vector_7+0x76>
	}
	else
	{
		tcnt_value = TCNT2;
 dc6:	84 b5       	in	r24, 0x24	; 36
 dc8:	90 e0       	ldi	r25, 0x00	; 0
 dca:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <tcnt_value+0x1>
 dce:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <tcnt_value>
		overflows_value = overflows;
 dd2:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <overflows>
 dd6:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <overflows+0x1>
 dda:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <overflows_value+0x1>
 dde:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <overflows_value>
		
		if(overflows_value > 0)
 de2:	18 16       	cp	r1, r24
 de4:	19 06       	cpc	r1, r25
 de6:	3c f4       	brge	.+14     	; 0xdf6 <__vector_7+0x56>
		{
			// 약 2ms -> 35센치 이상 넘어감
			obstacle_info[2] = 300;
 de8:	8c e2       	ldi	r24, 0x2C	; 44
 dea:	91 e0       	ldi	r25, 0x01	; 1
 dec:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <obstacle_info+0x5>
 df0:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <obstacle_info+0x4>
 df4:	08 c0       	rjmp	.+16     	; 0xe06 <__vector_7+0x66>
		}else{
			obstacle_info[2] = tcnt_value;
 df6:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <tcnt_value>
 dfa:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <tcnt_value+0x1>
 dfe:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <obstacle_info+0x5>
 e02:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <obstacle_info+0x4>

		}
		
		check_distance_index = 0;
 e06:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <check_distance_index+0x1>
 e0a:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <check_distance_index>
		distance_checking = 0;
 e0e:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <distance_checking+0x1>
 e12:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <distance_checking>
	}
}
 e16:	9f 91       	pop	r25
 e18:	8f 91       	pop	r24
 e1a:	0f 90       	pop	r0
 e1c:	0f be       	out	0x3f, r0	; 63
 e1e:	0f 90       	pop	r0
 e20:	1f 90       	pop	r1
 e22:	18 95       	reti

00000e24 <init_ultrasonic>:


void init_ultrasonic(void)
{
	// ddr
	TRIG_DDR |= 1 << TRIG_LEFT_PIN_NUM | 1 << TRIG_CENTER_PIN_NUM | 1 << TRIG_RIGHT_PIN_NUM;
 e24:	8a b3       	in	r24, 0x1a	; 26
 e26:	87 60       	ori	r24, 0x07	; 7
 e28:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR &= ~(1 << ECHO_LEFT_PIN_NUM | 1 << ECHO_CENTER_PIN_NUM | 1 << ECHO_RIGHT_PIN_NUM);
 e2a:	82 b1       	in	r24, 0x02	; 2
 e2c:	8f 78       	andi	r24, 0x8F	; 143
 e2e:	82 b9       	out	0x02, r24	; 2
	
	// interrupt 설정 (echo)
	EICRB |= 0 << ISC41 | 1 << ISC40 | 0 << ISC51 | 1 << ISC50 | 0 << ISC61 | 1 << ISC60;
 e30:	8a b7       	in	r24, 0x3a	; 58
 e32:	85 61       	ori	r24, 0x15	; 21
 e34:	8a bf       	out	0x3a, r24	; 58
	
	// timer 설정 (128분주)
	TCCR2 |= 1 << CS22 | 0 << CS21 | 1 << CS20;
 e36:	85 b5       	in	r24, 0x25	; 37
 e38:	85 60       	ori	r24, 0x05	; 5
 e3a:	85 bd       	out	0x25, r24	; 37
	
	// local interrupt 마스크
	EIMSK |= 1 << INT4 | 1 << INT5 | 1 << INT6; // EXTERNAL interrupt 활성화
 e3c:	89 b7       	in	r24, 0x39	; 57
 e3e:	80 67       	ori	r24, 0x70	; 112
 e40:	89 bf       	out	0x39, r24	; 57
	
	// timer overflow interrupt 마스크
	TIMSK |= 1 << TOIE2;
 e42:	87 b7       	in	r24, 0x37	; 55
 e44:	80 64       	ori	r24, 0x40	; 64
 e46:	87 bf       	out	0x37, r24	; 55
 e48:	08 95       	ret

00000e4a <check_obstacle>:
	TRIG_PORT &= ~(1 << TRIG_RIGHT_PIN_NUM);
}

void check_obstacle(void)
{
	if(!distance_checking)
 e4a:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <distance_checking>
 e4e:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <distance_checking+0x1>
 e52:	89 2b       	or	r24, r25
 e54:	89 f4       	brne	.+34     	; 0xe78 <check_obstacle+0x2e>
	{
		//_delay_ms(1000);
		//printf("%d,%d,%d\n",obstacle_info[0], obstacle_info[1], obstacle_info[2]);
		//printf("\ntrigger\n");
		sec_count = 0;
 e56:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <sec_count+0x1>
 e5a:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <sec_count>
		triger_funcs[check_distance_index]();
 e5e:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <check_distance_index>
 e62:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <check_distance_index+0x1>
 e66:	ee 0f       	add	r30, r30
 e68:	ff 1f       	adc	r31, r31
 e6a:	e6 56       	subi	r30, 0x66	; 102
 e6c:	fe 4f       	sbci	r31, 0xFE	; 254
 e6e:	01 90       	ld	r0, Z+
 e70:	f0 81       	ld	r31, Z
 e72:	e0 2d       	mov	r30, r0
 e74:	09 95       	icall
 e76:	08 95       	ret
	}else{
		if(sec_count > 3)
 e78:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <sec_count>
 e7c:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <sec_count+0x1>
 e80:	04 97       	sbiw	r24, 0x04	; 4
 e82:	24 f0       	brlt	.+8      	; 0xe8c <check_obstacle+0x42>
		{
			distance_checking = 0;
 e84:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <distance_checking+0x1>
 e88:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <distance_checking>
 e8c:	08 95       	ret

00000e8e <__divmodhi4>:
 e8e:	97 fb       	bst	r25, 7
 e90:	07 2e       	mov	r0, r23
 e92:	16 f4       	brtc	.+4      	; 0xe98 <__divmodhi4+0xa>
 e94:	00 94       	com	r0
 e96:	06 d0       	rcall	.+12     	; 0xea4 <__divmodhi4_neg1>
 e98:	77 fd       	sbrc	r23, 7
 e9a:	08 d0       	rcall	.+16     	; 0xeac <__divmodhi4_neg2>
 e9c:	14 d0       	rcall	.+40     	; 0xec6 <__udivmodhi4>
 e9e:	07 fc       	sbrc	r0, 7
 ea0:	05 d0       	rcall	.+10     	; 0xeac <__divmodhi4_neg2>
 ea2:	3e f4       	brtc	.+14     	; 0xeb2 <__divmodhi4_exit>

00000ea4 <__divmodhi4_neg1>:
 ea4:	90 95       	com	r25
 ea6:	81 95       	neg	r24
 ea8:	9f 4f       	sbci	r25, 0xFF	; 255
 eaa:	08 95       	ret

00000eac <__divmodhi4_neg2>:
 eac:	70 95       	com	r23
 eae:	61 95       	neg	r22
 eb0:	7f 4f       	sbci	r23, 0xFF	; 255

00000eb2 <__divmodhi4_exit>:
 eb2:	08 95       	ret

00000eb4 <__tablejump2__>:
 eb4:	ee 0f       	add	r30, r30
 eb6:	ff 1f       	adc	r31, r31
 eb8:	00 24       	eor	r0, r0
 eba:	00 1c       	adc	r0, r0
 ebc:	0b be       	out	0x3b, r0	; 59
 ebe:	07 90       	elpm	r0, Z+
 ec0:	f6 91       	elpm	r31, Z
 ec2:	e0 2d       	mov	r30, r0
 ec4:	09 94       	ijmp

00000ec6 <__udivmodhi4>:
 ec6:	aa 1b       	sub	r26, r26
 ec8:	bb 1b       	sub	r27, r27
 eca:	51 e1       	ldi	r21, 0x11	; 17
 ecc:	07 c0       	rjmp	.+14     	; 0xedc <__udivmodhi4_ep>

00000ece <__udivmodhi4_loop>:
 ece:	aa 1f       	adc	r26, r26
 ed0:	bb 1f       	adc	r27, r27
 ed2:	a6 17       	cp	r26, r22
 ed4:	b7 07       	cpc	r27, r23
 ed6:	10 f0       	brcs	.+4      	; 0xedc <__udivmodhi4_ep>
 ed8:	a6 1b       	sub	r26, r22
 eda:	b7 0b       	sbc	r27, r23

00000edc <__udivmodhi4_ep>:
 edc:	88 1f       	adc	r24, r24
 ede:	99 1f       	adc	r25, r25
 ee0:	5a 95       	dec	r21
 ee2:	a9 f7       	brne	.-22     	; 0xece <__udivmodhi4_loop>
 ee4:	80 95       	com	r24
 ee6:	90 95       	com	r25
 ee8:	bc 01       	movw	r22, r24
 eea:	cd 01       	movw	r24, r26
 eec:	08 95       	ret

00000eee <_exit>:
 eee:	f8 94       	cli

00000ef0 <__stop_program>:
 ef0:	ff cf       	rjmp	.-2      	; 0xef0 <__stop_program>
